
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Outlet
 * 
 */
export type Outlet = $Result.DefaultSelection<Prisma.$OutletPayload>
/**
 * Model PickupOrder
 * 
 */
export type PickupOrder = $Result.DefaultSelection<Prisma.$PickupOrderPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model LaundryItem
 * 
 */
export type LaundryItem = $Result.DefaultSelection<Prisma.$LaundryItemPayload>
/**
 * Model DeliveryOrder
 * 
 */
export type DeliveryOrder = $Result.DefaultSelection<Prisma.$DeliveryOrderPayload>
/**
 * Model OrderWorker
 * 
 */
export type OrderWorker = $Result.DefaultSelection<Prisma.$OrderWorkerPayload>
/**
 * Model UserNotification
 * 
 */
export type UserNotification = $Result.DefaultSelection<Prisma.$UserNotificationPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  OUTLET_ADMIN: 'OUTLET_ADMIN',
  WORKER: 'WORKER',
  DRIVER: 'DRIVER',
  CUSTOMER: 'CUSTOMER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const OrderStatus: {
  WAITING_FOR_PICKUP_DRIVER: 'WAITING_FOR_PICKUP_DRIVER',
  ON_THE_WAY_TO_CUSTOMER: 'ON_THE_WAY_TO_CUSTOMER',
  ON_THE_WAY_TO_OUTLET: 'ON_THE_WAY_TO_OUTLET',
  ARRIVED_AT_OUTLET: 'ARRIVED_AT_OUTLET',
  READY_FOR_WASHING: 'READY_FOR_WASHING',
  BEING_WASHED: 'BEING_WASHED',
  WASHING_COMPLETED: 'WASHING_COMPLETED',
  BEING_IRONED: 'BEING_IRONED',
  IRONING_COMPLETED: 'IRONING_COMPLETED',
  BEING_PACKED: 'BEING_PACKED',
  AWAITING_PAYMENT: 'AWAITING_PAYMENT',
  READY_FOR_DELIVERY: 'READY_FOR_DELIVERY',
  WAITING_FOR_DELIVERY_DRIVER: 'WAITING_FOR_DELIVERY_DRIVER',
  BEING_DELIVERED_TO_CUSTOMER: 'BEING_DELIVERED_TO_CUSTOMER',
  RECEIVED_BY_CUSTOMER: 'RECEIVED_BY_CUSTOMER',
  COMPLETED: 'COMPLETED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const EmployeeWorkShift: {
  DAY: 'DAY',
  NIGHT: 'NIGHT'
};

export type EmployeeWorkShift = (typeof EmployeeWorkShift)[keyof typeof EmployeeWorkShift]


export const EmployeeStation: {
  WASHING: 'WASHING',
  IRONING: 'IRONING',
  PACKING: 'PACKING'
};

export type EmployeeStation = (typeof EmployeeStation)[keyof typeof EmployeeStation]


export const OutletType: {
  MAIN: 'MAIN',
  BRANCH: 'BRANCH'
};

export type OutletType = (typeof OutletType)[keyof typeof OutletType]


export const DeliveryStatus: {
  NOT_READY_TO_DELIVER: 'NOT_READY_TO_DELIVER',
  WAITING_FOR_DRIVER: 'WAITING_FOR_DRIVER',
  ON_THE_WAY_TO_OUTLET: 'ON_THE_WAY_TO_OUTLET',
  ON_THE_WAY_TO_CUSTOMER: 'ON_THE_WAY_TO_CUSTOMER',
  RECEIVED_BY_CUSTOMER: 'RECEIVED_BY_CUSTOMER'
};

export type DeliveryStatus = (typeof DeliveryStatus)[keyof typeof DeliveryStatus]


export const PickupStatus: {
  WAITING_FOR_DRIVER: 'WAITING_FOR_DRIVER',
  ON_THE_WAY_TO_CUSTOMER: 'ON_THE_WAY_TO_CUSTOMER',
  ON_THE_WAY_TO_OUTLET: 'ON_THE_WAY_TO_OUTLET',
  RECEIVED_BY_OUTLET: 'RECEIVED_BY_OUTLET'
};

export type PickupStatus = (typeof PickupStatus)[keyof typeof PickupStatus]


export const AttendanceStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type AttendanceStatus = (typeof AttendanceStatus)[keyof typeof AttendanceStatus]


export const PaymentStatus: {
  SUCCESSED: 'SUCCESSED',
  CANCELLED: 'CANCELLED',
  DENIED: 'DENIED',
  EXPIRED: 'EXPIRED',
  PENDING: 'PENDING'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type EmployeeWorkShift = $Enums.EmployeeWorkShift

export const EmployeeWorkShift: typeof $Enums.EmployeeWorkShift

export type EmployeeStation = $Enums.EmployeeStation

export const EmployeeStation: typeof $Enums.EmployeeStation

export type OutletType = $Enums.OutletType

export const OutletType: typeof $Enums.OutletType

export type DeliveryStatus = $Enums.DeliveryStatus

export const DeliveryStatus: typeof $Enums.DeliveryStatus

export type PickupStatus = $Enums.PickupStatus

export const PickupStatus: typeof $Enums.PickupStatus

export type AttendanceStatus = $Enums.AttendanceStatus

export const AttendanceStatus: typeof $Enums.AttendanceStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.outlet`: Exposes CRUD operations for the **Outlet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Outlets
    * const outlets = await prisma.outlet.findMany()
    * ```
    */
  get outlet(): Prisma.OutletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pickupOrder`: Exposes CRUD operations for the **PickupOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PickupOrders
    * const pickupOrders = await prisma.pickupOrder.findMany()
    * ```
    */
  get pickupOrder(): Prisma.PickupOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.laundryItem`: Exposes CRUD operations for the **LaundryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LaundryItems
    * const laundryItems = await prisma.laundryItem.findMany()
    * ```
    */
  get laundryItem(): Prisma.LaundryItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deliveryOrder`: Exposes CRUD operations for the **DeliveryOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeliveryOrders
    * const deliveryOrders = await prisma.deliveryOrder.findMany()
    * ```
    */
  get deliveryOrder(): Prisma.DeliveryOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderWorker`: Exposes CRUD operations for the **OrderWorker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderWorkers
    * const orderWorkers = await prisma.orderWorker.findMany()
    * ```
    */
  get orderWorker(): Prisma.OrderWorkerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userNotification`: Exposes CRUD operations for the **UserNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserNotifications
    * const userNotifications = await prisma.userNotification.findMany()
    * ```
    */
  get userNotification(): Prisma.UserNotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Employee: 'Employee',
    Address: 'Address',
    Outlet: 'Outlet',
    PickupOrder: 'PickupOrder',
    Order: 'Order',
    OrderItem: 'OrderItem',
    LaundryItem: 'LaundryItem',
    DeliveryOrder: 'DeliveryOrder',
    OrderWorker: 'OrderWorker',
    UserNotification: 'UserNotification',
    Notification: 'Notification',
    Payment: 'Payment',
    Attendance: 'Attendance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "employee" | "address" | "outlet" | "pickupOrder" | "order" | "orderItem" | "laundryItem" | "deliveryOrder" | "orderWorker" | "userNotification" | "notification" | "payment" | "attendance"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Outlet: {
        payload: Prisma.$OutletPayload<ExtArgs>
        fields: Prisma.OutletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OutletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OutletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          findFirst: {
            args: Prisma.OutletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OutletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          findMany: {
            args: Prisma.OutletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>[]
          }
          create: {
            args: Prisma.OutletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          createMany: {
            args: Prisma.OutletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OutletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>[]
          }
          delete: {
            args: Prisma.OutletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          update: {
            args: Prisma.OutletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          deleteMany: {
            args: Prisma.OutletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OutletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OutletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>[]
          }
          upsert: {
            args: Prisma.OutletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          aggregate: {
            args: Prisma.OutletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOutlet>
          }
          groupBy: {
            args: Prisma.OutletGroupByArgs<ExtArgs>
            result: $Utils.Optional<OutletGroupByOutputType>[]
          }
          count: {
            args: Prisma.OutletCountArgs<ExtArgs>
            result: $Utils.Optional<OutletCountAggregateOutputType> | number
          }
        }
      }
      PickupOrder: {
        payload: Prisma.$PickupOrderPayload<ExtArgs>
        fields: Prisma.PickupOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PickupOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PickupOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>
          }
          findFirst: {
            args: Prisma.PickupOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PickupOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>
          }
          findMany: {
            args: Prisma.PickupOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>[]
          }
          create: {
            args: Prisma.PickupOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>
          }
          createMany: {
            args: Prisma.PickupOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PickupOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>[]
          }
          delete: {
            args: Prisma.PickupOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>
          }
          update: {
            args: Prisma.PickupOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>
          }
          deleteMany: {
            args: Prisma.PickupOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PickupOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PickupOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>[]
          }
          upsert: {
            args: Prisma.PickupOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PickupOrderPayload>
          }
          aggregate: {
            args: Prisma.PickupOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePickupOrder>
          }
          groupBy: {
            args: Prisma.PickupOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PickupOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PickupOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PickupOrderCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      LaundryItem: {
        payload: Prisma.$LaundryItemPayload<ExtArgs>
        fields: Prisma.LaundryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LaundryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LaundryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>
          }
          findFirst: {
            args: Prisma.LaundryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LaundryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>
          }
          findMany: {
            args: Prisma.LaundryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>[]
          }
          create: {
            args: Prisma.LaundryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>
          }
          createMany: {
            args: Prisma.LaundryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LaundryItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>[]
          }
          delete: {
            args: Prisma.LaundryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>
          }
          update: {
            args: Prisma.LaundryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>
          }
          deleteMany: {
            args: Prisma.LaundryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LaundryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LaundryItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>[]
          }
          upsert: {
            args: Prisma.LaundryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaundryItemPayload>
          }
          aggregate: {
            args: Prisma.LaundryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLaundryItem>
          }
          groupBy: {
            args: Prisma.LaundryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<LaundryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.LaundryItemCountArgs<ExtArgs>
            result: $Utils.Optional<LaundryItemCountAggregateOutputType> | number
          }
        }
      }
      DeliveryOrder: {
        payload: Prisma.$DeliveryOrderPayload<ExtArgs>
        fields: Prisma.DeliveryOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeliveryOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeliveryOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>
          }
          findFirst: {
            args: Prisma.DeliveryOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeliveryOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>
          }
          findMany: {
            args: Prisma.DeliveryOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>[]
          }
          create: {
            args: Prisma.DeliveryOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>
          }
          createMany: {
            args: Prisma.DeliveryOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeliveryOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>[]
          }
          delete: {
            args: Prisma.DeliveryOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>
          }
          update: {
            args: Prisma.DeliveryOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>
          }
          deleteMany: {
            args: Prisma.DeliveryOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeliveryOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeliveryOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>[]
          }
          upsert: {
            args: Prisma.DeliveryOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryOrderPayload>
          }
          aggregate: {
            args: Prisma.DeliveryOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeliveryOrder>
          }
          groupBy: {
            args: Prisma.DeliveryOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeliveryOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeliveryOrderCountArgs<ExtArgs>
            result: $Utils.Optional<DeliveryOrderCountAggregateOutputType> | number
          }
        }
      }
      OrderWorker: {
        payload: Prisma.$OrderWorkerPayload<ExtArgs>
        fields: Prisma.OrderWorkerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderWorkerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderWorkerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>
          }
          findFirst: {
            args: Prisma.OrderWorkerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderWorkerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>
          }
          findMany: {
            args: Prisma.OrderWorkerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>[]
          }
          create: {
            args: Prisma.OrderWorkerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>
          }
          createMany: {
            args: Prisma.OrderWorkerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderWorkerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>[]
          }
          delete: {
            args: Prisma.OrderWorkerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>
          }
          update: {
            args: Prisma.OrderWorkerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>
          }
          deleteMany: {
            args: Prisma.OrderWorkerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderWorkerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderWorkerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>[]
          }
          upsert: {
            args: Prisma.OrderWorkerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderWorkerPayload>
          }
          aggregate: {
            args: Prisma.OrderWorkerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderWorker>
          }
          groupBy: {
            args: Prisma.OrderWorkerGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderWorkerGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderWorkerCountArgs<ExtArgs>
            result: $Utils.Optional<OrderWorkerCountAggregateOutputType> | number
          }
        }
      }
      UserNotification: {
        payload: Prisma.$UserNotificationPayload<ExtArgs>
        fields: Prisma.UserNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          findFirst: {
            args: Prisma.UserNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          findMany: {
            args: Prisma.UserNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>[]
          }
          create: {
            args: Prisma.UserNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          createMany: {
            args: Prisma.UserNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>[]
          }
          delete: {
            args: Prisma.UserNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          update: {
            args: Prisma.UserNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          deleteMany: {
            args: Prisma.UserNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserNotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>[]
          }
          upsert: {
            args: Prisma.UserNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          aggregate: {
            args: Prisma.UserNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserNotification>
          }
          groupBy: {
            args: Prisma.UserNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<UserNotificationCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    employee?: EmployeeOmit
    address?: AddressOmit
    outlet?: OutletOmit
    pickupOrder?: PickupOrderOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    laundryItem?: LaundryItemOmit
    deliveryOrder?: DeliveryOrderOmit
    orderWorker?: OrderWorkerOmit
    userNotification?: UserNotificationOmit
    notification?: NotificationOmit
    payment?: PaymentOmit
    attendance?: AttendanceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    address: number
    pickupOrder: number
    deliveryOrder: number
    userNotification: number
    Attendance: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | UserCountOutputTypeCountAddressArgs
    pickupOrder?: boolean | UserCountOutputTypeCountPickupOrderArgs
    deliveryOrder?: boolean | UserCountOutputTypeCountDeliveryOrderArgs
    userNotification?: boolean | UserCountOutputTypeCountUserNotificationArgs
    Attendance?: boolean | UserCountOutputTypeCountAttendanceArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickupOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDeliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    pickupOrder: number
    deliveryOrder: number
    orderWorker: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pickupOrder?: boolean | EmployeeCountOutputTypeCountPickupOrderArgs
    deliveryOrder?: boolean | EmployeeCountOutputTypeCountDeliveryOrderArgs
    orderWorker?: boolean | EmployeeCountOutputTypeCountOrderWorkerArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickupOrderWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDeliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryOrderWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountOrderWorkerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWorkerWhereInput
  }


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    pickupOrder: number
    deliveryOrder: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pickupOrder?: boolean | AddressCountOutputTypeCountPickupOrderArgs
    deliveryOrder?: boolean | AddressCountOutputTypeCountDeliveryOrderArgs
  }

  // Custom InputTypes
  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountPickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickupOrderWhereInput
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountDeliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryOrderWhereInput
  }


  /**
   * Count Type OutletCountOutputType
   */

  export type OutletCountOutputType = {
    employee: number
    address: number
    pickupOrder: number
  }

  export type OutletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | OutletCountOutputTypeCountEmployeeArgs
    address?: boolean | OutletCountOutputTypeCountAddressArgs
    pickupOrder?: boolean | OutletCountOutputTypeCountPickupOrderArgs
  }

  // Custom InputTypes
  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutletCountOutputType
     */
    select?: OutletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountEmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountPickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickupOrderWhereInput
  }


  /**
   * Count Type PickupOrderCountOutputType
   */

  export type PickupOrderCountOutputType = {
    order: number
  }

  export type PickupOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | PickupOrderCountOutputTypeCountOrderArgs
  }

  // Custom InputTypes
  /**
   * PickupOrderCountOutputType without action
   */
  export type PickupOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrderCountOutputType
     */
    select?: PickupOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PickupOrderCountOutputType without action
   */
  export type PickupOrderCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderItem: number
    deliveryOrder: number
    orderWorker: number
    payment: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItem?: boolean | OrderCountOutputTypeCountOrderItemArgs
    deliveryOrder?: boolean | OrderCountOutputTypeCountDeliveryOrderArgs
    orderWorker?: boolean | OrderCountOutputTypeCountOrderWorkerArgs
    payment?: boolean | OrderCountOutputTypeCountPaymentArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountDeliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryOrderWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderWorkerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWorkerWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type LaundryItemCountOutputType
   */

  export type LaundryItemCountOutputType = {
    orderItem: number
  }

  export type LaundryItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItem?: boolean | LaundryItemCountOutputTypeCountOrderItemArgs
  }

  // Custom InputTypes
  /**
   * LaundryItemCountOutputType without action
   */
  export type LaundryItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItemCountOutputType
     */
    select?: LaundryItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LaundryItemCountOutputType without action
   */
  export type LaundryItemCountOutputTypeCountOrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type NotificationCountOutputType
   */

  export type NotificationCountOutputType = {
    userNotification: number
  }

  export type NotificationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userNotification?: boolean | NotificationCountOutputTypeCountUserNotificationArgs
  }

  // Custom InputTypes
  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCountOutputType
     */
    select?: NotificationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationCountOutputType without action
   */
  export type NotificationCountOutputTypeCountUserNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNotificationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    isVerify: boolean | null
    role: $Enums.Role | null
    avatar: string | null
    createdAt: Date | null
    isDelete: boolean | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    emailVerifyToken: string | null
    authProvider: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    isVerify: boolean | null
    role: $Enums.Role | null
    avatar: string | null
    createdAt: Date | null
    isDelete: boolean | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    emailVerifyToken: string | null
    authProvider: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    isVerify: number
    role: number
    avatar: number
    createdAt: number
    isDelete: number
    resetPasswordToken: number
    resetPasswordExpires: number
    emailVerifyToken: number
    authProvider: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    isVerify?: true
    role?: true
    avatar?: true
    createdAt?: true
    isDelete?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    emailVerifyToken?: true
    authProvider?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    isVerify?: true
    role?: true
    avatar?: true
    createdAt?: true
    isDelete?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    emailVerifyToken?: true
    authProvider?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    isVerify?: true
    role?: true
    avatar?: true
    createdAt?: true
    isDelete?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    emailVerifyToken?: true
    authProvider?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    fullName: string
    email: string
    password: string | null
    isVerify: boolean
    role: $Enums.Role
    avatar: string | null
    createdAt: Date
    isDelete: boolean
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    emailVerifyToken: string | null
    authProvider: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    isVerify?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    isDelete?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerifyToken?: boolean
    authProvider?: boolean
    employee?: boolean | User$employeeArgs<ExtArgs>
    address?: boolean | User$addressArgs<ExtArgs>
    pickupOrder?: boolean | User$pickupOrderArgs<ExtArgs>
    deliveryOrder?: boolean | User$deliveryOrderArgs<ExtArgs>
    userNotification?: boolean | User$userNotificationArgs<ExtArgs>
    Attendance?: boolean | User$AttendanceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    isVerify?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    isDelete?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerifyToken?: boolean
    authProvider?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    isVerify?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    isDelete?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerifyToken?: boolean
    authProvider?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    isVerify?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    isDelete?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerifyToken?: boolean
    authProvider?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "email" | "password" | "isVerify" | "role" | "avatar" | "createdAt" | "isDelete" | "resetPasswordToken" | "resetPasswordExpires" | "emailVerifyToken" | "authProvider", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | User$employeeArgs<ExtArgs>
    address?: boolean | User$addressArgs<ExtArgs>
    pickupOrder?: boolean | User$pickupOrderArgs<ExtArgs>
    deliveryOrder?: boolean | User$deliveryOrderArgs<ExtArgs>
    userNotification?: boolean | User$userNotificationArgs<ExtArgs>
    Attendance?: boolean | User$AttendanceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs> | null
      address: Prisma.$AddressPayload<ExtArgs>[]
      pickupOrder: Prisma.$PickupOrderPayload<ExtArgs>[]
      deliveryOrder: Prisma.$DeliveryOrderPayload<ExtArgs>[]
      userNotification: Prisma.$UserNotificationPayload<ExtArgs>[]
      Attendance: Prisma.$AttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullName: string
      email: string
      password: string | null
      isVerify: boolean
      role: $Enums.Role
      avatar: string | null
      createdAt: Date
      isDelete: boolean
      resetPasswordToken: string | null
      resetPasswordExpires: Date | null
      emailVerifyToken: string | null
      authProvider: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends User$employeeArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    address<T extends User$addressArgs<ExtArgs> = {}>(args?: Subset<T, User$addressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    pickupOrder<T extends User$pickupOrderArgs<ExtArgs> = {}>(args?: Subset<T, User$pickupOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    deliveryOrder<T extends User$deliveryOrderArgs<ExtArgs> = {}>(args?: Subset<T, User$deliveryOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    userNotification<T extends User$userNotificationArgs<ExtArgs> = {}>(args?: Subset<T, User$userNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    Attendance<T extends User$AttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$AttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly isVerify: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly isDelete: FieldRef<"User", 'Boolean'>
    readonly resetPasswordToken: FieldRef<"User", 'String'>
    readonly resetPasswordExpires: FieldRef<"User", 'DateTime'>
    readonly emailVerifyToken: FieldRef<"User", 'String'>
    readonly authProvider: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.employee
   */
  export type User$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User.address
   */
  export type User$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * User.pickupOrder
   */
  export type User$pickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    where?: PickupOrderWhereInput
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    cursor?: PickupOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * User.deliveryOrder
   */
  export type User$deliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    where?: DeliveryOrderWhereInput
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    cursor?: DeliveryOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * User.userNotification
   */
  export type User$userNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    where?: UserNotificationWhereInput
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    cursor?: UserNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * User.Attendance
   */
  export type User$AttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    outletId: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    outletId: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    workShift: $Enums.EmployeeWorkShift | null
    isSuperAdmin: boolean | null
    station: $Enums.EmployeeStation | null
    userId: number | null
    outletId: number | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    workShift: $Enums.EmployeeWorkShift | null
    isSuperAdmin: boolean | null
    station: $Enums.EmployeeStation | null
    userId: number | null
    outletId: number | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    workShift: number
    isSuperAdmin: number
    station: number
    userId: number
    outletId: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    userId?: true
    outletId?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    userId?: true
    outletId?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    workShift?: true
    isSuperAdmin?: true
    station?: true
    userId?: true
    outletId?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    workShift?: true
    isSuperAdmin?: true
    station?: true
    userId?: true
    outletId?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    workShift?: true
    isSuperAdmin?: true
    station?: true
    userId?: true
    outletId?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    workShift: $Enums.EmployeeWorkShift | null
    isSuperAdmin: boolean
    station: $Enums.EmployeeStation | null
    userId: number
    outletId: number | null
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workShift?: boolean
    isSuperAdmin?: boolean
    station?: boolean
    userId?: boolean
    outletId?: boolean
    outlet?: boolean | Employee$outletArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    pickupOrder?: boolean | Employee$pickupOrderArgs<ExtArgs>
    deliveryOrder?: boolean | Employee$deliveryOrderArgs<ExtArgs>
    orderWorker?: boolean | Employee$orderWorkerArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workShift?: boolean
    isSuperAdmin?: boolean
    station?: boolean
    userId?: boolean
    outletId?: boolean
    outlet?: boolean | Employee$outletArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workShift?: boolean
    isSuperAdmin?: boolean
    station?: boolean
    userId?: boolean
    outletId?: boolean
    outlet?: boolean | Employee$outletArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    workShift?: boolean
    isSuperAdmin?: boolean
    station?: boolean
    userId?: boolean
    outletId?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workShift" | "isSuperAdmin" | "station" | "userId" | "outletId", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | Employee$outletArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    pickupOrder?: boolean | Employee$pickupOrderArgs<ExtArgs>
    deliveryOrder?: boolean | Employee$deliveryOrderArgs<ExtArgs>
    orderWorker?: boolean | Employee$orderWorkerArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | Employee$outletArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | Employee$outletArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      outlet: Prisma.$OutletPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      pickupOrder: Prisma.$PickupOrderPayload<ExtArgs>[]
      deliveryOrder: Prisma.$DeliveryOrderPayload<ExtArgs>[]
      orderWorker: Prisma.$OrderWorkerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workShift: $Enums.EmployeeWorkShift | null
      isSuperAdmin: boolean
      station: $Enums.EmployeeStation | null
      userId: number
      outletId: number | null
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outlet<T extends Employee$outletArgs<ExtArgs> = {}>(args?: Subset<T, Employee$outletArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    pickupOrder<T extends Employee$pickupOrderArgs<ExtArgs> = {}>(args?: Subset<T, Employee$pickupOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    deliveryOrder<T extends Employee$deliveryOrderArgs<ExtArgs> = {}>(args?: Subset<T, Employee$deliveryOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    orderWorker<T extends Employee$orderWorkerArgs<ExtArgs> = {}>(args?: Subset<T, Employee$orderWorkerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly workShift: FieldRef<"Employee", 'EmployeeWorkShift'>
    readonly isSuperAdmin: FieldRef<"Employee", 'Boolean'>
    readonly station: FieldRef<"Employee", 'EmployeeStation'>
    readonly userId: FieldRef<"Employee", 'Int'>
    readonly outletId: FieldRef<"Employee", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.outlet
   */
  export type Employee$outletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    where?: OutletWhereInput
  }

  /**
   * Employee.pickupOrder
   */
  export type Employee$pickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    where?: PickupOrderWhereInput
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    cursor?: PickupOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * Employee.deliveryOrder
   */
  export type Employee$deliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    where?: DeliveryOrderWhereInput
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    cursor?: DeliveryOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * Employee.orderWorker
   */
  export type Employee$orderWorkerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    where?: OrderWorkerWhereInput
    orderBy?: OrderWorkerOrderByWithRelationInput | OrderWorkerOrderByWithRelationInput[]
    cursor?: OrderWorkerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderWorkerScalarFieldEnum | OrderWorkerScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    outletId: number | null
    userId: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    outletId: number | null
    userId: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    addressLine: string | null
    city: string | null
    isPrimary: boolean | null
    latitude: number | null
    longitude: number | null
    isDelete: boolean | null
    outletId: number | null
    userId: number | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    addressLine: string | null
    city: string | null
    isPrimary: boolean | null
    latitude: number | null
    longitude: number | null
    isDelete: boolean | null
    outletId: number | null
    userId: number | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    addressLine: number
    city: number
    isPrimary: number
    latitude: number
    longitude: number
    isDelete: number
    outletId: number
    userId: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    outletId?: true
    userId?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    outletId?: true
    userId?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    addressLine?: true
    city?: true
    isPrimary?: true
    latitude?: true
    longitude?: true
    isDelete?: true
    outletId?: true
    userId?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    addressLine?: true
    city?: true
    isPrimary?: true
    latitude?: true
    longitude?: true
    isDelete?: true
    outletId?: true
    userId?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    addressLine?: true
    city?: true
    isPrimary?: true
    latitude?: true
    longitude?: true
    isDelete?: true
    outletId?: true
    userId?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: number
    addressLine: string
    city: string
    isPrimary: boolean
    latitude: number | null
    longitude: number | null
    isDelete: boolean
    outletId: number | null
    userId: number | null
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressLine?: boolean
    city?: boolean
    isPrimary?: boolean
    latitude?: boolean
    longitude?: boolean
    isDelete?: boolean
    outletId?: boolean
    userId?: boolean
    outlet?: boolean | Address$outletArgs<ExtArgs>
    user?: boolean | Address$userArgs<ExtArgs>
    pickupOrder?: boolean | Address$pickupOrderArgs<ExtArgs>
    deliveryOrder?: boolean | Address$deliveryOrderArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressLine?: boolean
    city?: boolean
    isPrimary?: boolean
    latitude?: boolean
    longitude?: boolean
    isDelete?: boolean
    outletId?: boolean
    userId?: boolean
    outlet?: boolean | Address$outletArgs<ExtArgs>
    user?: boolean | Address$userArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressLine?: boolean
    city?: boolean
    isPrimary?: boolean
    latitude?: boolean
    longitude?: boolean
    isDelete?: boolean
    outletId?: boolean
    userId?: boolean
    outlet?: boolean | Address$outletArgs<ExtArgs>
    user?: boolean | Address$userArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    addressLine?: boolean
    city?: boolean
    isPrimary?: boolean
    latitude?: boolean
    longitude?: boolean
    isDelete?: boolean
    outletId?: boolean
    userId?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "addressLine" | "city" | "isPrimary" | "latitude" | "longitude" | "isDelete" | "outletId" | "userId", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | Address$outletArgs<ExtArgs>
    user?: boolean | Address$userArgs<ExtArgs>
    pickupOrder?: boolean | Address$pickupOrderArgs<ExtArgs>
    deliveryOrder?: boolean | Address$deliveryOrderArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | Address$outletArgs<ExtArgs>
    user?: boolean | Address$userArgs<ExtArgs>
  }
  export type AddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | Address$outletArgs<ExtArgs>
    user?: boolean | Address$userArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      outlet: Prisma.$OutletPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
      pickupOrder: Prisma.$PickupOrderPayload<ExtArgs>[]
      deliveryOrder: Prisma.$DeliveryOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      addressLine: string
      city: string
      isPrimary: boolean
      latitude: number | null
      longitude: number | null
      isDelete: boolean
      outletId: number | null
      userId: number | null
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outlet<T extends Address$outletArgs<ExtArgs> = {}>(args?: Subset<T, Address$outletArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    user<T extends Address$userArgs<ExtArgs> = {}>(args?: Subset<T, Address$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    pickupOrder<T extends Address$pickupOrderArgs<ExtArgs> = {}>(args?: Subset<T, Address$pickupOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    deliveryOrder<T extends Address$deliveryOrderArgs<ExtArgs> = {}>(args?: Subset<T, Address$deliveryOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'Int'>
    readonly addressLine: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly isPrimary: FieldRef<"Address", 'Boolean'>
    readonly latitude: FieldRef<"Address", 'Float'>
    readonly longitude: FieldRef<"Address", 'Float'>
    readonly isDelete: FieldRef<"Address", 'Boolean'>
    readonly outletId: FieldRef<"Address", 'Int'>
    readonly userId: FieldRef<"Address", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }

  /**
   * Address updateManyAndReturn
   */
  export type AddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }

  /**
   * Address.outlet
   */
  export type Address$outletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    where?: OutletWhereInput
  }

  /**
   * Address.user
   */
  export type Address$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Address.pickupOrder
   */
  export type Address$pickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    where?: PickupOrderWhereInput
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    cursor?: PickupOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * Address.deliveryOrder
   */
  export type Address$deliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    where?: DeliveryOrderWhereInput
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    cursor?: DeliveryOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Outlet
   */

  export type AggregateOutlet = {
    _count: OutletCountAggregateOutputType | null
    _avg: OutletAvgAggregateOutputType | null
    _sum: OutletSumAggregateOutputType | null
    _min: OutletMinAggregateOutputType | null
    _max: OutletMaxAggregateOutputType | null
  }

  export type OutletAvgAggregateOutputType = {
    id: number | null
  }

  export type OutletSumAggregateOutputType = {
    id: number | null
  }

  export type OutletMinAggregateOutputType = {
    id: number | null
    outletName: string | null
    outletType: $Enums.OutletType | null
    createdAt: Date | null
    deletedAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type OutletMaxAggregateOutputType = {
    id: number | null
    outletName: string | null
    outletType: $Enums.OutletType | null
    createdAt: Date | null
    deletedAt: Date | null
    updatedAt: Date | null
    isDelete: boolean | null
  }

  export type OutletCountAggregateOutputType = {
    id: number
    outletName: number
    outletType: number
    createdAt: number
    deletedAt: number
    updatedAt: number
    isDelete: number
    _all: number
  }


  export type OutletAvgAggregateInputType = {
    id?: true
  }

  export type OutletSumAggregateInputType = {
    id?: true
  }

  export type OutletMinAggregateInputType = {
    id?: true
    outletName?: true
    outletType?: true
    createdAt?: true
    deletedAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type OutletMaxAggregateInputType = {
    id?: true
    outletName?: true
    outletType?: true
    createdAt?: true
    deletedAt?: true
    updatedAt?: true
    isDelete?: true
  }

  export type OutletCountAggregateInputType = {
    id?: true
    outletName?: true
    outletType?: true
    createdAt?: true
    deletedAt?: true
    updatedAt?: true
    isDelete?: true
    _all?: true
  }

  export type OutletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Outlet to aggregate.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Outlets
    **/
    _count?: true | OutletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OutletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OutletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OutletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OutletMaxAggregateInputType
  }

  export type GetOutletAggregateType<T extends OutletAggregateArgs> = {
        [P in keyof T & keyof AggregateOutlet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOutlet[P]>
      : GetScalarType<T[P], AggregateOutlet[P]>
  }




  export type OutletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutletWhereInput
    orderBy?: OutletOrderByWithAggregationInput | OutletOrderByWithAggregationInput[]
    by: OutletScalarFieldEnum[] | OutletScalarFieldEnum
    having?: OutletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OutletCountAggregateInputType | true
    _avg?: OutletAvgAggregateInputType
    _sum?: OutletSumAggregateInputType
    _min?: OutletMinAggregateInputType
    _max?: OutletMaxAggregateInputType
  }

  export type OutletGroupByOutputType = {
    id: number
    outletName: string
    outletType: $Enums.OutletType
    createdAt: Date
    deletedAt: Date | null
    updatedAt: Date
    isDelete: boolean
    _count: OutletCountAggregateOutputType | null
    _avg: OutletAvgAggregateOutputType | null
    _sum: OutletSumAggregateOutputType | null
    _min: OutletMinAggregateOutputType | null
    _max: OutletMaxAggregateOutputType | null
  }

  type GetOutletGroupByPayload<T extends OutletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OutletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OutletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OutletGroupByOutputType[P]>
            : GetScalarType<T[P], OutletGroupByOutputType[P]>
        }
      >
    >


  export type OutletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    outletName?: boolean
    outletType?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
    employee?: boolean | Outlet$employeeArgs<ExtArgs>
    address?: boolean | Outlet$addressArgs<ExtArgs>
    pickupOrder?: boolean | Outlet$pickupOrderArgs<ExtArgs>
    _count?: boolean | OutletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["outlet"]>

  export type OutletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    outletName?: boolean
    outletType?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }, ExtArgs["result"]["outlet"]>

  export type OutletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    outletName?: boolean
    outletType?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }, ExtArgs["result"]["outlet"]>

  export type OutletSelectScalar = {
    id?: boolean
    outletName?: boolean
    outletType?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    updatedAt?: boolean
    isDelete?: boolean
  }

  export type OutletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "outletName" | "outletType" | "createdAt" | "deletedAt" | "updatedAt" | "isDelete", ExtArgs["result"]["outlet"]>
  export type OutletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | Outlet$employeeArgs<ExtArgs>
    address?: boolean | Outlet$addressArgs<ExtArgs>
    pickupOrder?: boolean | Outlet$pickupOrderArgs<ExtArgs>
    _count?: boolean | OutletCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OutletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OutletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OutletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Outlet"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>[]
      address: Prisma.$AddressPayload<ExtArgs>[]
      pickupOrder: Prisma.$PickupOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      outletName: string
      outletType: $Enums.OutletType
      createdAt: Date
      deletedAt: Date | null
      updatedAt: Date
      isDelete: boolean
    }, ExtArgs["result"]["outlet"]>
    composites: {}
  }

  type OutletGetPayload<S extends boolean | null | undefined | OutletDefaultArgs> = $Result.GetResult<Prisma.$OutletPayload, S>

  type OutletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OutletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OutletCountAggregateInputType | true
    }

  export interface OutletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Outlet'], meta: { name: 'Outlet' } }
    /**
     * Find zero or one Outlet that matches the filter.
     * @param {OutletFindUniqueArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OutletFindUniqueArgs>(args: SelectSubset<T, OutletFindUniqueArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Outlet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OutletFindUniqueOrThrowArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OutletFindUniqueOrThrowArgs>(args: SelectSubset<T, OutletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Outlet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletFindFirstArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OutletFindFirstArgs>(args?: SelectSubset<T, OutletFindFirstArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Outlet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletFindFirstOrThrowArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OutletFindFirstOrThrowArgs>(args?: SelectSubset<T, OutletFindFirstOrThrowArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Outlets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Outlets
     * const outlets = await prisma.outlet.findMany()
     * 
     * // Get first 10 Outlets
     * const outlets = await prisma.outlet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const outletWithIdOnly = await prisma.outlet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OutletFindManyArgs>(args?: SelectSubset<T, OutletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Outlet.
     * @param {OutletCreateArgs} args - Arguments to create a Outlet.
     * @example
     * // Create one Outlet
     * const Outlet = await prisma.outlet.create({
     *   data: {
     *     // ... data to create a Outlet
     *   }
     * })
     * 
     */
    create<T extends OutletCreateArgs>(args: SelectSubset<T, OutletCreateArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Outlets.
     * @param {OutletCreateManyArgs} args - Arguments to create many Outlets.
     * @example
     * // Create many Outlets
     * const outlet = await prisma.outlet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OutletCreateManyArgs>(args?: SelectSubset<T, OutletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Outlets and returns the data saved in the database.
     * @param {OutletCreateManyAndReturnArgs} args - Arguments to create many Outlets.
     * @example
     * // Create many Outlets
     * const outlet = await prisma.outlet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Outlets and only return the `id`
     * const outletWithIdOnly = await prisma.outlet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OutletCreateManyAndReturnArgs>(args?: SelectSubset<T, OutletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Outlet.
     * @param {OutletDeleteArgs} args - Arguments to delete one Outlet.
     * @example
     * // Delete one Outlet
     * const Outlet = await prisma.outlet.delete({
     *   where: {
     *     // ... filter to delete one Outlet
     *   }
     * })
     * 
     */
    delete<T extends OutletDeleteArgs>(args: SelectSubset<T, OutletDeleteArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Outlet.
     * @param {OutletUpdateArgs} args - Arguments to update one Outlet.
     * @example
     * // Update one Outlet
     * const outlet = await prisma.outlet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OutletUpdateArgs>(args: SelectSubset<T, OutletUpdateArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Outlets.
     * @param {OutletDeleteManyArgs} args - Arguments to filter Outlets to delete.
     * @example
     * // Delete a few Outlets
     * const { count } = await prisma.outlet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OutletDeleteManyArgs>(args?: SelectSubset<T, OutletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Outlets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Outlets
     * const outlet = await prisma.outlet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OutletUpdateManyArgs>(args: SelectSubset<T, OutletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Outlets and returns the data updated in the database.
     * @param {OutletUpdateManyAndReturnArgs} args - Arguments to update many Outlets.
     * @example
     * // Update many Outlets
     * const outlet = await prisma.outlet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Outlets and only return the `id`
     * const outletWithIdOnly = await prisma.outlet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OutletUpdateManyAndReturnArgs>(args: SelectSubset<T, OutletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Outlet.
     * @param {OutletUpsertArgs} args - Arguments to update or create a Outlet.
     * @example
     * // Update or create a Outlet
     * const outlet = await prisma.outlet.upsert({
     *   create: {
     *     // ... data to create a Outlet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Outlet we want to update
     *   }
     * })
     */
    upsert<T extends OutletUpsertArgs>(args: SelectSubset<T, OutletUpsertArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Outlets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletCountArgs} args - Arguments to filter Outlets to count.
     * @example
     * // Count the number of Outlets
     * const count = await prisma.outlet.count({
     *   where: {
     *     // ... the filter for the Outlets we want to count
     *   }
     * })
    **/
    count<T extends OutletCountArgs>(
      args?: Subset<T, OutletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OutletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Outlet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OutletAggregateArgs>(args: Subset<T, OutletAggregateArgs>): Prisma.PrismaPromise<GetOutletAggregateType<T>>

    /**
     * Group by Outlet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OutletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OutletGroupByArgs['orderBy'] }
        : { orderBy?: OutletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OutletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Outlet model
   */
  readonly fields: OutletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Outlet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OutletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends Outlet$employeeArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$employeeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    address<T extends Outlet$addressArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$addressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    pickupOrder<T extends Outlet$pickupOrderArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$pickupOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Outlet model
   */ 
  interface OutletFieldRefs {
    readonly id: FieldRef<"Outlet", 'Int'>
    readonly outletName: FieldRef<"Outlet", 'String'>
    readonly outletType: FieldRef<"Outlet", 'OutletType'>
    readonly createdAt: FieldRef<"Outlet", 'DateTime'>
    readonly deletedAt: FieldRef<"Outlet", 'DateTime'>
    readonly updatedAt: FieldRef<"Outlet", 'DateTime'>
    readonly isDelete: FieldRef<"Outlet", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Outlet findUnique
   */
  export type OutletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet findUniqueOrThrow
   */
  export type OutletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet findFirst
   */
  export type OutletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Outlets.
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Outlets.
     */
    distinct?: OutletScalarFieldEnum | OutletScalarFieldEnum[]
  }

  /**
   * Outlet findFirstOrThrow
   */
  export type OutletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Outlets.
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Outlets.
     */
    distinct?: OutletScalarFieldEnum | OutletScalarFieldEnum[]
  }

  /**
   * Outlet findMany
   */
  export type OutletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlets to fetch.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Outlets.
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    distinct?: OutletScalarFieldEnum | OutletScalarFieldEnum[]
  }

  /**
   * Outlet create
   */
  export type OutletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * The data needed to create a Outlet.
     */
    data: XOR<OutletCreateInput, OutletUncheckedCreateInput>
  }

  /**
   * Outlet createMany
   */
  export type OutletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Outlets.
     */
    data: OutletCreateManyInput | OutletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Outlet createManyAndReturn
   */
  export type OutletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * The data used to create many Outlets.
     */
    data: OutletCreateManyInput | OutletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Outlet update
   */
  export type OutletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * The data needed to update a Outlet.
     */
    data: XOR<OutletUpdateInput, OutletUncheckedUpdateInput>
    /**
     * Choose, which Outlet to update.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet updateMany
   */
  export type OutletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Outlets.
     */
    data: XOR<OutletUpdateManyMutationInput, OutletUncheckedUpdateManyInput>
    /**
     * Filter which Outlets to update
     */
    where?: OutletWhereInput
  }

  /**
   * Outlet updateManyAndReturn
   */
  export type OutletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * The data used to update Outlets.
     */
    data: XOR<OutletUpdateManyMutationInput, OutletUncheckedUpdateManyInput>
    /**
     * Filter which Outlets to update
     */
    where?: OutletWhereInput
  }

  /**
   * Outlet upsert
   */
  export type OutletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * The filter to search for the Outlet to update in case it exists.
     */
    where: OutletWhereUniqueInput
    /**
     * In case the Outlet found by the `where` argument doesn't exist, create a new Outlet with this data.
     */
    create: XOR<OutletCreateInput, OutletUncheckedCreateInput>
    /**
     * In case the Outlet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OutletUpdateInput, OutletUncheckedUpdateInput>
  }

  /**
   * Outlet delete
   */
  export type OutletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter which Outlet to delete.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet deleteMany
   */
  export type OutletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Outlets to delete
     */
    where?: OutletWhereInput
  }

  /**
   * Outlet.employee
   */
  export type Outlet$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Outlet.address
   */
  export type Outlet$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Outlet.pickupOrder
   */
  export type Outlet$pickupOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    where?: PickupOrderWhereInput
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    cursor?: PickupOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * Outlet without action
   */
  export type OutletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
  }


  /**
   * Model PickupOrder
   */

  export type AggregatePickupOrder = {
    _count: PickupOrderCountAggregateOutputType | null
    _avg: PickupOrderAvgAggregateOutputType | null
    _sum: PickupOrderSumAggregateOutputType | null
    _min: PickupOrderMinAggregateOutputType | null
    _max: PickupOrderMaxAggregateOutputType | null
  }

  export type PickupOrderAvgAggregateOutputType = {
    id: number | null
    distance: number | null
    pickupPrice: number | null
    userId: number | null
    outletId: number | null
    driverId: number | null
    addressId: number | null
  }

  export type PickupOrderSumAggregateOutputType = {
    id: number | null
    distance: number | null
    pickupPrice: number | null
    userId: number | null
    outletId: number | null
    driverId: number | null
    addressId: number | null
  }

  export type PickupOrderMinAggregateOutputType = {
    id: number | null
    pickupNumber: string | null
    pickupStatus: $Enums.PickupStatus | null
    distance: number | null
    pickupPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isOrderCreated: boolean | null
    userId: number | null
    outletId: number | null
    driverId: number | null
    addressId: number | null
  }

  export type PickupOrderMaxAggregateOutputType = {
    id: number | null
    pickupNumber: string | null
    pickupStatus: $Enums.PickupStatus | null
    distance: number | null
    pickupPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isOrderCreated: boolean | null
    userId: number | null
    outletId: number | null
    driverId: number | null
    addressId: number | null
  }

  export type PickupOrderCountAggregateOutputType = {
    id: number
    pickupNumber: number
    pickupStatus: number
    distance: number
    pickupPrice: number
    createdAt: number
    updatedAt: number
    isOrderCreated: number
    userId: number
    outletId: number
    driverId: number
    addressId: number
    _all: number
  }


  export type PickupOrderAvgAggregateInputType = {
    id?: true
    distance?: true
    pickupPrice?: true
    userId?: true
    outletId?: true
    driverId?: true
    addressId?: true
  }

  export type PickupOrderSumAggregateInputType = {
    id?: true
    distance?: true
    pickupPrice?: true
    userId?: true
    outletId?: true
    driverId?: true
    addressId?: true
  }

  export type PickupOrderMinAggregateInputType = {
    id?: true
    pickupNumber?: true
    pickupStatus?: true
    distance?: true
    pickupPrice?: true
    createdAt?: true
    updatedAt?: true
    isOrderCreated?: true
    userId?: true
    outletId?: true
    driverId?: true
    addressId?: true
  }

  export type PickupOrderMaxAggregateInputType = {
    id?: true
    pickupNumber?: true
    pickupStatus?: true
    distance?: true
    pickupPrice?: true
    createdAt?: true
    updatedAt?: true
    isOrderCreated?: true
    userId?: true
    outletId?: true
    driverId?: true
    addressId?: true
  }

  export type PickupOrderCountAggregateInputType = {
    id?: true
    pickupNumber?: true
    pickupStatus?: true
    distance?: true
    pickupPrice?: true
    createdAt?: true
    updatedAt?: true
    isOrderCreated?: true
    userId?: true
    outletId?: true
    driverId?: true
    addressId?: true
    _all?: true
  }

  export type PickupOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PickupOrder to aggregate.
     */
    where?: PickupOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickupOrders to fetch.
     */
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PickupOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickupOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickupOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PickupOrders
    **/
    _count?: true | PickupOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PickupOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PickupOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PickupOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PickupOrderMaxAggregateInputType
  }

  export type GetPickupOrderAggregateType<T extends PickupOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePickupOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePickupOrder[P]>
      : GetScalarType<T[P], AggregatePickupOrder[P]>
  }




  export type PickupOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PickupOrderWhereInput
    orderBy?: PickupOrderOrderByWithAggregationInput | PickupOrderOrderByWithAggregationInput[]
    by: PickupOrderScalarFieldEnum[] | PickupOrderScalarFieldEnum
    having?: PickupOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PickupOrderCountAggregateInputType | true
    _avg?: PickupOrderAvgAggregateInputType
    _sum?: PickupOrderSumAggregateInputType
    _min?: PickupOrderMinAggregateInputType
    _max?: PickupOrderMaxAggregateInputType
  }

  export type PickupOrderGroupByOutputType = {
    id: number
    pickupNumber: string
    pickupStatus: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt: Date
    updatedAt: Date
    isOrderCreated: boolean
    userId: number
    outletId: number | null
    driverId: number | null
    addressId: number | null
    _count: PickupOrderCountAggregateOutputType | null
    _avg: PickupOrderAvgAggregateOutputType | null
    _sum: PickupOrderSumAggregateOutputType | null
    _min: PickupOrderMinAggregateOutputType | null
    _max: PickupOrderMaxAggregateOutputType | null
  }

  type GetPickupOrderGroupByPayload<T extends PickupOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PickupOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PickupOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PickupOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PickupOrderGroupByOutputType[P]>
        }
      >
    >


  export type PickupOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pickupNumber?: boolean
    pickupStatus?: boolean
    distance?: boolean
    pickupPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isOrderCreated?: boolean
    userId?: boolean
    outletId?: boolean
    driverId?: boolean
    addressId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    outlet?: boolean | PickupOrder$outletArgs<ExtArgs>
    order?: boolean | PickupOrder$orderArgs<ExtArgs>
    driver?: boolean | PickupOrder$driverArgs<ExtArgs>
    address?: boolean | PickupOrder$addressArgs<ExtArgs>
    _count?: boolean | PickupOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pickupOrder"]>

  export type PickupOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pickupNumber?: boolean
    pickupStatus?: boolean
    distance?: boolean
    pickupPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isOrderCreated?: boolean
    userId?: boolean
    outletId?: boolean
    driverId?: boolean
    addressId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    outlet?: boolean | PickupOrder$outletArgs<ExtArgs>
    driver?: boolean | PickupOrder$driverArgs<ExtArgs>
    address?: boolean | PickupOrder$addressArgs<ExtArgs>
  }, ExtArgs["result"]["pickupOrder"]>

  export type PickupOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pickupNumber?: boolean
    pickupStatus?: boolean
    distance?: boolean
    pickupPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isOrderCreated?: boolean
    userId?: boolean
    outletId?: boolean
    driverId?: boolean
    addressId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    outlet?: boolean | PickupOrder$outletArgs<ExtArgs>
    driver?: boolean | PickupOrder$driverArgs<ExtArgs>
    address?: boolean | PickupOrder$addressArgs<ExtArgs>
  }, ExtArgs["result"]["pickupOrder"]>

  export type PickupOrderSelectScalar = {
    id?: boolean
    pickupNumber?: boolean
    pickupStatus?: boolean
    distance?: boolean
    pickupPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isOrderCreated?: boolean
    userId?: boolean
    outletId?: boolean
    driverId?: boolean
    addressId?: boolean
  }

  export type PickupOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pickupNumber" | "pickupStatus" | "distance" | "pickupPrice" | "createdAt" | "updatedAt" | "isOrderCreated" | "userId" | "outletId" | "driverId" | "addressId", ExtArgs["result"]["pickupOrder"]>
  export type PickupOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    outlet?: boolean | PickupOrder$outletArgs<ExtArgs>
    order?: boolean | PickupOrder$orderArgs<ExtArgs>
    driver?: boolean | PickupOrder$driverArgs<ExtArgs>
    address?: boolean | PickupOrder$addressArgs<ExtArgs>
    _count?: boolean | PickupOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PickupOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    outlet?: boolean | PickupOrder$outletArgs<ExtArgs>
    driver?: boolean | PickupOrder$driverArgs<ExtArgs>
    address?: boolean | PickupOrder$addressArgs<ExtArgs>
  }
  export type PickupOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    outlet?: boolean | PickupOrder$outletArgs<ExtArgs>
    driver?: boolean | PickupOrder$driverArgs<ExtArgs>
    address?: boolean | PickupOrder$addressArgs<ExtArgs>
  }

  export type $PickupOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PickupOrder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      outlet: Prisma.$OutletPayload<ExtArgs> | null
      order: Prisma.$OrderPayload<ExtArgs>[]
      driver: Prisma.$EmployeePayload<ExtArgs> | null
      address: Prisma.$AddressPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pickupNumber: string
      pickupStatus: $Enums.PickupStatus
      distance: number
      pickupPrice: number
      createdAt: Date
      updatedAt: Date
      isOrderCreated: boolean
      userId: number
      outletId: number | null
      driverId: number | null
      addressId: number | null
    }, ExtArgs["result"]["pickupOrder"]>
    composites: {}
  }

  type PickupOrderGetPayload<S extends boolean | null | undefined | PickupOrderDefaultArgs> = $Result.GetResult<Prisma.$PickupOrderPayload, S>

  type PickupOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PickupOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PickupOrderCountAggregateInputType | true
    }

  export interface PickupOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PickupOrder'], meta: { name: 'PickupOrder' } }
    /**
     * Find zero or one PickupOrder that matches the filter.
     * @param {PickupOrderFindUniqueArgs} args - Arguments to find a PickupOrder
     * @example
     * // Get one PickupOrder
     * const pickupOrder = await prisma.pickupOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PickupOrderFindUniqueArgs>(args: SelectSubset<T, PickupOrderFindUniqueArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PickupOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PickupOrderFindUniqueOrThrowArgs} args - Arguments to find a PickupOrder
     * @example
     * // Get one PickupOrder
     * const pickupOrder = await prisma.pickupOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PickupOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PickupOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PickupOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderFindFirstArgs} args - Arguments to find a PickupOrder
     * @example
     * // Get one PickupOrder
     * const pickupOrder = await prisma.pickupOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PickupOrderFindFirstArgs>(args?: SelectSubset<T, PickupOrderFindFirstArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PickupOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderFindFirstOrThrowArgs} args - Arguments to find a PickupOrder
     * @example
     * // Get one PickupOrder
     * const pickupOrder = await prisma.pickupOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PickupOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PickupOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PickupOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PickupOrders
     * const pickupOrders = await prisma.pickupOrder.findMany()
     * 
     * // Get first 10 PickupOrders
     * const pickupOrders = await prisma.pickupOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pickupOrderWithIdOnly = await prisma.pickupOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PickupOrderFindManyArgs>(args?: SelectSubset<T, PickupOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PickupOrder.
     * @param {PickupOrderCreateArgs} args - Arguments to create a PickupOrder.
     * @example
     * // Create one PickupOrder
     * const PickupOrder = await prisma.pickupOrder.create({
     *   data: {
     *     // ... data to create a PickupOrder
     *   }
     * })
     * 
     */
    create<T extends PickupOrderCreateArgs>(args: SelectSubset<T, PickupOrderCreateArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PickupOrders.
     * @param {PickupOrderCreateManyArgs} args - Arguments to create many PickupOrders.
     * @example
     * // Create many PickupOrders
     * const pickupOrder = await prisma.pickupOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PickupOrderCreateManyArgs>(args?: SelectSubset<T, PickupOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PickupOrders and returns the data saved in the database.
     * @param {PickupOrderCreateManyAndReturnArgs} args - Arguments to create many PickupOrders.
     * @example
     * // Create many PickupOrders
     * const pickupOrder = await prisma.pickupOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PickupOrders and only return the `id`
     * const pickupOrderWithIdOnly = await prisma.pickupOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PickupOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PickupOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PickupOrder.
     * @param {PickupOrderDeleteArgs} args - Arguments to delete one PickupOrder.
     * @example
     * // Delete one PickupOrder
     * const PickupOrder = await prisma.pickupOrder.delete({
     *   where: {
     *     // ... filter to delete one PickupOrder
     *   }
     * })
     * 
     */
    delete<T extends PickupOrderDeleteArgs>(args: SelectSubset<T, PickupOrderDeleteArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PickupOrder.
     * @param {PickupOrderUpdateArgs} args - Arguments to update one PickupOrder.
     * @example
     * // Update one PickupOrder
     * const pickupOrder = await prisma.pickupOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PickupOrderUpdateArgs>(args: SelectSubset<T, PickupOrderUpdateArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PickupOrders.
     * @param {PickupOrderDeleteManyArgs} args - Arguments to filter PickupOrders to delete.
     * @example
     * // Delete a few PickupOrders
     * const { count } = await prisma.pickupOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PickupOrderDeleteManyArgs>(args?: SelectSubset<T, PickupOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PickupOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PickupOrders
     * const pickupOrder = await prisma.pickupOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PickupOrderUpdateManyArgs>(args: SelectSubset<T, PickupOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PickupOrders and returns the data updated in the database.
     * @param {PickupOrderUpdateManyAndReturnArgs} args - Arguments to update many PickupOrders.
     * @example
     * // Update many PickupOrders
     * const pickupOrder = await prisma.pickupOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PickupOrders and only return the `id`
     * const pickupOrderWithIdOnly = await prisma.pickupOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PickupOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, PickupOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PickupOrder.
     * @param {PickupOrderUpsertArgs} args - Arguments to update or create a PickupOrder.
     * @example
     * // Update or create a PickupOrder
     * const pickupOrder = await prisma.pickupOrder.upsert({
     *   create: {
     *     // ... data to create a PickupOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PickupOrder we want to update
     *   }
     * })
     */
    upsert<T extends PickupOrderUpsertArgs>(args: SelectSubset<T, PickupOrderUpsertArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PickupOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderCountArgs} args - Arguments to filter PickupOrders to count.
     * @example
     * // Count the number of PickupOrders
     * const count = await prisma.pickupOrder.count({
     *   where: {
     *     // ... the filter for the PickupOrders we want to count
     *   }
     * })
    **/
    count<T extends PickupOrderCountArgs>(
      args?: Subset<T, PickupOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PickupOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PickupOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PickupOrderAggregateArgs>(args: Subset<T, PickupOrderAggregateArgs>): Prisma.PrismaPromise<GetPickupOrderAggregateType<T>>

    /**
     * Group by PickupOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PickupOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PickupOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PickupOrderGroupByArgs['orderBy'] }
        : { orderBy?: PickupOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PickupOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPickupOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PickupOrder model
   */
  readonly fields: PickupOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PickupOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PickupOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    outlet<T extends PickupOrder$outletArgs<ExtArgs> = {}>(args?: Subset<T, PickupOrder$outletArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    order<T extends PickupOrder$orderArgs<ExtArgs> = {}>(args?: Subset<T, PickupOrder$orderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    driver<T extends PickupOrder$driverArgs<ExtArgs> = {}>(args?: Subset<T, PickupOrder$driverArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    address<T extends PickupOrder$addressArgs<ExtArgs> = {}>(args?: Subset<T, PickupOrder$addressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PickupOrder model
   */ 
  interface PickupOrderFieldRefs {
    readonly id: FieldRef<"PickupOrder", 'Int'>
    readonly pickupNumber: FieldRef<"PickupOrder", 'String'>
    readonly pickupStatus: FieldRef<"PickupOrder", 'PickupStatus'>
    readonly distance: FieldRef<"PickupOrder", 'Int'>
    readonly pickupPrice: FieldRef<"PickupOrder", 'Int'>
    readonly createdAt: FieldRef<"PickupOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"PickupOrder", 'DateTime'>
    readonly isOrderCreated: FieldRef<"PickupOrder", 'Boolean'>
    readonly userId: FieldRef<"PickupOrder", 'Int'>
    readonly outletId: FieldRef<"PickupOrder", 'Int'>
    readonly driverId: FieldRef<"PickupOrder", 'Int'>
    readonly addressId: FieldRef<"PickupOrder", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PickupOrder findUnique
   */
  export type PickupOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * Filter, which PickupOrder to fetch.
     */
    where: PickupOrderWhereUniqueInput
  }

  /**
   * PickupOrder findUniqueOrThrow
   */
  export type PickupOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * Filter, which PickupOrder to fetch.
     */
    where: PickupOrderWhereUniqueInput
  }

  /**
   * PickupOrder findFirst
   */
  export type PickupOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * Filter, which PickupOrder to fetch.
     */
    where?: PickupOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickupOrders to fetch.
     */
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PickupOrders.
     */
    cursor?: PickupOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickupOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickupOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PickupOrders.
     */
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * PickupOrder findFirstOrThrow
   */
  export type PickupOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * Filter, which PickupOrder to fetch.
     */
    where?: PickupOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickupOrders to fetch.
     */
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PickupOrders.
     */
    cursor?: PickupOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickupOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickupOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PickupOrders.
     */
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * PickupOrder findMany
   */
  export type PickupOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * Filter, which PickupOrders to fetch.
     */
    where?: PickupOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PickupOrders to fetch.
     */
    orderBy?: PickupOrderOrderByWithRelationInput | PickupOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PickupOrders.
     */
    cursor?: PickupOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PickupOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PickupOrders.
     */
    skip?: number
    distinct?: PickupOrderScalarFieldEnum | PickupOrderScalarFieldEnum[]
  }

  /**
   * PickupOrder create
   */
  export type PickupOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PickupOrder.
     */
    data: XOR<PickupOrderCreateInput, PickupOrderUncheckedCreateInput>
  }

  /**
   * PickupOrder createMany
   */
  export type PickupOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PickupOrders.
     */
    data: PickupOrderCreateManyInput | PickupOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PickupOrder createManyAndReturn
   */
  export type PickupOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * The data used to create many PickupOrders.
     */
    data: PickupOrderCreateManyInput | PickupOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PickupOrder update
   */
  export type PickupOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PickupOrder.
     */
    data: XOR<PickupOrderUpdateInput, PickupOrderUncheckedUpdateInput>
    /**
     * Choose, which PickupOrder to update.
     */
    where: PickupOrderWhereUniqueInput
  }

  /**
   * PickupOrder updateMany
   */
  export type PickupOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PickupOrders.
     */
    data: XOR<PickupOrderUpdateManyMutationInput, PickupOrderUncheckedUpdateManyInput>
    /**
     * Filter which PickupOrders to update
     */
    where?: PickupOrderWhereInput
  }

  /**
   * PickupOrder updateManyAndReturn
   */
  export type PickupOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * The data used to update PickupOrders.
     */
    data: XOR<PickupOrderUpdateManyMutationInput, PickupOrderUncheckedUpdateManyInput>
    /**
     * Filter which PickupOrders to update
     */
    where?: PickupOrderWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PickupOrder upsert
   */
  export type PickupOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PickupOrder to update in case it exists.
     */
    where: PickupOrderWhereUniqueInput
    /**
     * In case the PickupOrder found by the `where` argument doesn't exist, create a new PickupOrder with this data.
     */
    create: XOR<PickupOrderCreateInput, PickupOrderUncheckedCreateInput>
    /**
     * In case the PickupOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PickupOrderUpdateInput, PickupOrderUncheckedUpdateInput>
  }

  /**
   * PickupOrder delete
   */
  export type PickupOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
    /**
     * Filter which PickupOrder to delete.
     */
    where: PickupOrderWhereUniqueInput
  }

  /**
   * PickupOrder deleteMany
   */
  export type PickupOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PickupOrders to delete
     */
    where?: PickupOrderWhereInput
  }

  /**
   * PickupOrder.outlet
   */
  export type PickupOrder$outletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Outlet
     */
    omit?: OutletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    where?: OutletWhereInput
  }

  /**
   * PickupOrder.order
   */
  export type PickupOrder$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * PickupOrder.driver
   */
  export type PickupOrder$driverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * PickupOrder.address
   */
  export type PickupOrder$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * PickupOrder without action
   */
  export type PickupOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PickupOrder
     */
    select?: PickupOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PickupOrder
     */
    omit?: PickupOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PickupOrderInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    laundryPrice: number | null
    pickupOrderId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    weight: number | null
    laundryPrice: number | null
    pickupOrderId: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    orderNumber: string | null
    orderStatus: $Enums.OrderStatus | null
    weight: number | null
    laundryPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    pickupOrderId: number | null
    isPaid: boolean | null
    isConfirm: boolean | null
    receivedAt: Date | null
    confirmedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    orderNumber: string | null
    orderStatus: $Enums.OrderStatus | null
    weight: number | null
    laundryPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    pickupOrderId: number | null
    isPaid: boolean | null
    isConfirm: boolean | null
    receivedAt: Date | null
    confirmedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    orderStatus: number
    weight: number
    laundryPrice: number
    createdAt: number
    updatedAt: number
    pickupOrderId: number
    isPaid: number
    isConfirm: number
    receivedAt: number
    confirmedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    weight?: true
    laundryPrice?: true
    pickupOrderId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    weight?: true
    laundryPrice?: true
    pickupOrderId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    orderStatus?: true
    weight?: true
    laundryPrice?: true
    createdAt?: true
    updatedAt?: true
    pickupOrderId?: true
    isPaid?: true
    isConfirm?: true
    receivedAt?: true
    confirmedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    orderStatus?: true
    weight?: true
    laundryPrice?: true
    createdAt?: true
    updatedAt?: true
    pickupOrderId?: true
    isPaid?: true
    isConfirm?: true
    receivedAt?: true
    confirmedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    orderStatus?: true
    weight?: true
    laundryPrice?: true
    createdAt?: true
    updatedAt?: true
    pickupOrderId?: true
    isPaid?: true
    isConfirm?: true
    receivedAt?: true
    confirmedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    orderNumber: string
    orderStatus: $Enums.OrderStatus
    weight: number | null
    laundryPrice: number | null
    createdAt: Date
    updatedAt: Date
    pickupOrderId: number
    isPaid: boolean
    isConfirm: boolean
    receivedAt: Date | null
    confirmedAt: Date | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    orderStatus?: boolean
    weight?: boolean
    laundryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pickupOrderId?: boolean
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: boolean
    confirmedAt?: boolean
    pickupOrder?: boolean | PickupOrderDefaultArgs<ExtArgs>
    orderItem?: boolean | Order$orderItemArgs<ExtArgs>
    deliveryOrder?: boolean | Order$deliveryOrderArgs<ExtArgs>
    orderWorker?: boolean | Order$orderWorkerArgs<ExtArgs>
    payment?: boolean | Order$paymentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    orderStatus?: boolean
    weight?: boolean
    laundryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pickupOrderId?: boolean
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: boolean
    confirmedAt?: boolean
    pickupOrder?: boolean | PickupOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    orderStatus?: boolean
    weight?: boolean
    laundryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pickupOrderId?: boolean
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: boolean
    confirmedAt?: boolean
    pickupOrder?: boolean | PickupOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    orderStatus?: boolean
    weight?: boolean
    laundryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pickupOrderId?: boolean
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: boolean
    confirmedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderNumber" | "orderStatus" | "weight" | "laundryPrice" | "createdAt" | "updatedAt" | "pickupOrderId" | "isPaid" | "isConfirm" | "receivedAt" | "confirmedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pickupOrder?: boolean | PickupOrderDefaultArgs<ExtArgs>
    orderItem?: boolean | Order$orderItemArgs<ExtArgs>
    deliveryOrder?: boolean | Order$deliveryOrderArgs<ExtArgs>
    orderWorker?: boolean | Order$orderWorkerArgs<ExtArgs>
    payment?: boolean | Order$paymentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pickupOrder?: boolean | PickupOrderDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pickupOrder?: boolean | PickupOrderDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      pickupOrder: Prisma.$PickupOrderPayload<ExtArgs>
      orderItem: Prisma.$OrderItemPayload<ExtArgs>[]
      deliveryOrder: Prisma.$DeliveryOrderPayload<ExtArgs>[]
      orderWorker: Prisma.$OrderWorkerPayload<ExtArgs>[]
      payment: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderNumber: string
      orderStatus: $Enums.OrderStatus
      weight: number | null
      laundryPrice: number | null
      createdAt: Date
      updatedAt: Date
      pickupOrderId: number
      isPaid: boolean
      isConfirm: boolean
      receivedAt: Date | null
      confirmedAt: Date | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pickupOrder<T extends PickupOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PickupOrderDefaultArgs<ExtArgs>>): Prisma__PickupOrderClient<$Result.GetResult<Prisma.$PickupOrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    orderItem<T extends Order$orderItemArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    deliveryOrder<T extends Order$deliveryOrderArgs<ExtArgs> = {}>(args?: Subset<T, Order$deliveryOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    orderWorker<T extends Order$orderWorkerArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderWorkerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    payment<T extends Order$paymentArgs<ExtArgs> = {}>(args?: Subset<T, Order$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly orderNumber: FieldRef<"Order", 'String'>
    readonly orderStatus: FieldRef<"Order", 'OrderStatus'>
    readonly weight: FieldRef<"Order", 'Int'>
    readonly laundryPrice: FieldRef<"Order", 'Int'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly pickupOrderId: FieldRef<"Order", 'Int'>
    readonly isPaid: FieldRef<"Order", 'Boolean'>
    readonly isConfirm: FieldRef<"Order", 'Boolean'>
    readonly receivedAt: FieldRef<"Order", 'DateTime'>
    readonly confirmedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.orderItem
   */
  export type Order$orderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.deliveryOrder
   */
  export type Order$deliveryOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    where?: DeliveryOrderWhereInput
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    cursor?: DeliveryOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * Order.orderWorker
   */
  export type Order$orderWorkerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    where?: OrderWorkerWhereInput
    orderBy?: OrderWorkerOrderByWithRelationInput | OrderWorkerOrderByWithRelationInput[]
    cursor?: OrderWorkerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderWorkerScalarFieldEnum | OrderWorkerScalarFieldEnum[]
  }

  /**
   * Order.payment
   */
  export type Order$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    qty: number | null
    orderId: number | null
    laundryItemId: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    qty: number | null
    orderId: number | null
    laundryItemId: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    qty: number | null
    orderId: number | null
    laundryItemId: number | null
    isDelete: boolean | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    qty: number | null
    orderId: number | null
    laundryItemId: number | null
    isDelete: boolean | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    qty: number
    orderId: number
    laundryItemId: number
    isDelete: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    qty?: true
    orderId?: true
    laundryItemId?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    qty?: true
    orderId?: true
    laundryItemId?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    qty?: true
    orderId?: true
    laundryItemId?: true
    isDelete?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    qty?: true
    orderId?: true
    laundryItemId?: true
    isDelete?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    qty?: true
    orderId?: true
    laundryItemId?: true
    isDelete?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: number
    qty: number
    orderId: number
    laundryItemId: number
    isDelete: boolean
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qty?: boolean
    orderId?: boolean
    laundryItemId?: boolean
    isDelete?: boolean
    laundryItem?: boolean | LaundryItemDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qty?: boolean
    orderId?: boolean
    laundryItemId?: boolean
    isDelete?: boolean
    laundryItem?: boolean | LaundryItemDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qty?: boolean
    orderId?: boolean
    laundryItemId?: boolean
    isDelete?: boolean
    laundryItem?: boolean | LaundryItemDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    qty?: boolean
    orderId?: boolean
    laundryItemId?: boolean
    isDelete?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "qty" | "orderId" | "laundryItemId" | "isDelete", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    laundryItem?: boolean | LaundryItemDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    laundryItem?: boolean | LaundryItemDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    laundryItem?: boolean | LaundryItemDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      laundryItem: Prisma.$LaundryItemPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      qty: number
      orderId: number
      laundryItemId: number
      isDelete: boolean
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    laundryItem<T extends LaundryItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LaundryItemDefaultArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */ 
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'Int'>
    readonly qty: FieldRef<"OrderItem", 'Int'>
    readonly orderId: FieldRef<"OrderItem", 'Int'>
    readonly laundryItemId: FieldRef<"OrderItem", 'Int'>
    readonly isDelete: FieldRef<"OrderItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model LaundryItem
   */

  export type AggregateLaundryItem = {
    _count: LaundryItemCountAggregateOutputType | null
    _avg: LaundryItemAvgAggregateOutputType | null
    _sum: LaundryItemSumAggregateOutputType | null
    _min: LaundryItemMinAggregateOutputType | null
    _max: LaundryItemMaxAggregateOutputType | null
  }

  export type LaundryItemAvgAggregateOutputType = {
    id: number | null
  }

  export type LaundryItemSumAggregateOutputType = {
    id: number | null
  }

  export type LaundryItemMinAggregateOutputType = {
    id: number | null
    itemName: string | null
    isDelete: boolean | null
  }

  export type LaundryItemMaxAggregateOutputType = {
    id: number | null
    itemName: string | null
    isDelete: boolean | null
  }

  export type LaundryItemCountAggregateOutputType = {
    id: number
    itemName: number
    isDelete: number
    _all: number
  }


  export type LaundryItemAvgAggregateInputType = {
    id?: true
  }

  export type LaundryItemSumAggregateInputType = {
    id?: true
  }

  export type LaundryItemMinAggregateInputType = {
    id?: true
    itemName?: true
    isDelete?: true
  }

  export type LaundryItemMaxAggregateInputType = {
    id?: true
    itemName?: true
    isDelete?: true
  }

  export type LaundryItemCountAggregateInputType = {
    id?: true
    itemName?: true
    isDelete?: true
    _all?: true
  }

  export type LaundryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LaundryItem to aggregate.
     */
    where?: LaundryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LaundryItems to fetch.
     */
    orderBy?: LaundryItemOrderByWithRelationInput | LaundryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LaundryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LaundryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LaundryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LaundryItems
    **/
    _count?: true | LaundryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LaundryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LaundryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LaundryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LaundryItemMaxAggregateInputType
  }

  export type GetLaundryItemAggregateType<T extends LaundryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateLaundryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLaundryItem[P]>
      : GetScalarType<T[P], AggregateLaundryItem[P]>
  }




  export type LaundryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LaundryItemWhereInput
    orderBy?: LaundryItemOrderByWithAggregationInput | LaundryItemOrderByWithAggregationInput[]
    by: LaundryItemScalarFieldEnum[] | LaundryItemScalarFieldEnum
    having?: LaundryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LaundryItemCountAggregateInputType | true
    _avg?: LaundryItemAvgAggregateInputType
    _sum?: LaundryItemSumAggregateInputType
    _min?: LaundryItemMinAggregateInputType
    _max?: LaundryItemMaxAggregateInputType
  }

  export type LaundryItemGroupByOutputType = {
    id: number
    itemName: string
    isDelete: boolean
    _count: LaundryItemCountAggregateOutputType | null
    _avg: LaundryItemAvgAggregateOutputType | null
    _sum: LaundryItemSumAggregateOutputType | null
    _min: LaundryItemMinAggregateOutputType | null
    _max: LaundryItemMaxAggregateOutputType | null
  }

  type GetLaundryItemGroupByPayload<T extends LaundryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LaundryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LaundryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LaundryItemGroupByOutputType[P]>
            : GetScalarType<T[P], LaundryItemGroupByOutputType[P]>
        }
      >
    >


  export type LaundryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    isDelete?: boolean
    orderItem?: boolean | LaundryItem$orderItemArgs<ExtArgs>
    _count?: boolean | LaundryItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["laundryItem"]>

  export type LaundryItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    isDelete?: boolean
  }, ExtArgs["result"]["laundryItem"]>

  export type LaundryItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    isDelete?: boolean
  }, ExtArgs["result"]["laundryItem"]>

  export type LaundryItemSelectScalar = {
    id?: boolean
    itemName?: boolean
    isDelete?: boolean
  }

  export type LaundryItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemName" | "isDelete", ExtArgs["result"]["laundryItem"]>
  export type LaundryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItem?: boolean | LaundryItem$orderItemArgs<ExtArgs>
    _count?: boolean | LaundryItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LaundryItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LaundryItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LaundryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LaundryItem"
    objects: {
      orderItem: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemName: string
      isDelete: boolean
    }, ExtArgs["result"]["laundryItem"]>
    composites: {}
  }

  type LaundryItemGetPayload<S extends boolean | null | undefined | LaundryItemDefaultArgs> = $Result.GetResult<Prisma.$LaundryItemPayload, S>

  type LaundryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LaundryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LaundryItemCountAggregateInputType | true
    }

  export interface LaundryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LaundryItem'], meta: { name: 'LaundryItem' } }
    /**
     * Find zero or one LaundryItem that matches the filter.
     * @param {LaundryItemFindUniqueArgs} args - Arguments to find a LaundryItem
     * @example
     * // Get one LaundryItem
     * const laundryItem = await prisma.laundryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LaundryItemFindUniqueArgs>(args: SelectSubset<T, LaundryItemFindUniqueArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one LaundryItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LaundryItemFindUniqueOrThrowArgs} args - Arguments to find a LaundryItem
     * @example
     * // Get one LaundryItem
     * const laundryItem = await prisma.laundryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LaundryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, LaundryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first LaundryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemFindFirstArgs} args - Arguments to find a LaundryItem
     * @example
     * // Get one LaundryItem
     * const laundryItem = await prisma.laundryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LaundryItemFindFirstArgs>(args?: SelectSubset<T, LaundryItemFindFirstArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first LaundryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemFindFirstOrThrowArgs} args - Arguments to find a LaundryItem
     * @example
     * // Get one LaundryItem
     * const laundryItem = await prisma.laundryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LaundryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, LaundryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more LaundryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LaundryItems
     * const laundryItems = await prisma.laundryItem.findMany()
     * 
     * // Get first 10 LaundryItems
     * const laundryItems = await prisma.laundryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const laundryItemWithIdOnly = await prisma.laundryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LaundryItemFindManyArgs>(args?: SelectSubset<T, LaundryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a LaundryItem.
     * @param {LaundryItemCreateArgs} args - Arguments to create a LaundryItem.
     * @example
     * // Create one LaundryItem
     * const LaundryItem = await prisma.laundryItem.create({
     *   data: {
     *     // ... data to create a LaundryItem
     *   }
     * })
     * 
     */
    create<T extends LaundryItemCreateArgs>(args: SelectSubset<T, LaundryItemCreateArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many LaundryItems.
     * @param {LaundryItemCreateManyArgs} args - Arguments to create many LaundryItems.
     * @example
     * // Create many LaundryItems
     * const laundryItem = await prisma.laundryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LaundryItemCreateManyArgs>(args?: SelectSubset<T, LaundryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LaundryItems and returns the data saved in the database.
     * @param {LaundryItemCreateManyAndReturnArgs} args - Arguments to create many LaundryItems.
     * @example
     * // Create many LaundryItems
     * const laundryItem = await prisma.laundryItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LaundryItems and only return the `id`
     * const laundryItemWithIdOnly = await prisma.laundryItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LaundryItemCreateManyAndReturnArgs>(args?: SelectSubset<T, LaundryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a LaundryItem.
     * @param {LaundryItemDeleteArgs} args - Arguments to delete one LaundryItem.
     * @example
     * // Delete one LaundryItem
     * const LaundryItem = await prisma.laundryItem.delete({
     *   where: {
     *     // ... filter to delete one LaundryItem
     *   }
     * })
     * 
     */
    delete<T extends LaundryItemDeleteArgs>(args: SelectSubset<T, LaundryItemDeleteArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one LaundryItem.
     * @param {LaundryItemUpdateArgs} args - Arguments to update one LaundryItem.
     * @example
     * // Update one LaundryItem
     * const laundryItem = await prisma.laundryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LaundryItemUpdateArgs>(args: SelectSubset<T, LaundryItemUpdateArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more LaundryItems.
     * @param {LaundryItemDeleteManyArgs} args - Arguments to filter LaundryItems to delete.
     * @example
     * // Delete a few LaundryItems
     * const { count } = await prisma.laundryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LaundryItemDeleteManyArgs>(args?: SelectSubset<T, LaundryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LaundryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LaundryItems
     * const laundryItem = await prisma.laundryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LaundryItemUpdateManyArgs>(args: SelectSubset<T, LaundryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LaundryItems and returns the data updated in the database.
     * @param {LaundryItemUpdateManyAndReturnArgs} args - Arguments to update many LaundryItems.
     * @example
     * // Update many LaundryItems
     * const laundryItem = await prisma.laundryItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LaundryItems and only return the `id`
     * const laundryItemWithIdOnly = await prisma.laundryItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LaundryItemUpdateManyAndReturnArgs>(args: SelectSubset<T, LaundryItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one LaundryItem.
     * @param {LaundryItemUpsertArgs} args - Arguments to update or create a LaundryItem.
     * @example
     * // Update or create a LaundryItem
     * const laundryItem = await prisma.laundryItem.upsert({
     *   create: {
     *     // ... data to create a LaundryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LaundryItem we want to update
     *   }
     * })
     */
    upsert<T extends LaundryItemUpsertArgs>(args: SelectSubset<T, LaundryItemUpsertArgs<ExtArgs>>): Prisma__LaundryItemClient<$Result.GetResult<Prisma.$LaundryItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of LaundryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemCountArgs} args - Arguments to filter LaundryItems to count.
     * @example
     * // Count the number of LaundryItems
     * const count = await prisma.laundryItem.count({
     *   where: {
     *     // ... the filter for the LaundryItems we want to count
     *   }
     * })
    **/
    count<T extends LaundryItemCountArgs>(
      args?: Subset<T, LaundryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LaundryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LaundryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LaundryItemAggregateArgs>(args: Subset<T, LaundryItemAggregateArgs>): Prisma.PrismaPromise<GetLaundryItemAggregateType<T>>

    /**
     * Group by LaundryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaundryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LaundryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LaundryItemGroupByArgs['orderBy'] }
        : { orderBy?: LaundryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LaundryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLaundryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LaundryItem model
   */
  readonly fields: LaundryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LaundryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LaundryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderItem<T extends LaundryItem$orderItemArgs<ExtArgs> = {}>(args?: Subset<T, LaundryItem$orderItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LaundryItem model
   */ 
  interface LaundryItemFieldRefs {
    readonly id: FieldRef<"LaundryItem", 'Int'>
    readonly itemName: FieldRef<"LaundryItem", 'String'>
    readonly isDelete: FieldRef<"LaundryItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * LaundryItem findUnique
   */
  export type LaundryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * Filter, which LaundryItem to fetch.
     */
    where: LaundryItemWhereUniqueInput
  }

  /**
   * LaundryItem findUniqueOrThrow
   */
  export type LaundryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * Filter, which LaundryItem to fetch.
     */
    where: LaundryItemWhereUniqueInput
  }

  /**
   * LaundryItem findFirst
   */
  export type LaundryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * Filter, which LaundryItem to fetch.
     */
    where?: LaundryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LaundryItems to fetch.
     */
    orderBy?: LaundryItemOrderByWithRelationInput | LaundryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LaundryItems.
     */
    cursor?: LaundryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LaundryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LaundryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LaundryItems.
     */
    distinct?: LaundryItemScalarFieldEnum | LaundryItemScalarFieldEnum[]
  }

  /**
   * LaundryItem findFirstOrThrow
   */
  export type LaundryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * Filter, which LaundryItem to fetch.
     */
    where?: LaundryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LaundryItems to fetch.
     */
    orderBy?: LaundryItemOrderByWithRelationInput | LaundryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LaundryItems.
     */
    cursor?: LaundryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LaundryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LaundryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LaundryItems.
     */
    distinct?: LaundryItemScalarFieldEnum | LaundryItemScalarFieldEnum[]
  }

  /**
   * LaundryItem findMany
   */
  export type LaundryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * Filter, which LaundryItems to fetch.
     */
    where?: LaundryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LaundryItems to fetch.
     */
    orderBy?: LaundryItemOrderByWithRelationInput | LaundryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LaundryItems.
     */
    cursor?: LaundryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LaundryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LaundryItems.
     */
    skip?: number
    distinct?: LaundryItemScalarFieldEnum | LaundryItemScalarFieldEnum[]
  }

  /**
   * LaundryItem create
   */
  export type LaundryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a LaundryItem.
     */
    data: XOR<LaundryItemCreateInput, LaundryItemUncheckedCreateInput>
  }

  /**
   * LaundryItem createMany
   */
  export type LaundryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LaundryItems.
     */
    data: LaundryItemCreateManyInput | LaundryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LaundryItem createManyAndReturn
   */
  export type LaundryItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * The data used to create many LaundryItems.
     */
    data: LaundryItemCreateManyInput | LaundryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LaundryItem update
   */
  export type LaundryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a LaundryItem.
     */
    data: XOR<LaundryItemUpdateInput, LaundryItemUncheckedUpdateInput>
    /**
     * Choose, which LaundryItem to update.
     */
    where: LaundryItemWhereUniqueInput
  }

  /**
   * LaundryItem updateMany
   */
  export type LaundryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LaundryItems.
     */
    data: XOR<LaundryItemUpdateManyMutationInput, LaundryItemUncheckedUpdateManyInput>
    /**
     * Filter which LaundryItems to update
     */
    where?: LaundryItemWhereInput
  }

  /**
   * LaundryItem updateManyAndReturn
   */
  export type LaundryItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * The data used to update LaundryItems.
     */
    data: XOR<LaundryItemUpdateManyMutationInput, LaundryItemUncheckedUpdateManyInput>
    /**
     * Filter which LaundryItems to update
     */
    where?: LaundryItemWhereInput
  }

  /**
   * LaundryItem upsert
   */
  export type LaundryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the LaundryItem to update in case it exists.
     */
    where: LaundryItemWhereUniqueInput
    /**
     * In case the LaundryItem found by the `where` argument doesn't exist, create a new LaundryItem with this data.
     */
    create: XOR<LaundryItemCreateInput, LaundryItemUncheckedCreateInput>
    /**
     * In case the LaundryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LaundryItemUpdateInput, LaundryItemUncheckedUpdateInput>
  }

  /**
   * LaundryItem delete
   */
  export type LaundryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
    /**
     * Filter which LaundryItem to delete.
     */
    where: LaundryItemWhereUniqueInput
  }

  /**
   * LaundryItem deleteMany
   */
  export type LaundryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LaundryItems to delete
     */
    where?: LaundryItemWhereInput
  }

  /**
   * LaundryItem.orderItem
   */
  export type LaundryItem$orderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * LaundryItem without action
   */
  export type LaundryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaundryItem
     */
    select?: LaundryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LaundryItem
     */
    omit?: LaundryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaundryItemInclude<ExtArgs> | null
  }


  /**
   * Model DeliveryOrder
   */

  export type AggregateDeliveryOrder = {
    _count: DeliveryOrderCountAggregateOutputType | null
    _avg: DeliveryOrderAvgAggregateOutputType | null
    _sum: DeliveryOrderSumAggregateOutputType | null
    _min: DeliveryOrderMinAggregateOutputType | null
    _max: DeliveryOrderMaxAggregateOutputType | null
  }

  export type DeliveryOrderAvgAggregateOutputType = {
    id: number | null
    distance: number | null
    deliveryPrice: number | null
    userId: number | null
    driverId: number | null
    orderId: number | null
    addressId: number | null
  }

  export type DeliveryOrderSumAggregateOutputType = {
    id: number | null
    distance: number | null
    deliveryPrice: number | null
    userId: number | null
    driverId: number | null
    orderId: number | null
    addressId: number | null
  }

  export type DeliveryOrderMinAggregateOutputType = {
    id: number | null
    deliveryNumber: string | null
    deliveryStatus: $Enums.DeliveryStatus | null
    distance: number | null
    deliveryPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    driverId: number | null
    orderId: number | null
    addressId: number | null
  }

  export type DeliveryOrderMaxAggregateOutputType = {
    id: number | null
    deliveryNumber: string | null
    deliveryStatus: $Enums.DeliveryStatus | null
    distance: number | null
    deliveryPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    driverId: number | null
    orderId: number | null
    addressId: number | null
  }

  export type DeliveryOrderCountAggregateOutputType = {
    id: number
    deliveryNumber: number
    deliveryStatus: number
    distance: number
    deliveryPrice: number
    createdAt: number
    updatedAt: number
    userId: number
    driverId: number
    orderId: number
    addressId: number
    _all: number
  }


  export type DeliveryOrderAvgAggregateInputType = {
    id?: true
    distance?: true
    deliveryPrice?: true
    userId?: true
    driverId?: true
    orderId?: true
    addressId?: true
  }

  export type DeliveryOrderSumAggregateInputType = {
    id?: true
    distance?: true
    deliveryPrice?: true
    userId?: true
    driverId?: true
    orderId?: true
    addressId?: true
  }

  export type DeliveryOrderMinAggregateInputType = {
    id?: true
    deliveryNumber?: true
    deliveryStatus?: true
    distance?: true
    deliveryPrice?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    driverId?: true
    orderId?: true
    addressId?: true
  }

  export type DeliveryOrderMaxAggregateInputType = {
    id?: true
    deliveryNumber?: true
    deliveryStatus?: true
    distance?: true
    deliveryPrice?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    driverId?: true
    orderId?: true
    addressId?: true
  }

  export type DeliveryOrderCountAggregateInputType = {
    id?: true
    deliveryNumber?: true
    deliveryStatus?: true
    distance?: true
    deliveryPrice?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    driverId?: true
    orderId?: true
    addressId?: true
    _all?: true
  }

  export type DeliveryOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeliveryOrder to aggregate.
     */
    where?: DeliveryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryOrders to fetch.
     */
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeliveryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeliveryOrders
    **/
    _count?: true | DeliveryOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliveryOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliveryOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveryOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveryOrderMaxAggregateInputType
  }

  export type GetDeliveryOrderAggregateType<T extends DeliveryOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveryOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveryOrder[P]>
      : GetScalarType<T[P], AggregateDeliveryOrder[P]>
  }




  export type DeliveryOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryOrderWhereInput
    orderBy?: DeliveryOrderOrderByWithAggregationInput | DeliveryOrderOrderByWithAggregationInput[]
    by: DeliveryOrderScalarFieldEnum[] | DeliveryOrderScalarFieldEnum
    having?: DeliveryOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveryOrderCountAggregateInputType | true
    _avg?: DeliveryOrderAvgAggregateInputType
    _sum?: DeliveryOrderSumAggregateInputType
    _min?: DeliveryOrderMinAggregateInputType
    _max?: DeliveryOrderMaxAggregateInputType
  }

  export type DeliveryOrderGroupByOutputType = {
    id: number
    deliveryNumber: string
    deliveryStatus: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt: Date
    updatedAt: Date
    userId: number
    driverId: number | null
    orderId: number
    addressId: number | null
    _count: DeliveryOrderCountAggregateOutputType | null
    _avg: DeliveryOrderAvgAggregateOutputType | null
    _sum: DeliveryOrderSumAggregateOutputType | null
    _min: DeliveryOrderMinAggregateOutputType | null
    _max: DeliveryOrderMaxAggregateOutputType | null
  }

  type GetDeliveryOrderGroupByPayload<T extends DeliveryOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeliveryOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveryOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveryOrderGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveryOrderGroupByOutputType[P]>
        }
      >
    >


  export type DeliveryOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deliveryNumber?: boolean
    deliveryStatus?: boolean
    distance?: boolean
    deliveryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    driverId?: boolean
    orderId?: boolean
    addressId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    driver?: boolean | DeliveryOrder$driverArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    address?: boolean | DeliveryOrder$addressArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryOrder"]>

  export type DeliveryOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deliveryNumber?: boolean
    deliveryStatus?: boolean
    distance?: boolean
    deliveryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    driverId?: boolean
    orderId?: boolean
    addressId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    driver?: boolean | DeliveryOrder$driverArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    address?: boolean | DeliveryOrder$addressArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryOrder"]>

  export type DeliveryOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deliveryNumber?: boolean
    deliveryStatus?: boolean
    distance?: boolean
    deliveryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    driverId?: boolean
    orderId?: boolean
    addressId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    driver?: boolean | DeliveryOrder$driverArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    address?: boolean | DeliveryOrder$addressArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryOrder"]>

  export type DeliveryOrderSelectScalar = {
    id?: boolean
    deliveryNumber?: boolean
    deliveryStatus?: boolean
    distance?: boolean
    deliveryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    driverId?: boolean
    orderId?: boolean
    addressId?: boolean
  }

  export type DeliveryOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "deliveryNumber" | "deliveryStatus" | "distance" | "deliveryPrice" | "createdAt" | "updatedAt" | "userId" | "driverId" | "orderId" | "addressId", ExtArgs["result"]["deliveryOrder"]>
  export type DeliveryOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    driver?: boolean | DeliveryOrder$driverArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    address?: boolean | DeliveryOrder$addressArgs<ExtArgs>
  }
  export type DeliveryOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    driver?: boolean | DeliveryOrder$driverArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    address?: boolean | DeliveryOrder$addressArgs<ExtArgs>
  }
  export type DeliveryOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    driver?: boolean | DeliveryOrder$driverArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    address?: boolean | DeliveryOrder$addressArgs<ExtArgs>
  }

  export type $DeliveryOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeliveryOrder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      driver: Prisma.$EmployeePayload<ExtArgs> | null
      order: Prisma.$OrderPayload<ExtArgs>
      address: Prisma.$AddressPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      deliveryNumber: string
      deliveryStatus: $Enums.DeliveryStatus
      distance: number
      deliveryPrice: number
      createdAt: Date
      updatedAt: Date
      userId: number
      driverId: number | null
      orderId: number
      addressId: number | null
    }, ExtArgs["result"]["deliveryOrder"]>
    composites: {}
  }

  type DeliveryOrderGetPayload<S extends boolean | null | undefined | DeliveryOrderDefaultArgs> = $Result.GetResult<Prisma.$DeliveryOrderPayload, S>

  type DeliveryOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeliveryOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeliveryOrderCountAggregateInputType | true
    }

  export interface DeliveryOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeliveryOrder'], meta: { name: 'DeliveryOrder' } }
    /**
     * Find zero or one DeliveryOrder that matches the filter.
     * @param {DeliveryOrderFindUniqueArgs} args - Arguments to find a DeliveryOrder
     * @example
     * // Get one DeliveryOrder
     * const deliveryOrder = await prisma.deliveryOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeliveryOrderFindUniqueArgs>(args: SelectSubset<T, DeliveryOrderFindUniqueArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one DeliveryOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeliveryOrderFindUniqueOrThrowArgs} args - Arguments to find a DeliveryOrder
     * @example
     * // Get one DeliveryOrder
     * const deliveryOrder = await prisma.deliveryOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeliveryOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, DeliveryOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first DeliveryOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderFindFirstArgs} args - Arguments to find a DeliveryOrder
     * @example
     * // Get one DeliveryOrder
     * const deliveryOrder = await prisma.deliveryOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeliveryOrderFindFirstArgs>(args?: SelectSubset<T, DeliveryOrderFindFirstArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first DeliveryOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderFindFirstOrThrowArgs} args - Arguments to find a DeliveryOrder
     * @example
     * // Get one DeliveryOrder
     * const deliveryOrder = await prisma.deliveryOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeliveryOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, DeliveryOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more DeliveryOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeliveryOrders
     * const deliveryOrders = await prisma.deliveryOrder.findMany()
     * 
     * // Get first 10 DeliveryOrders
     * const deliveryOrders = await prisma.deliveryOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveryOrderWithIdOnly = await prisma.deliveryOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeliveryOrderFindManyArgs>(args?: SelectSubset<T, DeliveryOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a DeliveryOrder.
     * @param {DeliveryOrderCreateArgs} args - Arguments to create a DeliveryOrder.
     * @example
     * // Create one DeliveryOrder
     * const DeliveryOrder = await prisma.deliveryOrder.create({
     *   data: {
     *     // ... data to create a DeliveryOrder
     *   }
     * })
     * 
     */
    create<T extends DeliveryOrderCreateArgs>(args: SelectSubset<T, DeliveryOrderCreateArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many DeliveryOrders.
     * @param {DeliveryOrderCreateManyArgs} args - Arguments to create many DeliveryOrders.
     * @example
     * // Create many DeliveryOrders
     * const deliveryOrder = await prisma.deliveryOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeliveryOrderCreateManyArgs>(args?: SelectSubset<T, DeliveryOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeliveryOrders and returns the data saved in the database.
     * @param {DeliveryOrderCreateManyAndReturnArgs} args - Arguments to create many DeliveryOrders.
     * @example
     * // Create many DeliveryOrders
     * const deliveryOrder = await prisma.deliveryOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeliveryOrders and only return the `id`
     * const deliveryOrderWithIdOnly = await prisma.deliveryOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeliveryOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, DeliveryOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a DeliveryOrder.
     * @param {DeliveryOrderDeleteArgs} args - Arguments to delete one DeliveryOrder.
     * @example
     * // Delete one DeliveryOrder
     * const DeliveryOrder = await prisma.deliveryOrder.delete({
     *   where: {
     *     // ... filter to delete one DeliveryOrder
     *   }
     * })
     * 
     */
    delete<T extends DeliveryOrderDeleteArgs>(args: SelectSubset<T, DeliveryOrderDeleteArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one DeliveryOrder.
     * @param {DeliveryOrderUpdateArgs} args - Arguments to update one DeliveryOrder.
     * @example
     * // Update one DeliveryOrder
     * const deliveryOrder = await prisma.deliveryOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeliveryOrderUpdateArgs>(args: SelectSubset<T, DeliveryOrderUpdateArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more DeliveryOrders.
     * @param {DeliveryOrderDeleteManyArgs} args - Arguments to filter DeliveryOrders to delete.
     * @example
     * // Delete a few DeliveryOrders
     * const { count } = await prisma.deliveryOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeliveryOrderDeleteManyArgs>(args?: SelectSubset<T, DeliveryOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeliveryOrders
     * const deliveryOrder = await prisma.deliveryOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeliveryOrderUpdateManyArgs>(args: SelectSubset<T, DeliveryOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryOrders and returns the data updated in the database.
     * @param {DeliveryOrderUpdateManyAndReturnArgs} args - Arguments to update many DeliveryOrders.
     * @example
     * // Update many DeliveryOrders
     * const deliveryOrder = await prisma.deliveryOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeliveryOrders and only return the `id`
     * const deliveryOrderWithIdOnly = await prisma.deliveryOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeliveryOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, DeliveryOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one DeliveryOrder.
     * @param {DeliveryOrderUpsertArgs} args - Arguments to update or create a DeliveryOrder.
     * @example
     * // Update or create a DeliveryOrder
     * const deliveryOrder = await prisma.deliveryOrder.upsert({
     *   create: {
     *     // ... data to create a DeliveryOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeliveryOrder we want to update
     *   }
     * })
     */
    upsert<T extends DeliveryOrderUpsertArgs>(args: SelectSubset<T, DeliveryOrderUpsertArgs<ExtArgs>>): Prisma__DeliveryOrderClient<$Result.GetResult<Prisma.$DeliveryOrderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of DeliveryOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderCountArgs} args - Arguments to filter DeliveryOrders to count.
     * @example
     * // Count the number of DeliveryOrders
     * const count = await prisma.deliveryOrder.count({
     *   where: {
     *     // ... the filter for the DeliveryOrders we want to count
     *   }
     * })
    **/
    count<T extends DeliveryOrderCountArgs>(
      args?: Subset<T, DeliveryOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveryOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeliveryOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveryOrderAggregateArgs>(args: Subset<T, DeliveryOrderAggregateArgs>): Prisma.PrismaPromise<GetDeliveryOrderAggregateType<T>>

    /**
     * Group by DeliveryOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeliveryOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeliveryOrderGroupByArgs['orderBy'] }
        : { orderBy?: DeliveryOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeliveryOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveryOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeliveryOrder model
   */
  readonly fields: DeliveryOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeliveryOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeliveryOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    driver<T extends DeliveryOrder$driverArgs<ExtArgs> = {}>(args?: Subset<T, DeliveryOrder$driverArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    address<T extends DeliveryOrder$addressArgs<ExtArgs> = {}>(args?: Subset<T, DeliveryOrder$addressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeliveryOrder model
   */ 
  interface DeliveryOrderFieldRefs {
    readonly id: FieldRef<"DeliveryOrder", 'Int'>
    readonly deliveryNumber: FieldRef<"DeliveryOrder", 'String'>
    readonly deliveryStatus: FieldRef<"DeliveryOrder", 'DeliveryStatus'>
    readonly distance: FieldRef<"DeliveryOrder", 'Int'>
    readonly deliveryPrice: FieldRef<"DeliveryOrder", 'Int'>
    readonly createdAt: FieldRef<"DeliveryOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"DeliveryOrder", 'DateTime'>
    readonly userId: FieldRef<"DeliveryOrder", 'Int'>
    readonly driverId: FieldRef<"DeliveryOrder", 'Int'>
    readonly orderId: FieldRef<"DeliveryOrder", 'Int'>
    readonly addressId: FieldRef<"DeliveryOrder", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DeliveryOrder findUnique
   */
  export type DeliveryOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryOrder to fetch.
     */
    where: DeliveryOrderWhereUniqueInput
  }

  /**
   * DeliveryOrder findUniqueOrThrow
   */
  export type DeliveryOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryOrder to fetch.
     */
    where: DeliveryOrderWhereUniqueInput
  }

  /**
   * DeliveryOrder findFirst
   */
  export type DeliveryOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryOrder to fetch.
     */
    where?: DeliveryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryOrders to fetch.
     */
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryOrders.
     */
    cursor?: DeliveryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryOrders.
     */
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * DeliveryOrder findFirstOrThrow
   */
  export type DeliveryOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryOrder to fetch.
     */
    where?: DeliveryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryOrders to fetch.
     */
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryOrders.
     */
    cursor?: DeliveryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryOrders.
     */
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * DeliveryOrder findMany
   */
  export type DeliveryOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryOrders to fetch.
     */
    where?: DeliveryOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryOrders to fetch.
     */
    orderBy?: DeliveryOrderOrderByWithRelationInput | DeliveryOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeliveryOrders.
     */
    cursor?: DeliveryOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryOrders.
     */
    skip?: number
    distinct?: DeliveryOrderScalarFieldEnum | DeliveryOrderScalarFieldEnum[]
  }

  /**
   * DeliveryOrder create
   */
  export type DeliveryOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a DeliveryOrder.
     */
    data: XOR<DeliveryOrderCreateInput, DeliveryOrderUncheckedCreateInput>
  }

  /**
   * DeliveryOrder createMany
   */
  export type DeliveryOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeliveryOrders.
     */
    data: DeliveryOrderCreateManyInput | DeliveryOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeliveryOrder createManyAndReturn
   */
  export type DeliveryOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * The data used to create many DeliveryOrders.
     */
    data: DeliveryOrderCreateManyInput | DeliveryOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeliveryOrder update
   */
  export type DeliveryOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a DeliveryOrder.
     */
    data: XOR<DeliveryOrderUpdateInput, DeliveryOrderUncheckedUpdateInput>
    /**
     * Choose, which DeliveryOrder to update.
     */
    where: DeliveryOrderWhereUniqueInput
  }

  /**
   * DeliveryOrder updateMany
   */
  export type DeliveryOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeliveryOrders.
     */
    data: XOR<DeliveryOrderUpdateManyMutationInput, DeliveryOrderUncheckedUpdateManyInput>
    /**
     * Filter which DeliveryOrders to update
     */
    where?: DeliveryOrderWhereInput
  }

  /**
   * DeliveryOrder updateManyAndReturn
   */
  export type DeliveryOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * The data used to update DeliveryOrders.
     */
    data: XOR<DeliveryOrderUpdateManyMutationInput, DeliveryOrderUncheckedUpdateManyInput>
    /**
     * Filter which DeliveryOrders to update
     */
    where?: DeliveryOrderWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeliveryOrder upsert
   */
  export type DeliveryOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the DeliveryOrder to update in case it exists.
     */
    where: DeliveryOrderWhereUniqueInput
    /**
     * In case the DeliveryOrder found by the `where` argument doesn't exist, create a new DeliveryOrder with this data.
     */
    create: XOR<DeliveryOrderCreateInput, DeliveryOrderUncheckedCreateInput>
    /**
     * In case the DeliveryOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeliveryOrderUpdateInput, DeliveryOrderUncheckedUpdateInput>
  }

  /**
   * DeliveryOrder delete
   */
  export type DeliveryOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
    /**
     * Filter which DeliveryOrder to delete.
     */
    where: DeliveryOrderWhereUniqueInput
  }

  /**
   * DeliveryOrder deleteMany
   */
  export type DeliveryOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeliveryOrders to delete
     */
    where?: DeliveryOrderWhereInput
  }

  /**
   * DeliveryOrder.driver
   */
  export type DeliveryOrder$driverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * DeliveryOrder.address
   */
  export type DeliveryOrder$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * DeliveryOrder without action
   */
  export type DeliveryOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryOrder
     */
    select?: DeliveryOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryOrder
     */
    omit?: DeliveryOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryOrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderWorker
   */

  export type AggregateOrderWorker = {
    _count: OrderWorkerCountAggregateOutputType | null
    _avg: OrderWorkerAvgAggregateOutputType | null
    _sum: OrderWorkerSumAggregateOutputType | null
    _min: OrderWorkerMinAggregateOutputType | null
    _max: OrderWorkerMaxAggregateOutputType | null
  }

  export type OrderWorkerAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    workerId: number | null
  }

  export type OrderWorkerSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    workerId: number | null
  }

  export type OrderWorkerMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    workerId: number | null
    station: $Enums.EmployeeStation | null
    isComplete: boolean | null
    bypassRequest: boolean | null
    bypassNote: string | null
    bypassAccepted: boolean | null
    bypassRejected: boolean | null
    createdAt: Date | null
  }

  export type OrderWorkerMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    workerId: number | null
    station: $Enums.EmployeeStation | null
    isComplete: boolean | null
    bypassRequest: boolean | null
    bypassNote: string | null
    bypassAccepted: boolean | null
    bypassRejected: boolean | null
    createdAt: Date | null
  }

  export type OrderWorkerCountAggregateOutputType = {
    id: number
    orderId: number
    workerId: number
    station: number
    isComplete: number
    bypassRequest: number
    bypassNote: number
    bypassAccepted: number
    bypassRejected: number
    createdAt: number
    _all: number
  }


  export type OrderWorkerAvgAggregateInputType = {
    id?: true
    orderId?: true
    workerId?: true
  }

  export type OrderWorkerSumAggregateInputType = {
    id?: true
    orderId?: true
    workerId?: true
  }

  export type OrderWorkerMinAggregateInputType = {
    id?: true
    orderId?: true
    workerId?: true
    station?: true
    isComplete?: true
    bypassRequest?: true
    bypassNote?: true
    bypassAccepted?: true
    bypassRejected?: true
    createdAt?: true
  }

  export type OrderWorkerMaxAggregateInputType = {
    id?: true
    orderId?: true
    workerId?: true
    station?: true
    isComplete?: true
    bypassRequest?: true
    bypassNote?: true
    bypassAccepted?: true
    bypassRejected?: true
    createdAt?: true
  }

  export type OrderWorkerCountAggregateInputType = {
    id?: true
    orderId?: true
    workerId?: true
    station?: true
    isComplete?: true
    bypassRequest?: true
    bypassNote?: true
    bypassAccepted?: true
    bypassRejected?: true
    createdAt?: true
    _all?: true
  }

  export type OrderWorkerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderWorker to aggregate.
     */
    where?: OrderWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderWorkers to fetch.
     */
    orderBy?: OrderWorkerOrderByWithRelationInput | OrderWorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderWorkers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderWorkers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderWorkers
    **/
    _count?: true | OrderWorkerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderWorkerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderWorkerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderWorkerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderWorkerMaxAggregateInputType
  }

  export type GetOrderWorkerAggregateType<T extends OrderWorkerAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderWorker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderWorker[P]>
      : GetScalarType<T[P], AggregateOrderWorker[P]>
  }




  export type OrderWorkerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWorkerWhereInput
    orderBy?: OrderWorkerOrderByWithAggregationInput | OrderWorkerOrderByWithAggregationInput[]
    by: OrderWorkerScalarFieldEnum[] | OrderWorkerScalarFieldEnum
    having?: OrderWorkerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderWorkerCountAggregateInputType | true
    _avg?: OrderWorkerAvgAggregateInputType
    _sum?: OrderWorkerSumAggregateInputType
    _min?: OrderWorkerMinAggregateInputType
    _max?: OrderWorkerMaxAggregateInputType
  }

  export type OrderWorkerGroupByOutputType = {
    id: number
    orderId: number
    workerId: number
    station: $Enums.EmployeeStation | null
    isComplete: boolean
    bypassRequest: boolean
    bypassNote: string | null
    bypassAccepted: boolean
    bypassRejected: boolean
    createdAt: Date
    _count: OrderWorkerCountAggregateOutputType | null
    _avg: OrderWorkerAvgAggregateOutputType | null
    _sum: OrderWorkerSumAggregateOutputType | null
    _min: OrderWorkerMinAggregateOutputType | null
    _max: OrderWorkerMaxAggregateOutputType | null
  }

  type GetOrderWorkerGroupByPayload<T extends OrderWorkerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderWorkerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderWorkerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderWorkerGroupByOutputType[P]>
            : GetScalarType<T[P], OrderWorkerGroupByOutputType[P]>
        }
      >
    >


  export type OrderWorkerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    workerId?: boolean
    station?: boolean
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: boolean
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    worker?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderWorker"]>

  export type OrderWorkerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    workerId?: boolean
    station?: boolean
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: boolean
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    worker?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderWorker"]>

  export type OrderWorkerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    workerId?: boolean
    station?: boolean
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: boolean
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    worker?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderWorker"]>

  export type OrderWorkerSelectScalar = {
    id?: boolean
    orderId?: boolean
    workerId?: boolean
    station?: boolean
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: boolean
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: boolean
  }

  export type OrderWorkerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "workerId" | "station" | "isComplete" | "bypassRequest" | "bypassNote" | "bypassAccepted" | "bypassRejected" | "createdAt", ExtArgs["result"]["orderWorker"]>
  export type OrderWorkerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    worker?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OrderWorkerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    worker?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OrderWorkerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    worker?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $OrderWorkerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderWorker"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      worker: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      workerId: number
      station: $Enums.EmployeeStation | null
      isComplete: boolean
      bypassRequest: boolean
      bypassNote: string | null
      bypassAccepted: boolean
      bypassRejected: boolean
      createdAt: Date
    }, ExtArgs["result"]["orderWorker"]>
    composites: {}
  }

  type OrderWorkerGetPayload<S extends boolean | null | undefined | OrderWorkerDefaultArgs> = $Result.GetResult<Prisma.$OrderWorkerPayload, S>

  type OrderWorkerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderWorkerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderWorkerCountAggregateInputType | true
    }

  export interface OrderWorkerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderWorker'], meta: { name: 'OrderWorker' } }
    /**
     * Find zero or one OrderWorker that matches the filter.
     * @param {OrderWorkerFindUniqueArgs} args - Arguments to find a OrderWorker
     * @example
     * // Get one OrderWorker
     * const orderWorker = await prisma.orderWorker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderWorkerFindUniqueArgs>(args: SelectSubset<T, OrderWorkerFindUniqueArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one OrderWorker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderWorkerFindUniqueOrThrowArgs} args - Arguments to find a OrderWorker
     * @example
     * // Get one OrderWorker
     * const orderWorker = await prisma.orderWorker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderWorkerFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderWorkerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first OrderWorker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerFindFirstArgs} args - Arguments to find a OrderWorker
     * @example
     * // Get one OrderWorker
     * const orderWorker = await prisma.orderWorker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderWorkerFindFirstArgs>(args?: SelectSubset<T, OrderWorkerFindFirstArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first OrderWorker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerFindFirstOrThrowArgs} args - Arguments to find a OrderWorker
     * @example
     * // Get one OrderWorker
     * const orderWorker = await prisma.orderWorker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderWorkerFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderWorkerFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more OrderWorkers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderWorkers
     * const orderWorkers = await prisma.orderWorker.findMany()
     * 
     * // Get first 10 OrderWorkers
     * const orderWorkers = await prisma.orderWorker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWorkerWithIdOnly = await prisma.orderWorker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderWorkerFindManyArgs>(args?: SelectSubset<T, OrderWorkerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a OrderWorker.
     * @param {OrderWorkerCreateArgs} args - Arguments to create a OrderWorker.
     * @example
     * // Create one OrderWorker
     * const OrderWorker = await prisma.orderWorker.create({
     *   data: {
     *     // ... data to create a OrderWorker
     *   }
     * })
     * 
     */
    create<T extends OrderWorkerCreateArgs>(args: SelectSubset<T, OrderWorkerCreateArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many OrderWorkers.
     * @param {OrderWorkerCreateManyArgs} args - Arguments to create many OrderWorkers.
     * @example
     * // Create many OrderWorkers
     * const orderWorker = await prisma.orderWorker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderWorkerCreateManyArgs>(args?: SelectSubset<T, OrderWorkerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderWorkers and returns the data saved in the database.
     * @param {OrderWorkerCreateManyAndReturnArgs} args - Arguments to create many OrderWorkers.
     * @example
     * // Create many OrderWorkers
     * const orderWorker = await prisma.orderWorker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderWorkers and only return the `id`
     * const orderWorkerWithIdOnly = await prisma.orderWorker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderWorkerCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderWorkerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a OrderWorker.
     * @param {OrderWorkerDeleteArgs} args - Arguments to delete one OrderWorker.
     * @example
     * // Delete one OrderWorker
     * const OrderWorker = await prisma.orderWorker.delete({
     *   where: {
     *     // ... filter to delete one OrderWorker
     *   }
     * })
     * 
     */
    delete<T extends OrderWorkerDeleteArgs>(args: SelectSubset<T, OrderWorkerDeleteArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one OrderWorker.
     * @param {OrderWorkerUpdateArgs} args - Arguments to update one OrderWorker.
     * @example
     * // Update one OrderWorker
     * const orderWorker = await prisma.orderWorker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderWorkerUpdateArgs>(args: SelectSubset<T, OrderWorkerUpdateArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more OrderWorkers.
     * @param {OrderWorkerDeleteManyArgs} args - Arguments to filter OrderWorkers to delete.
     * @example
     * // Delete a few OrderWorkers
     * const { count } = await prisma.orderWorker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderWorkerDeleteManyArgs>(args?: SelectSubset<T, OrderWorkerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderWorkers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderWorkers
     * const orderWorker = await prisma.orderWorker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderWorkerUpdateManyArgs>(args: SelectSubset<T, OrderWorkerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderWorkers and returns the data updated in the database.
     * @param {OrderWorkerUpdateManyAndReturnArgs} args - Arguments to update many OrderWorkers.
     * @example
     * // Update many OrderWorkers
     * const orderWorker = await prisma.orderWorker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderWorkers and only return the `id`
     * const orderWorkerWithIdOnly = await prisma.orderWorker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderWorkerUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderWorkerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one OrderWorker.
     * @param {OrderWorkerUpsertArgs} args - Arguments to update or create a OrderWorker.
     * @example
     * // Update or create a OrderWorker
     * const orderWorker = await prisma.orderWorker.upsert({
     *   create: {
     *     // ... data to create a OrderWorker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderWorker we want to update
     *   }
     * })
     */
    upsert<T extends OrderWorkerUpsertArgs>(args: SelectSubset<T, OrderWorkerUpsertArgs<ExtArgs>>): Prisma__OrderWorkerClient<$Result.GetResult<Prisma.$OrderWorkerPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of OrderWorkers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerCountArgs} args - Arguments to filter OrderWorkers to count.
     * @example
     * // Count the number of OrderWorkers
     * const count = await prisma.orderWorker.count({
     *   where: {
     *     // ... the filter for the OrderWorkers we want to count
     *   }
     * })
    **/
    count<T extends OrderWorkerCountArgs>(
      args?: Subset<T, OrderWorkerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderWorkerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderWorker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderWorkerAggregateArgs>(args: Subset<T, OrderWorkerAggregateArgs>): Prisma.PrismaPromise<GetOrderWorkerAggregateType<T>>

    /**
     * Group by OrderWorker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderWorkerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderWorkerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderWorkerGroupByArgs['orderBy'] }
        : { orderBy?: OrderWorkerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderWorkerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderWorkerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderWorker model
   */
  readonly fields: OrderWorkerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderWorker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderWorkerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    worker<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderWorker model
   */ 
  interface OrderWorkerFieldRefs {
    readonly id: FieldRef<"OrderWorker", 'Int'>
    readonly orderId: FieldRef<"OrderWorker", 'Int'>
    readonly workerId: FieldRef<"OrderWorker", 'Int'>
    readonly station: FieldRef<"OrderWorker", 'EmployeeStation'>
    readonly isComplete: FieldRef<"OrderWorker", 'Boolean'>
    readonly bypassRequest: FieldRef<"OrderWorker", 'Boolean'>
    readonly bypassNote: FieldRef<"OrderWorker", 'String'>
    readonly bypassAccepted: FieldRef<"OrderWorker", 'Boolean'>
    readonly bypassRejected: FieldRef<"OrderWorker", 'Boolean'>
    readonly createdAt: FieldRef<"OrderWorker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderWorker findUnique
   */
  export type OrderWorkerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * Filter, which OrderWorker to fetch.
     */
    where: OrderWorkerWhereUniqueInput
  }

  /**
   * OrderWorker findUniqueOrThrow
   */
  export type OrderWorkerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * Filter, which OrderWorker to fetch.
     */
    where: OrderWorkerWhereUniqueInput
  }

  /**
   * OrderWorker findFirst
   */
  export type OrderWorkerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * Filter, which OrderWorker to fetch.
     */
    where?: OrderWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderWorkers to fetch.
     */
    orderBy?: OrderWorkerOrderByWithRelationInput | OrderWorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderWorkers.
     */
    cursor?: OrderWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderWorkers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderWorkers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderWorkers.
     */
    distinct?: OrderWorkerScalarFieldEnum | OrderWorkerScalarFieldEnum[]
  }

  /**
   * OrderWorker findFirstOrThrow
   */
  export type OrderWorkerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * Filter, which OrderWorker to fetch.
     */
    where?: OrderWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderWorkers to fetch.
     */
    orderBy?: OrderWorkerOrderByWithRelationInput | OrderWorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderWorkers.
     */
    cursor?: OrderWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderWorkers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderWorkers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderWorkers.
     */
    distinct?: OrderWorkerScalarFieldEnum | OrderWorkerScalarFieldEnum[]
  }

  /**
   * OrderWorker findMany
   */
  export type OrderWorkerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * Filter, which OrderWorkers to fetch.
     */
    where?: OrderWorkerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderWorkers to fetch.
     */
    orderBy?: OrderWorkerOrderByWithRelationInput | OrderWorkerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderWorkers.
     */
    cursor?: OrderWorkerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderWorkers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderWorkers.
     */
    skip?: number
    distinct?: OrderWorkerScalarFieldEnum | OrderWorkerScalarFieldEnum[]
  }

  /**
   * OrderWorker create
   */
  export type OrderWorkerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderWorker.
     */
    data: XOR<OrderWorkerCreateInput, OrderWorkerUncheckedCreateInput>
  }

  /**
   * OrderWorker createMany
   */
  export type OrderWorkerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderWorkers.
     */
    data: OrderWorkerCreateManyInput | OrderWorkerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderWorker createManyAndReturn
   */
  export type OrderWorkerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * The data used to create many OrderWorkers.
     */
    data: OrderWorkerCreateManyInput | OrderWorkerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderWorker update
   */
  export type OrderWorkerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderWorker.
     */
    data: XOR<OrderWorkerUpdateInput, OrderWorkerUncheckedUpdateInput>
    /**
     * Choose, which OrderWorker to update.
     */
    where: OrderWorkerWhereUniqueInput
  }

  /**
   * OrderWorker updateMany
   */
  export type OrderWorkerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderWorkers.
     */
    data: XOR<OrderWorkerUpdateManyMutationInput, OrderWorkerUncheckedUpdateManyInput>
    /**
     * Filter which OrderWorkers to update
     */
    where?: OrderWorkerWhereInput
  }

  /**
   * OrderWorker updateManyAndReturn
   */
  export type OrderWorkerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * The data used to update OrderWorkers.
     */
    data: XOR<OrderWorkerUpdateManyMutationInput, OrderWorkerUncheckedUpdateManyInput>
    /**
     * Filter which OrderWorkers to update
     */
    where?: OrderWorkerWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderWorker upsert
   */
  export type OrderWorkerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderWorker to update in case it exists.
     */
    where: OrderWorkerWhereUniqueInput
    /**
     * In case the OrderWorker found by the `where` argument doesn't exist, create a new OrderWorker with this data.
     */
    create: XOR<OrderWorkerCreateInput, OrderWorkerUncheckedCreateInput>
    /**
     * In case the OrderWorker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderWorkerUpdateInput, OrderWorkerUncheckedUpdateInput>
  }

  /**
   * OrderWorker delete
   */
  export type OrderWorkerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
    /**
     * Filter which OrderWorker to delete.
     */
    where: OrderWorkerWhereUniqueInput
  }

  /**
   * OrderWorker deleteMany
   */
  export type OrderWorkerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderWorkers to delete
     */
    where?: OrderWorkerWhereInput
  }

  /**
   * OrderWorker without action
   */
  export type OrderWorkerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderWorker
     */
    select?: OrderWorkerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderWorker
     */
    omit?: OrderWorkerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderWorkerInclude<ExtArgs> | null
  }


  /**
   * Model UserNotification
   */

  export type AggregateUserNotification = {
    _count: UserNotificationCountAggregateOutputType | null
    _avg: UserNotificationAvgAggregateOutputType | null
    _sum: UserNotificationSumAggregateOutputType | null
    _min: UserNotificationMinAggregateOutputType | null
    _max: UserNotificationMaxAggregateOutputType | null
  }

  export type UserNotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    notificationId: number | null
  }

  export type UserNotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    notificationId: number | null
  }

  export type UserNotificationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    isRead: boolean | null
    userId: number | null
    notificationId: number | null
  }

  export type UserNotificationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    isRead: boolean | null
    userId: number | null
    notificationId: number | null
  }

  export type UserNotificationCountAggregateOutputType = {
    id: number
    createdAt: number
    isRead: number
    userId: number
    notificationId: number
    _all: number
  }


  export type UserNotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    notificationId?: true
  }

  export type UserNotificationSumAggregateInputType = {
    id?: true
    userId?: true
    notificationId?: true
  }

  export type UserNotificationMinAggregateInputType = {
    id?: true
    createdAt?: true
    isRead?: true
    userId?: true
    notificationId?: true
  }

  export type UserNotificationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    isRead?: true
    userId?: true
    notificationId?: true
  }

  export type UserNotificationCountAggregateInputType = {
    id?: true
    createdAt?: true
    isRead?: true
    userId?: true
    notificationId?: true
    _all?: true
  }

  export type UserNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNotification to aggregate.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserNotifications
    **/
    _count?: true | UserNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserNotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserNotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserNotificationMaxAggregateInputType
  }

  export type GetUserNotificationAggregateType<T extends UserNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserNotification[P]>
      : GetScalarType<T[P], AggregateUserNotification[P]>
  }




  export type UserNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNotificationWhereInput
    orderBy?: UserNotificationOrderByWithAggregationInput | UserNotificationOrderByWithAggregationInput[]
    by: UserNotificationScalarFieldEnum[] | UserNotificationScalarFieldEnum
    having?: UserNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserNotificationCountAggregateInputType | true
    _avg?: UserNotificationAvgAggregateInputType
    _sum?: UserNotificationSumAggregateInputType
    _min?: UserNotificationMinAggregateInputType
    _max?: UserNotificationMaxAggregateInputType
  }

  export type UserNotificationGroupByOutputType = {
    id: number
    createdAt: Date
    isRead: boolean
    userId: number
    notificationId: number
    _count: UserNotificationCountAggregateOutputType | null
    _avg: UserNotificationAvgAggregateOutputType | null
    _sum: UserNotificationSumAggregateOutputType | null
    _min: UserNotificationMinAggregateOutputType | null
    _max: UserNotificationMaxAggregateOutputType | null
  }

  type GetUserNotificationGroupByPayload<T extends UserNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], UserNotificationGroupByOutputType[P]>
        }
      >
    >


  export type UserNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    isRead?: boolean
    userId?: boolean
    notificationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotification"]>

  export type UserNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    isRead?: boolean
    userId?: boolean
    notificationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotification"]>

  export type UserNotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    isRead?: boolean
    userId?: boolean
    notificationId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotification"]>

  export type UserNotificationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    isRead?: boolean
    userId?: boolean
    notificationId?: boolean
  }

  export type UserNotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "isRead" | "userId" | "notificationId", ExtArgs["result"]["userNotification"]>
  export type UserNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }
  export type UserNotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }
  export type UserNotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }

  export type $UserNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserNotification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      notification: Prisma.$NotificationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      isRead: boolean
      userId: number
      notificationId: number
    }, ExtArgs["result"]["userNotification"]>
    composites: {}
  }

  type UserNotificationGetPayload<S extends boolean | null | undefined | UserNotificationDefaultArgs> = $Result.GetResult<Prisma.$UserNotificationPayload, S>

  type UserNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserNotificationCountAggregateInputType | true
    }

  export interface UserNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserNotification'], meta: { name: 'UserNotification' } }
    /**
     * Find zero or one UserNotification that matches the filter.
     * @param {UserNotificationFindUniqueArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserNotificationFindUniqueArgs>(args: SelectSubset<T, UserNotificationFindUniqueArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserNotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserNotificationFindUniqueOrThrowArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationFindFirstArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserNotificationFindFirstArgs>(args?: SelectSubset<T, UserNotificationFindFirstArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationFindFirstOrThrowArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserNotifications
     * const userNotifications = await prisma.userNotification.findMany()
     * 
     * // Get first 10 UserNotifications
     * const userNotifications = await prisma.userNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userNotificationWithIdOnly = await prisma.userNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserNotificationFindManyArgs>(args?: SelectSubset<T, UserNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserNotification.
     * @param {UserNotificationCreateArgs} args - Arguments to create a UserNotification.
     * @example
     * // Create one UserNotification
     * const UserNotification = await prisma.userNotification.create({
     *   data: {
     *     // ... data to create a UserNotification
     *   }
     * })
     * 
     */
    create<T extends UserNotificationCreateArgs>(args: SelectSubset<T, UserNotificationCreateArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserNotifications.
     * @param {UserNotificationCreateManyArgs} args - Arguments to create many UserNotifications.
     * @example
     * // Create many UserNotifications
     * const userNotification = await prisma.userNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserNotificationCreateManyArgs>(args?: SelectSubset<T, UserNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserNotifications and returns the data saved in the database.
     * @param {UserNotificationCreateManyAndReturnArgs} args - Arguments to create many UserNotifications.
     * @example
     * // Create many UserNotifications
     * const userNotification = await prisma.userNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserNotifications and only return the `id`
     * const userNotificationWithIdOnly = await prisma.userNotification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserNotification.
     * @param {UserNotificationDeleteArgs} args - Arguments to delete one UserNotification.
     * @example
     * // Delete one UserNotification
     * const UserNotification = await prisma.userNotification.delete({
     *   where: {
     *     // ... filter to delete one UserNotification
     *   }
     * })
     * 
     */
    delete<T extends UserNotificationDeleteArgs>(args: SelectSubset<T, UserNotificationDeleteArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserNotification.
     * @param {UserNotificationUpdateArgs} args - Arguments to update one UserNotification.
     * @example
     * // Update one UserNotification
     * const userNotification = await prisma.userNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserNotificationUpdateArgs>(args: SelectSubset<T, UserNotificationUpdateArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserNotifications.
     * @param {UserNotificationDeleteManyArgs} args - Arguments to filter UserNotifications to delete.
     * @example
     * // Delete a few UserNotifications
     * const { count } = await prisma.userNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserNotificationDeleteManyArgs>(args?: SelectSubset<T, UserNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserNotifications
     * const userNotification = await prisma.userNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserNotificationUpdateManyArgs>(args: SelectSubset<T, UserNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNotifications and returns the data updated in the database.
     * @param {UserNotificationUpdateManyAndReturnArgs} args - Arguments to update many UserNotifications.
     * @example
     * // Update many UserNotifications
     * const userNotification = await prisma.userNotification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserNotifications and only return the `id`
     * const userNotificationWithIdOnly = await prisma.userNotification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserNotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, UserNotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserNotification.
     * @param {UserNotificationUpsertArgs} args - Arguments to update or create a UserNotification.
     * @example
     * // Update or create a UserNotification
     * const userNotification = await prisma.userNotification.upsert({
     *   create: {
     *     // ... data to create a UserNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserNotification we want to update
     *   }
     * })
     */
    upsert<T extends UserNotificationUpsertArgs>(args: SelectSubset<T, UserNotificationUpsertArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationCountArgs} args - Arguments to filter UserNotifications to count.
     * @example
     * // Count the number of UserNotifications
     * const count = await prisma.userNotification.count({
     *   where: {
     *     // ... the filter for the UserNotifications we want to count
     *   }
     * })
    **/
    count<T extends UserNotificationCountArgs>(
      args?: Subset<T, UserNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserNotificationAggregateArgs>(args: Subset<T, UserNotificationAggregateArgs>): Prisma.PrismaPromise<GetUserNotificationAggregateType<T>>

    /**
     * Group by UserNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserNotificationGroupByArgs['orderBy'] }
        : { orderBy?: UserNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserNotification model
   */
  readonly fields: UserNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserNotification model
   */ 
  interface UserNotificationFieldRefs {
    readonly id: FieldRef<"UserNotification", 'Int'>
    readonly createdAt: FieldRef<"UserNotification", 'DateTime'>
    readonly isRead: FieldRef<"UserNotification", 'Boolean'>
    readonly userId: FieldRef<"UserNotification", 'Int'>
    readonly notificationId: FieldRef<"UserNotification", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserNotification findUnique
   */
  export type UserNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification findUniqueOrThrow
   */
  export type UserNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification findFirst
   */
  export type UserNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNotifications.
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNotifications.
     */
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * UserNotification findFirstOrThrow
   */
  export type UserNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNotifications.
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNotifications.
     */
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * UserNotification findMany
   */
  export type UserNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotifications to fetch.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserNotifications.
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * UserNotification create
   */
  export type UserNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserNotification.
     */
    data: XOR<UserNotificationCreateInput, UserNotificationUncheckedCreateInput>
  }

  /**
   * UserNotification createMany
   */
  export type UserNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserNotifications.
     */
    data: UserNotificationCreateManyInput | UserNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserNotification createManyAndReturn
   */
  export type UserNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * The data used to create many UserNotifications.
     */
    data: UserNotificationCreateManyInput | UserNotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserNotification update
   */
  export type UserNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserNotification.
     */
    data: XOR<UserNotificationUpdateInput, UserNotificationUncheckedUpdateInput>
    /**
     * Choose, which UserNotification to update.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification updateMany
   */
  export type UserNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserNotifications.
     */
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyInput>
    /**
     * Filter which UserNotifications to update
     */
    where?: UserNotificationWhereInput
  }

  /**
   * UserNotification updateManyAndReturn
   */
  export type UserNotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * The data used to update UserNotifications.
     */
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyInput>
    /**
     * Filter which UserNotifications to update
     */
    where?: UserNotificationWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserNotification upsert
   */
  export type UserNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserNotification to update in case it exists.
     */
    where: UserNotificationWhereUniqueInput
    /**
     * In case the UserNotification found by the `where` argument doesn't exist, create a new UserNotification with this data.
     */
    create: XOR<UserNotificationCreateInput, UserNotificationUncheckedCreateInput>
    /**
     * In case the UserNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserNotificationUpdateInput, UserNotificationUncheckedUpdateInput>
  }

  /**
   * UserNotification delete
   */
  export type UserNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter which UserNotification to delete.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification deleteMany
   */
  export type UserNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNotifications to delete
     */
    where?: UserNotificationWhereInput
  }

  /**
   * UserNotification without action
   */
  export type UserNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    description: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    title: string
    description: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
    userNotification?: boolean | Notification$userNotificationArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userNotification?: boolean | Notification$userNotificationArgs<ExtArgs>
    _count?: boolean | NotificationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      userNotification: Prisma.$UserNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userNotification<T extends Notification$userNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Notification$userNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly description: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.userNotification
   */
  export type Notification$userNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    where?: UserNotificationWhereInput
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    cursor?: UserNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    orderId: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    amount: number | null
    orderId: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    invoiceNumber: string | null
    amount: number | null
    paymentMethode: string | null
    paymentStatus: $Enums.PaymentStatus | null
    snapToken: string | null
    snapRedirectUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    invoiceNumber: string | null
    amount: number | null
    paymentMethode: string | null
    paymentStatus: $Enums.PaymentStatus | null
    snapToken: string | null
    snapRedirectUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: number | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    invoiceNumber: number
    amount: number
    paymentMethode: number
    paymentStatus: number
    snapToken: number
    snapRedirectUrl: number
    createdAt: number
    updatedAt: number
    orderId: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    amount?: true
    orderId?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    amount?: true
    orderId?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    invoiceNumber?: true
    amount?: true
    paymentMethode?: true
    paymentStatus?: true
    snapToken?: true
    snapRedirectUrl?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    invoiceNumber?: true
    amount?: true
    paymentMethode?: true
    paymentStatus?: true
    snapToken?: true
    snapRedirectUrl?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    invoiceNumber?: true
    amount?: true
    paymentMethode?: true
    paymentStatus?: true
    snapToken?: true
    snapRedirectUrl?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    invoiceNumber: string
    amount: number
    paymentMethode: string | null
    paymentStatus: $Enums.PaymentStatus
    snapToken: string | null
    snapRedirectUrl: string | null
    createdAt: Date
    updatedAt: Date
    orderId: number
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    amount?: boolean
    paymentMethode?: boolean
    paymentStatus?: boolean
    snapToken?: boolean
    snapRedirectUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    amount?: boolean
    paymentMethode?: boolean
    paymentStatus?: boolean
    snapToken?: boolean
    snapRedirectUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceNumber?: boolean
    amount?: boolean
    paymentMethode?: boolean
    paymentStatus?: boolean
    snapToken?: boolean
    snapRedirectUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    invoiceNumber?: boolean
    amount?: boolean
    paymentMethode?: boolean
    paymentStatus?: boolean
    snapToken?: boolean
    snapRedirectUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceNumber" | "amount" | "paymentMethode" | "paymentStatus" | "snapToken" | "snapRedirectUrl" | "createdAt" | "updatedAt" | "orderId", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      invoiceNumber: string
      amount: number
      paymentMethode: string | null
      paymentStatus: $Enums.PaymentStatus
      snapToken: string | null
      snapRedirectUrl: string | null
      createdAt: Date
      updatedAt: Date
      orderId: number
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly invoiceNumber: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Int'>
    readonly paymentMethode: FieldRef<"Payment", 'String'>
    readonly paymentStatus: FieldRef<"Payment", 'PaymentStatus'>
    readonly snapToken: FieldRef<"Payment", 'String'>
    readonly snapRedirectUrl: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
    readonly orderId: FieldRef<"Payment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
    workHour: number | null
    userId: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
    workHour: number | null
    userId: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    checkIn: Date | null
    checkOut: Date | null
    createdAt: Date | null
    workHour: number | null
    userId: number | null
    attendanceStatus: $Enums.AttendanceStatus | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    checkIn: Date | null
    checkOut: Date | null
    createdAt: Date | null
    workHour: number | null
    userId: number | null
    attendanceStatus: $Enums.AttendanceStatus | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    checkIn: number
    checkOut: number
    createdAt: number
    workHour: number
    userId: number
    attendanceStatus: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
    workHour?: true
    userId?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
    workHour?: true
    userId?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    checkIn?: true
    checkOut?: true
    createdAt?: true
    workHour?: true
    userId?: true
    attendanceStatus?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    checkIn?: true
    checkOut?: true
    createdAt?: true
    workHour?: true
    userId?: true
    attendanceStatus?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    checkIn?: true
    checkOut?: true
    createdAt?: true
    workHour?: true
    userId?: true
    attendanceStatus?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    checkIn: Date
    checkOut: Date | null
    createdAt: Date
    workHour: number
    userId: number
    attendanceStatus: $Enums.AttendanceStatus
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checkIn?: boolean
    checkOut?: boolean
    createdAt?: boolean
    workHour?: boolean
    userId?: boolean
    attendanceStatus?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checkIn?: boolean
    checkOut?: boolean
    createdAt?: boolean
    workHour?: boolean
    userId?: boolean
    attendanceStatus?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checkIn?: boolean
    checkOut?: boolean
    createdAt?: boolean
    workHour?: boolean
    userId?: boolean
    attendanceStatus?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    checkIn?: boolean
    checkOut?: boolean
    createdAt?: boolean
    workHour?: boolean
    userId?: boolean
    attendanceStatus?: boolean
  }

  export type AttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "checkIn" | "checkOut" | "createdAt" | "workHour" | "userId" | "attendanceStatus", ExtArgs["result"]["attendance"]>
  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      checkIn: Date
      checkOut: Date | null
      createdAt: Date
      workHour: number
      userId: number
      attendanceStatus: $Enums.AttendanceStatus
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances and returns the data updated in the database.
     * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */ 
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'Int'>
    readonly checkIn: FieldRef<"Attendance", 'DateTime'>
    readonly checkOut: FieldRef<"Attendance", 'DateTime'>
    readonly createdAt: FieldRef<"Attendance", 'DateTime'>
    readonly workHour: FieldRef<"Attendance", 'Int'>
    readonly userId: FieldRef<"Attendance", 'Int'>
    readonly attendanceStatus: FieldRef<"Attendance", 'AttendanceStatus'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
  }

  /**
   * Attendance updateManyAndReturn
   */
  export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    isVerify: 'isVerify',
    role: 'role',
    avatar: 'avatar',
    createdAt: 'createdAt',
    isDelete: 'isDelete',
    resetPasswordToken: 'resetPasswordToken',
    resetPasswordExpires: 'resetPasswordExpires',
    emailVerifyToken: 'emailVerifyToken',
    authProvider: 'authProvider'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    workShift: 'workShift',
    isSuperAdmin: 'isSuperAdmin',
    station: 'station',
    userId: 'userId',
    outletId: 'outletId'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    addressLine: 'addressLine',
    city: 'city',
    isPrimary: 'isPrimary',
    latitude: 'latitude',
    longitude: 'longitude',
    isDelete: 'isDelete',
    outletId: 'outletId',
    userId: 'userId'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const OutletScalarFieldEnum: {
    id: 'id',
    outletName: 'outletName',
    outletType: 'outletType',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    updatedAt: 'updatedAt',
    isDelete: 'isDelete'
  };

  export type OutletScalarFieldEnum = (typeof OutletScalarFieldEnum)[keyof typeof OutletScalarFieldEnum]


  export const PickupOrderScalarFieldEnum: {
    id: 'id',
    pickupNumber: 'pickupNumber',
    pickupStatus: 'pickupStatus',
    distance: 'distance',
    pickupPrice: 'pickupPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isOrderCreated: 'isOrderCreated',
    userId: 'userId',
    outletId: 'outletId',
    driverId: 'driverId',
    addressId: 'addressId'
  };

  export type PickupOrderScalarFieldEnum = (typeof PickupOrderScalarFieldEnum)[keyof typeof PickupOrderScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    orderStatus: 'orderStatus',
    weight: 'weight',
    laundryPrice: 'laundryPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    pickupOrderId: 'pickupOrderId',
    isPaid: 'isPaid',
    isConfirm: 'isConfirm',
    receivedAt: 'receivedAt',
    confirmedAt: 'confirmedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    qty: 'qty',
    orderId: 'orderId',
    laundryItemId: 'laundryItemId',
    isDelete: 'isDelete'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const LaundryItemScalarFieldEnum: {
    id: 'id',
    itemName: 'itemName',
    isDelete: 'isDelete'
  };

  export type LaundryItemScalarFieldEnum = (typeof LaundryItemScalarFieldEnum)[keyof typeof LaundryItemScalarFieldEnum]


  export const DeliveryOrderScalarFieldEnum: {
    id: 'id',
    deliveryNumber: 'deliveryNumber',
    deliveryStatus: 'deliveryStatus',
    distance: 'distance',
    deliveryPrice: 'deliveryPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    driverId: 'driverId',
    orderId: 'orderId',
    addressId: 'addressId'
  };

  export type DeliveryOrderScalarFieldEnum = (typeof DeliveryOrderScalarFieldEnum)[keyof typeof DeliveryOrderScalarFieldEnum]


  export const OrderWorkerScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    workerId: 'workerId',
    station: 'station',
    isComplete: 'isComplete',
    bypassRequest: 'bypassRequest',
    bypassNote: 'bypassNote',
    bypassAccepted: 'bypassAccepted',
    bypassRejected: 'bypassRejected',
    createdAt: 'createdAt'
  };

  export type OrderWorkerScalarFieldEnum = (typeof OrderWorkerScalarFieldEnum)[keyof typeof OrderWorkerScalarFieldEnum]


  export const UserNotificationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    isRead: 'isRead',
    userId: 'userId',
    notificationId: 'notificationId'
  };

  export type UserNotificationScalarFieldEnum = (typeof UserNotificationScalarFieldEnum)[keyof typeof UserNotificationScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    invoiceNumber: 'invoiceNumber',
    amount: 'amount',
    paymentMethode: 'paymentMethode',
    paymentStatus: 'paymentStatus',
    snapToken: 'snapToken',
    snapRedirectUrl: 'snapRedirectUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    orderId: 'orderId'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    checkIn: 'checkIn',
    checkOut: 'checkOut',
    createdAt: 'createdAt',
    workHour: 'workHour',
    userId: 'userId',
    attendanceStatus: 'attendanceStatus'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'EmployeeWorkShift'
   */
  export type EnumEmployeeWorkShiftFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeWorkShift'>
    


  /**
   * Reference to a field of type 'EmployeeWorkShift[]'
   */
  export type ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeWorkShift[]'>
    


  /**
   * Reference to a field of type 'EmployeeStation'
   */
  export type EnumEmployeeStationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStation'>
    


  /**
   * Reference to a field of type 'EmployeeStation[]'
   */
  export type ListEnumEmployeeStationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStation[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'OutletType'
   */
  export type EnumOutletTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutletType'>
    


  /**
   * Reference to a field of type 'OutletType[]'
   */
  export type ListEnumOutletTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutletType[]'>
    


  /**
   * Reference to a field of type 'PickupStatus'
   */
  export type EnumPickupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PickupStatus'>
    


  /**
   * Reference to a field of type 'PickupStatus[]'
   */
  export type ListEnumPickupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PickupStatus[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'DeliveryStatus'
   */
  export type EnumDeliveryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryStatus'>
    


  /**
   * Reference to a field of type 'DeliveryStatus[]'
   */
  export type ListEnumDeliveryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'AttendanceStatus'
   */
  export type EnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus'>
    


  /**
   * Reference to a field of type 'AttendanceStatus[]'
   */
  export type ListEnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    isVerify?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    isDelete?: BoolFilter<"User"> | boolean
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerifyToken?: StringNullableFilter<"User"> | string | null
    authProvider?: StringFilter<"User"> | string
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    address?: AddressListRelationFilter
    pickupOrder?: PickupOrderListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
    userNotification?: UserNotificationListRelationFilter
    Attendance?: AttendanceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    isVerify?: SortOrder
    role?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isDelete?: SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    emailVerifyToken?: SortOrderInput | SortOrder
    authProvider?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    address?: AddressOrderByRelationAggregateInput
    pickupOrder?: PickupOrderOrderByRelationAggregateInput
    deliveryOrder?: DeliveryOrderOrderByRelationAggregateInput
    userNotification?: UserNotificationOrderByRelationAggregateInput
    Attendance?: AttendanceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    isVerify?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    isDelete?: BoolFilter<"User"> | boolean
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerifyToken?: StringNullableFilter<"User"> | string | null
    authProvider?: StringFilter<"User"> | string
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    address?: AddressListRelationFilter
    pickupOrder?: PickupOrderListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
    userNotification?: UserNotificationListRelationFilter
    Attendance?: AttendanceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    isVerify?: SortOrder
    role?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isDelete?: SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    emailVerifyToken?: SortOrderInput | SortOrder
    authProvider?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    isVerify?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"User"> | boolean
    resetPasswordToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailVerifyToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    authProvider?: StringWithAggregatesFilter<"User"> | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    workShift?: EnumEmployeeWorkShiftNullableFilter<"Employee"> | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFilter<"Employee"> | boolean
    station?: EnumEmployeeStationNullableFilter<"Employee"> | $Enums.EmployeeStation | null
    userId?: IntFilter<"Employee"> | number
    outletId?: IntNullableFilter<"Employee"> | number | null
    outlet?: XOR<OutletNullableScalarRelationFilter, OutletWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    pickupOrder?: PickupOrderListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
    orderWorker?: OrderWorkerListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    workShift?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrder
    station?: SortOrderInput | SortOrder
    userId?: SortOrder
    outletId?: SortOrderInput | SortOrder
    outlet?: OutletOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    pickupOrder?: PickupOrderOrderByRelationAggregateInput
    deliveryOrder?: DeliveryOrderOrderByRelationAggregateInput
    orderWorker?: OrderWorkerOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    workShift?: EnumEmployeeWorkShiftNullableFilter<"Employee"> | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFilter<"Employee"> | boolean
    station?: EnumEmployeeStationNullableFilter<"Employee"> | $Enums.EmployeeStation | null
    outletId?: IntNullableFilter<"Employee"> | number | null
    outlet?: XOR<OutletNullableScalarRelationFilter, OutletWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    pickupOrder?: PickupOrderListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
    orderWorker?: OrderWorkerListRelationFilter
  }, "id" | "userId">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    workShift?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrder
    station?: SortOrderInput | SortOrder
    userId?: SortOrder
    outletId?: SortOrderInput | SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    workShift?: EnumEmployeeWorkShiftNullableWithAggregatesFilter<"Employee"> | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolWithAggregatesFilter<"Employee"> | boolean
    station?: EnumEmployeeStationNullableWithAggregatesFilter<"Employee"> | $Enums.EmployeeStation | null
    userId?: IntWithAggregatesFilter<"Employee"> | number
    outletId?: IntNullableWithAggregatesFilter<"Employee"> | number | null
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: IntFilter<"Address"> | number
    addressLine?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    isPrimary?: BoolFilter<"Address"> | boolean
    latitude?: FloatNullableFilter<"Address"> | number | null
    longitude?: FloatNullableFilter<"Address"> | number | null
    isDelete?: BoolFilter<"Address"> | boolean
    outletId?: IntNullableFilter<"Address"> | number | null
    userId?: IntNullableFilter<"Address"> | number | null
    outlet?: XOR<OutletNullableScalarRelationFilter, OutletWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    pickupOrder?: PickupOrderListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    addressLine?: SortOrder
    city?: SortOrder
    isPrimary?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    isDelete?: SortOrder
    outletId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    outlet?: OutletOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    pickupOrder?: PickupOrderOrderByRelationAggregateInput
    deliveryOrder?: DeliveryOrderOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    addressLine?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    isPrimary?: BoolFilter<"Address"> | boolean
    latitude?: FloatNullableFilter<"Address"> | number | null
    longitude?: FloatNullableFilter<"Address"> | number | null
    isDelete?: BoolFilter<"Address"> | boolean
    outletId?: IntNullableFilter<"Address"> | number | null
    userId?: IntNullableFilter<"Address"> | number | null
    outlet?: XOR<OutletNullableScalarRelationFilter, OutletWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    pickupOrder?: PickupOrderListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    addressLine?: SortOrder
    city?: SortOrder
    isPrimary?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    isDelete?: SortOrder
    outletId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Address"> | number
    addressLine?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    isPrimary?: BoolWithAggregatesFilter<"Address"> | boolean
    latitude?: FloatNullableWithAggregatesFilter<"Address"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Address"> | number | null
    isDelete?: BoolWithAggregatesFilter<"Address"> | boolean
    outletId?: IntNullableWithAggregatesFilter<"Address"> | number | null
    userId?: IntNullableWithAggregatesFilter<"Address"> | number | null
  }

  export type OutletWhereInput = {
    AND?: OutletWhereInput | OutletWhereInput[]
    OR?: OutletWhereInput[]
    NOT?: OutletWhereInput | OutletWhereInput[]
    id?: IntFilter<"Outlet"> | number
    outletName?: StringFilter<"Outlet"> | string
    outletType?: EnumOutletTypeFilter<"Outlet"> | $Enums.OutletType
    createdAt?: DateTimeFilter<"Outlet"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Outlet"> | Date | string | null
    updatedAt?: DateTimeFilter<"Outlet"> | Date | string
    isDelete?: BoolFilter<"Outlet"> | boolean
    employee?: EmployeeListRelationFilter
    address?: AddressListRelationFilter
    pickupOrder?: PickupOrderListRelationFilter
  }

  export type OutletOrderByWithRelationInput = {
    id?: SortOrder
    outletName?: SortOrder
    outletType?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    employee?: EmployeeOrderByRelationAggregateInput
    address?: AddressOrderByRelationAggregateInput
    pickupOrder?: PickupOrderOrderByRelationAggregateInput
  }

  export type OutletWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OutletWhereInput | OutletWhereInput[]
    OR?: OutletWhereInput[]
    NOT?: OutletWhereInput | OutletWhereInput[]
    outletName?: StringFilter<"Outlet"> | string
    outletType?: EnumOutletTypeFilter<"Outlet"> | $Enums.OutletType
    createdAt?: DateTimeFilter<"Outlet"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Outlet"> | Date | string | null
    updatedAt?: DateTimeFilter<"Outlet"> | Date | string
    isDelete?: BoolFilter<"Outlet"> | boolean
    employee?: EmployeeListRelationFilter
    address?: AddressListRelationFilter
    pickupOrder?: PickupOrderListRelationFilter
  }, "id">

  export type OutletOrderByWithAggregationInput = {
    id?: SortOrder
    outletName?: SortOrder
    outletType?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
    _count?: OutletCountOrderByAggregateInput
    _avg?: OutletAvgOrderByAggregateInput
    _max?: OutletMaxOrderByAggregateInput
    _min?: OutletMinOrderByAggregateInput
    _sum?: OutletSumOrderByAggregateInput
  }

  export type OutletScalarWhereWithAggregatesInput = {
    AND?: OutletScalarWhereWithAggregatesInput | OutletScalarWhereWithAggregatesInput[]
    OR?: OutletScalarWhereWithAggregatesInput[]
    NOT?: OutletScalarWhereWithAggregatesInput | OutletScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Outlet"> | number
    outletName?: StringWithAggregatesFilter<"Outlet"> | string
    outletType?: EnumOutletTypeWithAggregatesFilter<"Outlet"> | $Enums.OutletType
    createdAt?: DateTimeWithAggregatesFilter<"Outlet"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Outlet"> | Date | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Outlet"> | Date | string
    isDelete?: BoolWithAggregatesFilter<"Outlet"> | boolean
  }

  export type PickupOrderWhereInput = {
    AND?: PickupOrderWhereInput | PickupOrderWhereInput[]
    OR?: PickupOrderWhereInput[]
    NOT?: PickupOrderWhereInput | PickupOrderWhereInput[]
    id?: IntFilter<"PickupOrder"> | number
    pickupNumber?: StringFilter<"PickupOrder"> | string
    pickupStatus?: EnumPickupStatusFilter<"PickupOrder"> | $Enums.PickupStatus
    distance?: IntFilter<"PickupOrder"> | number
    pickupPrice?: IntFilter<"PickupOrder"> | number
    createdAt?: DateTimeFilter<"PickupOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PickupOrder"> | Date | string
    isOrderCreated?: BoolFilter<"PickupOrder"> | boolean
    userId?: IntFilter<"PickupOrder"> | number
    outletId?: IntNullableFilter<"PickupOrder"> | number | null
    driverId?: IntNullableFilter<"PickupOrder"> | number | null
    addressId?: IntNullableFilter<"PickupOrder"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    outlet?: XOR<OutletNullableScalarRelationFilter, OutletWhereInput> | null
    order?: OrderListRelationFilter
    driver?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    address?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
  }

  export type PickupOrderOrderByWithRelationInput = {
    id?: SortOrder
    pickupNumber?: SortOrder
    pickupStatus?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isOrderCreated?: SortOrder
    userId?: SortOrder
    outletId?: SortOrderInput | SortOrder
    driverId?: SortOrderInput | SortOrder
    addressId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    outlet?: OutletOrderByWithRelationInput
    order?: OrderOrderByRelationAggregateInput
    driver?: EmployeeOrderByWithRelationInput
    address?: AddressOrderByWithRelationInput
  }

  export type PickupOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    pickupNumber?: string
    AND?: PickupOrderWhereInput | PickupOrderWhereInput[]
    OR?: PickupOrderWhereInput[]
    NOT?: PickupOrderWhereInput | PickupOrderWhereInput[]
    pickupStatus?: EnumPickupStatusFilter<"PickupOrder"> | $Enums.PickupStatus
    distance?: IntFilter<"PickupOrder"> | number
    pickupPrice?: IntFilter<"PickupOrder"> | number
    createdAt?: DateTimeFilter<"PickupOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PickupOrder"> | Date | string
    isOrderCreated?: BoolFilter<"PickupOrder"> | boolean
    userId?: IntFilter<"PickupOrder"> | number
    outletId?: IntNullableFilter<"PickupOrder"> | number | null
    driverId?: IntNullableFilter<"PickupOrder"> | number | null
    addressId?: IntNullableFilter<"PickupOrder"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    outlet?: XOR<OutletNullableScalarRelationFilter, OutletWhereInput> | null
    order?: OrderListRelationFilter
    driver?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    address?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
  }, "id" | "pickupNumber">

  export type PickupOrderOrderByWithAggregationInput = {
    id?: SortOrder
    pickupNumber?: SortOrder
    pickupStatus?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isOrderCreated?: SortOrder
    userId?: SortOrder
    outletId?: SortOrderInput | SortOrder
    driverId?: SortOrderInput | SortOrder
    addressId?: SortOrderInput | SortOrder
    _count?: PickupOrderCountOrderByAggregateInput
    _avg?: PickupOrderAvgOrderByAggregateInput
    _max?: PickupOrderMaxOrderByAggregateInput
    _min?: PickupOrderMinOrderByAggregateInput
    _sum?: PickupOrderSumOrderByAggregateInput
  }

  export type PickupOrderScalarWhereWithAggregatesInput = {
    AND?: PickupOrderScalarWhereWithAggregatesInput | PickupOrderScalarWhereWithAggregatesInput[]
    OR?: PickupOrderScalarWhereWithAggregatesInput[]
    NOT?: PickupOrderScalarWhereWithAggregatesInput | PickupOrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PickupOrder"> | number
    pickupNumber?: StringWithAggregatesFilter<"PickupOrder"> | string
    pickupStatus?: EnumPickupStatusWithAggregatesFilter<"PickupOrder"> | $Enums.PickupStatus
    distance?: IntWithAggregatesFilter<"PickupOrder"> | number
    pickupPrice?: IntWithAggregatesFilter<"PickupOrder"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PickupOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PickupOrder"> | Date | string
    isOrderCreated?: BoolWithAggregatesFilter<"PickupOrder"> | boolean
    userId?: IntWithAggregatesFilter<"PickupOrder"> | number
    outletId?: IntNullableWithAggregatesFilter<"PickupOrder"> | number | null
    driverId?: IntNullableWithAggregatesFilter<"PickupOrder"> | number | null
    addressId?: IntNullableWithAggregatesFilter<"PickupOrder"> | number | null
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    orderNumber?: StringFilter<"Order"> | string
    orderStatus?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    weight?: IntNullableFilter<"Order"> | number | null
    laundryPrice?: IntNullableFilter<"Order"> | number | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    pickupOrderId?: IntFilter<"Order"> | number
    isPaid?: BoolFilter<"Order"> | boolean
    isConfirm?: BoolFilter<"Order"> | boolean
    receivedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    confirmedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    pickupOrder?: XOR<PickupOrderScalarRelationFilter, PickupOrderWhereInput>
    orderItem?: OrderItemListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
    orderWorker?: OrderWorkerListRelationFilter
    payment?: PaymentListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    orderStatus?: SortOrder
    weight?: SortOrderInput | SortOrder
    laundryPrice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickupOrderId?: SortOrder
    isPaid?: SortOrder
    isConfirm?: SortOrder
    receivedAt?: SortOrderInput | SortOrder
    confirmedAt?: SortOrderInput | SortOrder
    pickupOrder?: PickupOrderOrderByWithRelationInput
    orderItem?: OrderItemOrderByRelationAggregateInput
    deliveryOrder?: DeliveryOrderOrderByRelationAggregateInput
    orderWorker?: OrderWorkerOrderByRelationAggregateInput
    payment?: PaymentOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    pickupOrderId?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    orderNumber?: StringFilter<"Order"> | string
    orderStatus?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    weight?: IntNullableFilter<"Order"> | number | null
    laundryPrice?: IntNullableFilter<"Order"> | number | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    isPaid?: BoolFilter<"Order"> | boolean
    isConfirm?: BoolFilter<"Order"> | boolean
    receivedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    confirmedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    pickupOrder?: XOR<PickupOrderScalarRelationFilter, PickupOrderWhereInput>
    orderItem?: OrderItemListRelationFilter
    deliveryOrder?: DeliveryOrderListRelationFilter
    orderWorker?: OrderWorkerListRelationFilter
    payment?: PaymentListRelationFilter
  }, "id" | "pickupOrderId">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    orderStatus?: SortOrder
    weight?: SortOrderInput | SortOrder
    laundryPrice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickupOrderId?: SortOrder
    isPaid?: SortOrder
    isConfirm?: SortOrder
    receivedAt?: SortOrderInput | SortOrder
    confirmedAt?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    orderNumber?: StringWithAggregatesFilter<"Order"> | string
    orderStatus?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    weight?: IntNullableWithAggregatesFilter<"Order"> | number | null
    laundryPrice?: IntNullableWithAggregatesFilter<"Order"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    pickupOrderId?: IntWithAggregatesFilter<"Order"> | number
    isPaid?: BoolWithAggregatesFilter<"Order"> | boolean
    isConfirm?: BoolWithAggregatesFilter<"Order"> | boolean
    receivedAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    confirmedAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    qty?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    laundryItemId?: IntFilter<"OrderItem"> | number
    isDelete?: BoolFilter<"OrderItem"> | boolean
    laundryItem?: XOR<LaundryItemScalarRelationFilter, LaundryItemWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
    isDelete?: SortOrder
    laundryItem?: LaundryItemOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    qty?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    laundryItemId?: IntFilter<"OrderItem"> | number
    isDelete?: BoolFilter<"OrderItem"> | boolean
    laundryItem?: XOR<LaundryItemScalarRelationFilter, LaundryItemWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
    isDelete?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderItem"> | number
    qty?: IntWithAggregatesFilter<"OrderItem"> | number
    orderId?: IntWithAggregatesFilter<"OrderItem"> | number
    laundryItemId?: IntWithAggregatesFilter<"OrderItem"> | number
    isDelete?: BoolWithAggregatesFilter<"OrderItem"> | boolean
  }

  export type LaundryItemWhereInput = {
    AND?: LaundryItemWhereInput | LaundryItemWhereInput[]
    OR?: LaundryItemWhereInput[]
    NOT?: LaundryItemWhereInput | LaundryItemWhereInput[]
    id?: IntFilter<"LaundryItem"> | number
    itemName?: StringFilter<"LaundryItem"> | string
    isDelete?: BoolFilter<"LaundryItem"> | boolean
    orderItem?: OrderItemListRelationFilter
  }

  export type LaundryItemOrderByWithRelationInput = {
    id?: SortOrder
    itemName?: SortOrder
    isDelete?: SortOrder
    orderItem?: OrderItemOrderByRelationAggregateInput
  }

  export type LaundryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LaundryItemWhereInput | LaundryItemWhereInput[]
    OR?: LaundryItemWhereInput[]
    NOT?: LaundryItemWhereInput | LaundryItemWhereInput[]
    itemName?: StringFilter<"LaundryItem"> | string
    isDelete?: BoolFilter<"LaundryItem"> | boolean
    orderItem?: OrderItemListRelationFilter
  }, "id">

  export type LaundryItemOrderByWithAggregationInput = {
    id?: SortOrder
    itemName?: SortOrder
    isDelete?: SortOrder
    _count?: LaundryItemCountOrderByAggregateInput
    _avg?: LaundryItemAvgOrderByAggregateInput
    _max?: LaundryItemMaxOrderByAggregateInput
    _min?: LaundryItemMinOrderByAggregateInput
    _sum?: LaundryItemSumOrderByAggregateInput
  }

  export type LaundryItemScalarWhereWithAggregatesInput = {
    AND?: LaundryItemScalarWhereWithAggregatesInput | LaundryItemScalarWhereWithAggregatesInput[]
    OR?: LaundryItemScalarWhereWithAggregatesInput[]
    NOT?: LaundryItemScalarWhereWithAggregatesInput | LaundryItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LaundryItem"> | number
    itemName?: StringWithAggregatesFilter<"LaundryItem"> | string
    isDelete?: BoolWithAggregatesFilter<"LaundryItem"> | boolean
  }

  export type DeliveryOrderWhereInput = {
    AND?: DeliveryOrderWhereInput | DeliveryOrderWhereInput[]
    OR?: DeliveryOrderWhereInput[]
    NOT?: DeliveryOrderWhereInput | DeliveryOrderWhereInput[]
    id?: IntFilter<"DeliveryOrder"> | number
    deliveryNumber?: StringFilter<"DeliveryOrder"> | string
    deliveryStatus?: EnumDeliveryStatusFilter<"DeliveryOrder"> | $Enums.DeliveryStatus
    distance?: IntFilter<"DeliveryOrder"> | number
    deliveryPrice?: IntFilter<"DeliveryOrder"> | number
    createdAt?: DateTimeFilter<"DeliveryOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DeliveryOrder"> | Date | string
    userId?: IntFilter<"DeliveryOrder"> | number
    driverId?: IntNullableFilter<"DeliveryOrder"> | number | null
    orderId?: IntFilter<"DeliveryOrder"> | number
    addressId?: IntNullableFilter<"DeliveryOrder"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    driver?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    address?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
  }

  export type DeliveryOrderOrderByWithRelationInput = {
    id?: SortOrder
    deliveryNumber?: SortOrder
    deliveryStatus?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    driverId?: SortOrderInput | SortOrder
    orderId?: SortOrder
    addressId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    driver?: EmployeeOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    address?: AddressOrderByWithRelationInput
  }

  export type DeliveryOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    deliveryNumber?: string
    orderId?: number
    AND?: DeliveryOrderWhereInput | DeliveryOrderWhereInput[]
    OR?: DeliveryOrderWhereInput[]
    NOT?: DeliveryOrderWhereInput | DeliveryOrderWhereInput[]
    deliveryStatus?: EnumDeliveryStatusFilter<"DeliveryOrder"> | $Enums.DeliveryStatus
    distance?: IntFilter<"DeliveryOrder"> | number
    deliveryPrice?: IntFilter<"DeliveryOrder"> | number
    createdAt?: DateTimeFilter<"DeliveryOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DeliveryOrder"> | Date | string
    userId?: IntFilter<"DeliveryOrder"> | number
    driverId?: IntNullableFilter<"DeliveryOrder"> | number | null
    addressId?: IntNullableFilter<"DeliveryOrder"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    driver?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    address?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
  }, "id" | "deliveryNumber" | "orderId">

  export type DeliveryOrderOrderByWithAggregationInput = {
    id?: SortOrder
    deliveryNumber?: SortOrder
    deliveryStatus?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    driverId?: SortOrderInput | SortOrder
    orderId?: SortOrder
    addressId?: SortOrderInput | SortOrder
    _count?: DeliveryOrderCountOrderByAggregateInput
    _avg?: DeliveryOrderAvgOrderByAggregateInput
    _max?: DeliveryOrderMaxOrderByAggregateInput
    _min?: DeliveryOrderMinOrderByAggregateInput
    _sum?: DeliveryOrderSumOrderByAggregateInput
  }

  export type DeliveryOrderScalarWhereWithAggregatesInput = {
    AND?: DeliveryOrderScalarWhereWithAggregatesInput | DeliveryOrderScalarWhereWithAggregatesInput[]
    OR?: DeliveryOrderScalarWhereWithAggregatesInput[]
    NOT?: DeliveryOrderScalarWhereWithAggregatesInput | DeliveryOrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DeliveryOrder"> | number
    deliveryNumber?: StringWithAggregatesFilter<"DeliveryOrder"> | string
    deliveryStatus?: EnumDeliveryStatusWithAggregatesFilter<"DeliveryOrder"> | $Enums.DeliveryStatus
    distance?: IntWithAggregatesFilter<"DeliveryOrder"> | number
    deliveryPrice?: IntWithAggregatesFilter<"DeliveryOrder"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DeliveryOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DeliveryOrder"> | Date | string
    userId?: IntWithAggregatesFilter<"DeliveryOrder"> | number
    driverId?: IntNullableWithAggregatesFilter<"DeliveryOrder"> | number | null
    orderId?: IntWithAggregatesFilter<"DeliveryOrder"> | number
    addressId?: IntNullableWithAggregatesFilter<"DeliveryOrder"> | number | null
  }

  export type OrderWorkerWhereInput = {
    AND?: OrderWorkerWhereInput | OrderWorkerWhereInput[]
    OR?: OrderWorkerWhereInput[]
    NOT?: OrderWorkerWhereInput | OrderWorkerWhereInput[]
    id?: IntFilter<"OrderWorker"> | number
    orderId?: IntFilter<"OrderWorker"> | number
    workerId?: IntFilter<"OrderWorker"> | number
    station?: EnumEmployeeStationNullableFilter<"OrderWorker"> | $Enums.EmployeeStation | null
    isComplete?: BoolFilter<"OrderWorker"> | boolean
    bypassRequest?: BoolFilter<"OrderWorker"> | boolean
    bypassNote?: StringNullableFilter<"OrderWorker"> | string | null
    bypassAccepted?: BoolFilter<"OrderWorker"> | boolean
    bypassRejected?: BoolFilter<"OrderWorker"> | boolean
    createdAt?: DateTimeFilter<"OrderWorker"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    worker?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type OrderWorkerOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
    station?: SortOrderInput | SortOrder
    isComplete?: SortOrder
    bypassRequest?: SortOrder
    bypassNote?: SortOrderInput | SortOrder
    bypassAccepted?: SortOrder
    bypassRejected?: SortOrder
    createdAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    worker?: EmployeeOrderByWithRelationInput
  }

  export type OrderWorkerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWorkerWhereInput | OrderWorkerWhereInput[]
    OR?: OrderWorkerWhereInput[]
    NOT?: OrderWorkerWhereInput | OrderWorkerWhereInput[]
    orderId?: IntFilter<"OrderWorker"> | number
    workerId?: IntFilter<"OrderWorker"> | number
    station?: EnumEmployeeStationNullableFilter<"OrderWorker"> | $Enums.EmployeeStation | null
    isComplete?: BoolFilter<"OrderWorker"> | boolean
    bypassRequest?: BoolFilter<"OrderWorker"> | boolean
    bypassNote?: StringNullableFilter<"OrderWorker"> | string | null
    bypassAccepted?: BoolFilter<"OrderWorker"> | boolean
    bypassRejected?: BoolFilter<"OrderWorker"> | boolean
    createdAt?: DateTimeFilter<"OrderWorker"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    worker?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type OrderWorkerOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
    station?: SortOrderInput | SortOrder
    isComplete?: SortOrder
    bypassRequest?: SortOrder
    bypassNote?: SortOrderInput | SortOrder
    bypassAccepted?: SortOrder
    bypassRejected?: SortOrder
    createdAt?: SortOrder
    _count?: OrderWorkerCountOrderByAggregateInput
    _avg?: OrderWorkerAvgOrderByAggregateInput
    _max?: OrderWorkerMaxOrderByAggregateInput
    _min?: OrderWorkerMinOrderByAggregateInput
    _sum?: OrderWorkerSumOrderByAggregateInput
  }

  export type OrderWorkerScalarWhereWithAggregatesInput = {
    AND?: OrderWorkerScalarWhereWithAggregatesInput | OrderWorkerScalarWhereWithAggregatesInput[]
    OR?: OrderWorkerScalarWhereWithAggregatesInput[]
    NOT?: OrderWorkerScalarWhereWithAggregatesInput | OrderWorkerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderWorker"> | number
    orderId?: IntWithAggregatesFilter<"OrderWorker"> | number
    workerId?: IntWithAggregatesFilter<"OrderWorker"> | number
    station?: EnumEmployeeStationNullableWithAggregatesFilter<"OrderWorker"> | $Enums.EmployeeStation | null
    isComplete?: BoolWithAggregatesFilter<"OrderWorker"> | boolean
    bypassRequest?: BoolWithAggregatesFilter<"OrderWorker"> | boolean
    bypassNote?: StringNullableWithAggregatesFilter<"OrderWorker"> | string | null
    bypassAccepted?: BoolWithAggregatesFilter<"OrderWorker"> | boolean
    bypassRejected?: BoolWithAggregatesFilter<"OrderWorker"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"OrderWorker"> | Date | string
  }

  export type UserNotificationWhereInput = {
    AND?: UserNotificationWhereInput | UserNotificationWhereInput[]
    OR?: UserNotificationWhereInput[]
    NOT?: UserNotificationWhereInput | UserNotificationWhereInput[]
    id?: IntFilter<"UserNotification"> | number
    createdAt?: DateTimeFilter<"UserNotification"> | Date | string
    isRead?: BoolFilter<"UserNotification"> | boolean
    userId?: IntFilter<"UserNotification"> | number
    notificationId?: IntFilter<"UserNotification"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
  }

  export type UserNotificationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
    user?: UserOrderByWithRelationInput
    notification?: NotificationOrderByWithRelationInput
  }

  export type UserNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserNotificationWhereInput | UserNotificationWhereInput[]
    OR?: UserNotificationWhereInput[]
    NOT?: UserNotificationWhereInput | UserNotificationWhereInput[]
    createdAt?: DateTimeFilter<"UserNotification"> | Date | string
    isRead?: BoolFilter<"UserNotification"> | boolean
    userId?: IntFilter<"UserNotification"> | number
    notificationId?: IntFilter<"UserNotification"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notification?: XOR<NotificationScalarRelationFilter, NotificationWhereInput>
  }, "id">

  export type UserNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
    _count?: UserNotificationCountOrderByAggregateInput
    _avg?: UserNotificationAvgOrderByAggregateInput
    _max?: UserNotificationMaxOrderByAggregateInput
    _min?: UserNotificationMinOrderByAggregateInput
    _sum?: UserNotificationSumOrderByAggregateInput
  }

  export type UserNotificationScalarWhereWithAggregatesInput = {
    AND?: UserNotificationScalarWhereWithAggregatesInput | UserNotificationScalarWhereWithAggregatesInput[]
    OR?: UserNotificationScalarWhereWithAggregatesInput[]
    NOT?: UserNotificationScalarWhereWithAggregatesInput | UserNotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserNotification"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserNotification"> | Date | string
    isRead?: BoolWithAggregatesFilter<"UserNotification"> | boolean
    userId?: IntWithAggregatesFilter<"UserNotification"> | number
    notificationId?: IntWithAggregatesFilter<"UserNotification"> | number
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    description?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userNotification?: UserNotificationListRelationFilter
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    userNotification?: UserNotificationOrderByRelationAggregateInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    description?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userNotification?: UserNotificationListRelationFilter
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    title?: StringWithAggregatesFilter<"Notification"> | string
    description?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    invoiceNumber?: StringFilter<"Payment"> | string
    amount?: IntFilter<"Payment"> | number
    paymentMethode?: StringNullableFilter<"Payment"> | string | null
    paymentStatus?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    snapToken?: StringNullableFilter<"Payment"> | string | null
    snapRedirectUrl?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    orderId?: IntFilter<"Payment"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    amount?: SortOrder
    paymentMethode?: SortOrderInput | SortOrder
    paymentStatus?: SortOrder
    snapToken?: SortOrderInput | SortOrder
    snapRedirectUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
    order?: OrderOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    invoiceNumber?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    amount?: IntFilter<"Payment"> | number
    paymentMethode?: StringNullableFilter<"Payment"> | string | null
    paymentStatus?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    snapToken?: StringNullableFilter<"Payment"> | string | null
    snapRedirectUrl?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    orderId?: IntFilter<"Payment"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id" | "invoiceNumber">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    amount?: SortOrder
    paymentMethode?: SortOrderInput | SortOrder
    paymentStatus?: SortOrder
    snapToken?: SortOrderInput | SortOrder
    snapRedirectUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    invoiceNumber?: StringWithAggregatesFilter<"Payment"> | string
    amount?: IntWithAggregatesFilter<"Payment"> | number
    paymentMethode?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    snapToken?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    snapRedirectUrl?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    orderId?: IntWithAggregatesFilter<"Payment"> | number
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: IntFilter<"Attendance"> | number
    checkIn?: DateTimeFilter<"Attendance"> | Date | string
    checkOut?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    workHour?: IntFilter<"Attendance"> | number
    userId?: IntFilter<"Attendance"> | number
    attendanceStatus?: EnumAttendanceStatusFilter<"Attendance"> | $Enums.AttendanceStatus
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
    attendanceStatus?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    checkIn?: DateTimeFilter<"Attendance"> | Date | string
    checkOut?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    workHour?: IntFilter<"Attendance"> | number
    userId?: IntFilter<"Attendance"> | number
    attendanceStatus?: EnumAttendanceStatusFilter<"Attendance"> | $Enums.AttendanceStatus
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
    attendanceStatus?: SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _avg?: AttendanceAvgOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
    _sum?: AttendanceSumOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attendance"> | number
    checkIn?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    checkOut?: DateTimeNullableWithAggregatesFilter<"Attendance"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    workHour?: IntWithAggregatesFilter<"Attendance"> | number
    userId?: IntWithAggregatesFilter<"Attendance"> | number
    attendanceStatus?: EnumAttendanceStatusWithAggregatesFilter<"Attendance"> | $Enums.AttendanceStatus
  }

  export type UserCreateInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationCreateNestedManyWithoutUserInput
    Attendance?: AttendanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
  }

  export type UserUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateInput = {
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    outlet?: OutletCreateNestedOneWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
    outletId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeUpdateInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    outlet?: OutletUpdateOneWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
    outletId?: number | null
  }

  export type EmployeeUpdateManyMutationInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AddressCreateInput = {
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outlet?: OutletCreateNestedOneWithoutAddressInput
    user?: UserCreateNestedOneWithoutAddressInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutAddressInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outletId?: number | null
    userId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutAddressInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outlet?: OutletUpdateOneWithoutAddressNestedInput
    user?: UserUpdateOneWithoutAddressNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outletId?: number | null
    userId?: number | null
  }

  export type AddressUpdateManyMutationInput = {
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OutletCreateInput = {
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    employee?: EmployeeCreateNestedManyWithoutOutletInput
    address?: AddressCreateNestedManyWithoutOutletInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateInput = {
    id?: number
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    employee?: EmployeeUncheckedCreateNestedManyWithoutOutletInput
    address?: AddressUncheckedCreateNestedManyWithoutOutletInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletUpdateInput = {
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateManyWithoutOutletNestedInput
    address?: AddressUpdateManyWithoutOutletNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUncheckedUpdateManyWithoutOutletNestedInput
    address?: AddressUncheckedUpdateManyWithoutOutletNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type OutletCreateManyInput = {
    id?: number
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
  }

  export type OutletUpdateManyMutationInput = {
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OutletUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PickupOrderCreateInput = {
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    user: UserCreateNestedOneWithoutPickupOrderInput
    outlet?: OutletCreateNestedOneWithoutPickupOrderInput
    order?: OrderCreateNestedManyWithoutPickupOrderInput
    driver?: EmployeeCreateNestedOneWithoutPickupOrderInput
    address?: AddressCreateNestedOneWithoutPickupOrderInput
  }

  export type PickupOrderUncheckedCreateInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    driverId?: number | null
    addressId?: number | null
    order?: OrderUncheckedCreateNestedManyWithoutPickupOrderInput
  }

  export type PickupOrderUpdateInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPickupOrderNestedInput
    outlet?: OutletUpdateOneWithoutPickupOrderNestedInput
    order?: OrderUpdateManyWithoutPickupOrderNestedInput
    driver?: EmployeeUpdateOneWithoutPickupOrderNestedInput
    address?: AddressUpdateOneWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUncheckedUpdateManyWithoutPickupOrderNestedInput
  }

  export type PickupOrderCreateManyInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    driverId?: number | null
    addressId?: number | null
  }

  export type PickupOrderUpdateManyMutationInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PickupOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderCreateInput = {
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    pickupOrder: PickupOrderCreateNestedOneWithoutOrderInput
    orderItem?: OrderItemCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pickupOrderId: number
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupOrder?: PickupOrderUpdateOneRequiredWithoutOrderNestedInput
    orderItem?: OrderItemUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickupOrderId?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItem?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pickupOrderId: number
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
  }

  export type OrderUpdateManyMutationInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickupOrderId?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderItemCreateInput = {
    qty: number
    isDelete?: boolean
    laundryItem: LaundryItemCreateNestedOneWithoutOrderItemInput
    order: OrderCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    qty: number
    orderId: number
    laundryItemId: number
    isDelete?: boolean
  }

  export type OrderItemUpdateInput = {
    qty?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    laundryItem?: LaundryItemUpdateOneRequiredWithoutOrderItemNestedInput
    order?: OrderUpdateOneRequiredWithoutOrderItemNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    laundryItemId?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemCreateManyInput = {
    id?: number
    qty: number
    orderId: number
    laundryItemId: number
    isDelete?: boolean
  }

  export type OrderItemUpdateManyMutationInput = {
    qty?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    laundryItemId?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LaundryItemCreateInput = {
    itemName: string
    isDelete?: boolean
    orderItem?: OrderItemCreateNestedManyWithoutLaundryItemInput
  }

  export type LaundryItemUncheckedCreateInput = {
    id?: number
    itemName: string
    isDelete?: boolean
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutLaundryItemInput
  }

  export type LaundryItemUpdateInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    orderItem?: OrderItemUpdateManyWithoutLaundryItemNestedInput
  }

  export type LaundryItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    orderItem?: OrderItemUncheckedUpdateManyWithoutLaundryItemNestedInput
  }

  export type LaundryItemCreateManyInput = {
    id?: number
    itemName: string
    isDelete?: boolean
  }

  export type LaundryItemUpdateManyMutationInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LaundryItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DeliveryOrderCreateInput = {
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDeliveryOrderInput
    driver?: EmployeeCreateNestedOneWithoutDeliveryOrderInput
    order: OrderCreateNestedOneWithoutDeliveryOrderInput
    address?: AddressCreateNestedOneWithoutDeliveryOrderInput
  }

  export type DeliveryOrderUncheckedCreateInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    driverId?: number | null
    orderId: number
    addressId?: number | null
  }

  export type DeliveryOrderUpdateInput = {
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDeliveryOrderNestedInput
    driver?: EmployeeUpdateOneWithoutDeliveryOrderNestedInput
    order?: OrderUpdateOneRequiredWithoutDeliveryOrderNestedInput
    address?: AddressUpdateOneWithoutDeliveryOrderNestedInput
  }

  export type DeliveryOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderCreateManyInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    driverId?: number | null
    orderId: number
    addressId?: number | null
  }

  export type DeliveryOrderUpdateManyMutationInput = {
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveryOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderWorkerCreateInput = {
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderWorkerInput
    worker: EmployeeCreateNestedOneWithoutOrderWorkerInput
  }

  export type OrderWorkerUncheckedCreateInput = {
    id?: number
    orderId: number
    workerId: number
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
  }

  export type OrderWorkerUpdateInput = {
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderWorkerNestedInput
    worker?: EmployeeUpdateOneRequiredWithoutOrderWorkerNestedInput
  }

  export type OrderWorkerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    workerId?: IntFieldUpdateOperationsInput | number
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderWorkerCreateManyInput = {
    id?: number
    orderId: number
    workerId: number
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
  }

  export type OrderWorkerUpdateManyMutationInput = {
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderWorkerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    workerId?: IntFieldUpdateOperationsInput | number
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationCreateInput = {
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutUserNotificationInput
    notification: NotificationCreateNestedOneWithoutUserNotificationInput
  }

  export type UserNotificationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    isRead?: boolean
    userId: number
    notificationId: number
  }

  export type UserNotificationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserNotificationNestedInput
    notification?: NotificationUpdateOneRequiredWithoutUserNotificationNestedInput
  }

  export type UserNotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    notificationId?: IntFieldUpdateOperationsInput | number
  }

  export type UserNotificationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    isRead?: boolean
    userId: number
    notificationId: number
  }

  export type UserNotificationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserNotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    notificationId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    title: string
    description: string
    createdAt?: Date | string
    userNotification?: UserNotificationCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutNotificationInput
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userNotification?: UserNotificationUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userNotification?: UserNotificationUncheckedUpdateManyWithoutNotificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    invoiceNumber: string
    amount: number
    paymentMethode?: string | null
    paymentStatus?: $Enums.PaymentStatus
    snapToken?: string | null
    snapRedirectUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    invoiceNumber: string
    amount: number
    paymentMethode?: string | null
    paymentStatus?: $Enums.PaymentStatus
    snapToken?: string | null
    snapRedirectUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId: number
  }

  export type PaymentUpdateInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentCreateManyInput = {
    id?: number
    invoiceNumber: string
    amount: number
    paymentMethode?: string | null
    paymentStatus?: $Enums.PaymentStatus
    snapToken?: string | null
    snapRedirectUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId: number
  }

  export type PaymentUpdateManyMutationInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceCreateInput = {
    checkIn?: Date | string
    checkOut?: Date | string | null
    createdAt?: Date | string
    workHour: number
    attendanceStatus?: $Enums.AttendanceStatus
    user: UserCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: number
    checkIn?: Date | string
    checkOut?: Date | string | null
    createdAt?: Date | string
    workHour: number
    userId: number
    attendanceStatus?: $Enums.AttendanceStatus
  }

  export type AttendanceUpdateInput = {
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    user?: UserUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  }

  export type AttendanceCreateManyInput = {
    id?: number
    checkIn?: Date | string
    checkOut?: Date | string | null
    createdAt?: Date | string
    workHour: number
    userId: number
    attendanceStatus?: $Enums.AttendanceStatus
  }

  export type AttendanceUpdateManyMutationInput = {
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EmployeeNullableScalarRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type PickupOrderListRelationFilter = {
    every?: PickupOrderWhereInput
    some?: PickupOrderWhereInput
    none?: PickupOrderWhereInput
  }

  export type DeliveryOrderListRelationFilter = {
    every?: DeliveryOrderWhereInput
    some?: DeliveryOrderWhereInput
    none?: DeliveryOrderWhereInput
  }

  export type UserNotificationListRelationFilter = {
    every?: UserNotificationWhereInput
    some?: UserNotificationWhereInput
    none?: UserNotificationWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PickupOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeliveryOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerify?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    isDelete?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    emailVerifyToken?: SortOrder
    authProvider?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerify?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    isDelete?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    emailVerifyToken?: SortOrder
    authProvider?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isVerify?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    isDelete?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    emailVerifyToken?: SortOrder
    authProvider?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumEmployeeWorkShiftNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeWorkShift | EnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel> | $Enums.EmployeeWorkShift | null
  }

  export type EnumEmployeeStationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStation | EnumEmployeeStationFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeStationNullableFilter<$PrismaModel> | $Enums.EmployeeStation | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type OutletNullableScalarRelationFilter = {
    is?: OutletWhereInput | null
    isNot?: OutletWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderWorkerListRelationFilter = {
    every?: OrderWorkerWhereInput
    some?: OrderWorkerWhereInput
    none?: OrderWorkerWhereInput
  }

  export type OrderWorkerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    workShift?: SortOrder
    isSuperAdmin?: SortOrder
    station?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    workShift?: SortOrder
    isSuperAdmin?: SortOrder
    station?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    workShift?: SortOrder
    isSuperAdmin?: SortOrder
    station?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type EnumEmployeeWorkShiftNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeWorkShift | EnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeWorkShiftNullableWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeWorkShift | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel>
    _max?: NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel>
  }

  export type EnumEmployeeStationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStation | EnumEmployeeStationFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeStationNullableWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStation | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStationNullableFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStationNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    addressLine?: SortOrder
    city?: SortOrder
    isPrimary?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    isDelete?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    addressLine?: SortOrder
    city?: SortOrder
    isPrimary?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    isDelete?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    addressLine?: SortOrder
    city?: SortOrder
    isPrimary?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    isDelete?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumOutletTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OutletType | EnumOutletTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutletTypeFilter<$PrismaModel> | $Enums.OutletType
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OutletCountOrderByAggregateInput = {
    id?: SortOrder
    outletName?: SortOrder
    outletType?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type OutletAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OutletMaxOrderByAggregateInput = {
    id?: SortOrder
    outletName?: SortOrder
    outletType?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type OutletMinOrderByAggregateInput = {
    id?: SortOrder
    outletName?: SortOrder
    outletType?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    updatedAt?: SortOrder
    isDelete?: SortOrder
  }

  export type OutletSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumOutletTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OutletType | EnumOutletTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutletTypeWithAggregatesFilter<$PrismaModel> | $Enums.OutletType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutletTypeFilter<$PrismaModel>
    _max?: NestedEnumOutletTypeFilter<$PrismaModel>
  }

  export type EnumPickupStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PickupStatus | EnumPickupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPickupStatusFilter<$PrismaModel> | $Enums.PickupStatus
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type AddressNullableScalarRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PickupOrderCountOrderByAggregateInput = {
    id?: SortOrder
    pickupNumber?: SortOrder
    pickupStatus?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isOrderCreated?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    driverId?: SortOrder
    addressId?: SortOrder
  }

  export type PickupOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    driverId?: SortOrder
    addressId?: SortOrder
  }

  export type PickupOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    pickupNumber?: SortOrder
    pickupStatus?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isOrderCreated?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    driverId?: SortOrder
    addressId?: SortOrder
  }

  export type PickupOrderMinOrderByAggregateInput = {
    id?: SortOrder
    pickupNumber?: SortOrder
    pickupStatus?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isOrderCreated?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    driverId?: SortOrder
    addressId?: SortOrder
  }

  export type PickupOrderSumOrderByAggregateInput = {
    id?: SortOrder
    distance?: SortOrder
    pickupPrice?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    driverId?: SortOrder
    addressId?: SortOrder
  }

  export type EnumPickupStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PickupStatus | EnumPickupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPickupStatusWithAggregatesFilter<$PrismaModel> | $Enums.PickupStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPickupStatusFilter<$PrismaModel>
    _max?: NestedEnumPickupStatusFilter<$PrismaModel>
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type PickupOrderScalarRelationFilter = {
    is?: PickupOrderWhereInput
    isNot?: PickupOrderWhereInput
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    orderStatus?: SortOrder
    weight?: SortOrder
    laundryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickupOrderId?: SortOrder
    isPaid?: SortOrder
    isConfirm?: SortOrder
    receivedAt?: SortOrder
    confirmedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    laundryPrice?: SortOrder
    pickupOrderId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    orderStatus?: SortOrder
    weight?: SortOrder
    laundryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickupOrderId?: SortOrder
    isPaid?: SortOrder
    isConfirm?: SortOrder
    receivedAt?: SortOrder
    confirmedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    orderStatus?: SortOrder
    weight?: SortOrder
    laundryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pickupOrderId?: SortOrder
    isPaid?: SortOrder
    isConfirm?: SortOrder
    receivedAt?: SortOrder
    confirmedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    laundryPrice?: SortOrder
    pickupOrderId?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type LaundryItemScalarRelationFilter = {
    is?: LaundryItemWhereInput
    isNot?: LaundryItemWhereInput
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
    isDelete?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
    isDelete?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
    isDelete?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    qty?: SortOrder
    orderId?: SortOrder
    laundryItemId?: SortOrder
  }

  export type LaundryItemCountOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    isDelete?: SortOrder
  }

  export type LaundryItemAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LaundryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    isDelete?: SortOrder
  }

  export type LaundryItemMinOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    isDelete?: SortOrder
  }

  export type LaundryItemSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumDeliveryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusFilter<$PrismaModel> | $Enums.DeliveryStatus
  }

  export type DeliveryOrderCountOrderByAggregateInput = {
    id?: SortOrder
    deliveryNumber?: SortOrder
    deliveryStatus?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    driverId?: SortOrder
    orderId?: SortOrder
    addressId?: SortOrder
  }

  export type DeliveryOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    userId?: SortOrder
    driverId?: SortOrder
    orderId?: SortOrder
    addressId?: SortOrder
  }

  export type DeliveryOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    deliveryNumber?: SortOrder
    deliveryStatus?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    driverId?: SortOrder
    orderId?: SortOrder
    addressId?: SortOrder
  }

  export type DeliveryOrderMinOrderByAggregateInput = {
    id?: SortOrder
    deliveryNumber?: SortOrder
    deliveryStatus?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    driverId?: SortOrder
    orderId?: SortOrder
    addressId?: SortOrder
  }

  export type DeliveryOrderSumOrderByAggregateInput = {
    id?: SortOrder
    distance?: SortOrder
    deliveryPrice?: SortOrder
    userId?: SortOrder
    driverId?: SortOrder
    orderId?: SortOrder
    addressId?: SortOrder
  }

  export type EnumDeliveryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeliveryStatusFilter<$PrismaModel>
    _max?: NestedEnumDeliveryStatusFilter<$PrismaModel>
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type OrderWorkerCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
    station?: SortOrder
    isComplete?: SortOrder
    bypassRequest?: SortOrder
    bypassNote?: SortOrder
    bypassAccepted?: SortOrder
    bypassRejected?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderWorkerAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
  }

  export type OrderWorkerMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
    station?: SortOrder
    isComplete?: SortOrder
    bypassRequest?: SortOrder
    bypassNote?: SortOrder
    bypassAccepted?: SortOrder
    bypassRejected?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderWorkerMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
    station?: SortOrder
    isComplete?: SortOrder
    bypassRequest?: SortOrder
    bypassNote?: SortOrder
    bypassAccepted?: SortOrder
    bypassRejected?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderWorkerSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    workerId?: SortOrder
  }

  export type NotificationScalarRelationFilter = {
    is?: NotificationWhereInput
    isNot?: NotificationWhereInput
  }

  export type UserNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
  }

  export type UserNotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
  }

  export type UserNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
  }

  export type UserNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
  }

  export type UserNotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationId?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    amount?: SortOrder
    paymentMethode?: SortOrder
    paymentStatus?: SortOrder
    snapToken?: SortOrder
    snapRedirectUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    orderId?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    amount?: SortOrder
    paymentMethode?: SortOrder
    paymentStatus?: SortOrder
    snapToken?: SortOrder
    snapRedirectUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceNumber?: SortOrder
    amount?: SortOrder
    paymentMethode?: SortOrder
    paymentStatus?: SortOrder
    snapToken?: SortOrder
    snapRedirectUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    orderId?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    createdAt?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
    attendanceStatus?: SortOrder
  }

  export type AttendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    createdAt?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
    attendanceStatus?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    createdAt?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
    attendanceStatus?: SortOrder
  }

  export type AttendanceSumOrderByAggregateInput = {
    id?: SortOrder
    workHour?: SortOrder
    userId?: SortOrder
  }

  export type EnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type PickupOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<PickupOrderCreateWithoutUserInput, PickupOrderUncheckedCreateWithoutUserInput> | PickupOrderCreateWithoutUserInput[] | PickupOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutUserInput | PickupOrderCreateOrConnectWithoutUserInput[]
    createMany?: PickupOrderCreateManyUserInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type DeliveryOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<DeliveryOrderCreateWithoutUserInput, DeliveryOrderUncheckedCreateWithoutUserInput> | DeliveryOrderCreateWithoutUserInput[] | DeliveryOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutUserInput | DeliveryOrderCreateOrConnectWithoutUserInput[]
    createMany?: DeliveryOrderCreateManyUserInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type UserNotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceCreateWithoutUserInput, AttendanceUncheckedCreateWithoutUserInput> | AttendanceCreateWithoutUserInput[] | AttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutUserInput | AttendanceCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceCreateManyUserInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type PickupOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PickupOrderCreateWithoutUserInput, PickupOrderUncheckedCreateWithoutUserInput> | PickupOrderCreateWithoutUserInput[] | PickupOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutUserInput | PickupOrderCreateOrConnectWithoutUserInput[]
    createMany?: PickupOrderCreateManyUserInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type DeliveryOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DeliveryOrderCreateWithoutUserInput, DeliveryOrderUncheckedCreateWithoutUserInput> | DeliveryOrderCreateWithoutUserInput[] | DeliveryOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutUserInput | DeliveryOrderCreateOrConnectWithoutUserInput[]
    createMany?: DeliveryOrderCreateManyUserInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type UserNotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttendanceCreateWithoutUserInput, AttendanceUncheckedCreateWithoutUserInput> | AttendanceCreateWithoutUserInput[] | AttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutUserInput | AttendanceCreateOrConnectWithoutUserInput[]
    createMany?: AttendanceCreateManyUserInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type PickupOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<PickupOrderCreateWithoutUserInput, PickupOrderUncheckedCreateWithoutUserInput> | PickupOrderCreateWithoutUserInput[] | PickupOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutUserInput | PickupOrderCreateOrConnectWithoutUserInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutUserInput | PickupOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PickupOrderCreateManyUserInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutUserInput | PickupOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutUserInput | PickupOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type DeliveryOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutUserInput, DeliveryOrderUncheckedCreateWithoutUserInput> | DeliveryOrderCreateWithoutUserInput[] | DeliveryOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutUserInput | DeliveryOrderCreateOrConnectWithoutUserInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutUserInput | DeliveryOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeliveryOrderCreateManyUserInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutUserInput | DeliveryOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutUserInput | DeliveryOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type UserNotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    upsert?: UserNotificationUpsertWithWhereUniqueWithoutUserInput | UserNotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    set?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    disconnect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    delete?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    update?: UserNotificationUpdateWithWhereUniqueWithoutUserInput | UserNotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNotificationUpdateManyWithWhereWithoutUserInput | UserNotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceCreateWithoutUserInput, AttendanceUncheckedCreateWithoutUserInput> | AttendanceCreateWithoutUserInput[] | AttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutUserInput | AttendanceCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutUserInput | AttendanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceCreateManyUserInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutUserInput | AttendanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutUserInput | AttendanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EmployeeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type AddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type PickupOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PickupOrderCreateWithoutUserInput, PickupOrderUncheckedCreateWithoutUserInput> | PickupOrderCreateWithoutUserInput[] | PickupOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutUserInput | PickupOrderCreateOrConnectWithoutUserInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutUserInput | PickupOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PickupOrderCreateManyUserInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutUserInput | PickupOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutUserInput | PickupOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutUserInput, DeliveryOrderUncheckedCreateWithoutUserInput> | DeliveryOrderCreateWithoutUserInput[] | DeliveryOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutUserInput | DeliveryOrderCreateOrConnectWithoutUserInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutUserInput | DeliveryOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeliveryOrderCreateManyUserInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutUserInput | DeliveryOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutUserInput | DeliveryOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type UserNotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    upsert?: UserNotificationUpsertWithWhereUniqueWithoutUserInput | UserNotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    set?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    disconnect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    delete?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    update?: UserNotificationUpdateWithWhereUniqueWithoutUserInput | UserNotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNotificationUpdateManyWithWhereWithoutUserInput | UserNotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttendanceCreateWithoutUserInput, AttendanceUncheckedCreateWithoutUserInput> | AttendanceCreateWithoutUserInput[] | AttendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutUserInput | AttendanceCreateOrConnectWithoutUserInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutUserInput | AttendanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttendanceCreateManyUserInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutUserInput | AttendanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutUserInput | AttendanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type OutletCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<OutletCreateWithoutEmployeeInput, OutletUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: OutletCreateOrConnectWithoutEmployeeInput
    connect?: OutletWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type PickupOrderCreateNestedManyWithoutDriverInput = {
    create?: XOR<PickupOrderCreateWithoutDriverInput, PickupOrderUncheckedCreateWithoutDriverInput> | PickupOrderCreateWithoutDriverInput[] | PickupOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutDriverInput | PickupOrderCreateOrConnectWithoutDriverInput[]
    createMany?: PickupOrderCreateManyDriverInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type DeliveryOrderCreateNestedManyWithoutDriverInput = {
    create?: XOR<DeliveryOrderCreateWithoutDriverInput, DeliveryOrderUncheckedCreateWithoutDriverInput> | DeliveryOrderCreateWithoutDriverInput[] | DeliveryOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutDriverInput | DeliveryOrderCreateOrConnectWithoutDriverInput[]
    createMany?: DeliveryOrderCreateManyDriverInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type OrderWorkerCreateNestedManyWithoutWorkerInput = {
    create?: XOR<OrderWorkerCreateWithoutWorkerInput, OrderWorkerUncheckedCreateWithoutWorkerInput> | OrderWorkerCreateWithoutWorkerInput[] | OrderWorkerUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutWorkerInput | OrderWorkerCreateOrConnectWithoutWorkerInput[]
    createMany?: OrderWorkerCreateManyWorkerInputEnvelope
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
  }

  export type PickupOrderUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<PickupOrderCreateWithoutDriverInput, PickupOrderUncheckedCreateWithoutDriverInput> | PickupOrderCreateWithoutDriverInput[] | PickupOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutDriverInput | PickupOrderCreateOrConnectWithoutDriverInput[]
    createMany?: PickupOrderCreateManyDriverInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type DeliveryOrderUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<DeliveryOrderCreateWithoutDriverInput, DeliveryOrderUncheckedCreateWithoutDriverInput> | DeliveryOrderCreateWithoutDriverInput[] | DeliveryOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutDriverInput | DeliveryOrderCreateOrConnectWithoutDriverInput[]
    createMany?: DeliveryOrderCreateManyDriverInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type OrderWorkerUncheckedCreateNestedManyWithoutWorkerInput = {
    create?: XOR<OrderWorkerCreateWithoutWorkerInput, OrderWorkerUncheckedCreateWithoutWorkerInput> | OrderWorkerCreateWithoutWorkerInput[] | OrderWorkerUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutWorkerInput | OrderWorkerCreateOrConnectWithoutWorkerInput[]
    createMany?: OrderWorkerCreateManyWorkerInputEnvelope
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
  }

  export type NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeWorkShift | null
  }

  export type NullableEnumEmployeeStationFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeStation | null
  }

  export type OutletUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<OutletCreateWithoutEmployeeInput, OutletUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: OutletCreateOrConnectWithoutEmployeeInput
    upsert?: OutletUpsertWithoutEmployeeInput
    disconnect?: OutletWhereInput | boolean
    delete?: OutletWhereInput | boolean
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutEmployeeInput, OutletUpdateWithoutEmployeeInput>, OutletUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateOneRequiredWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type PickupOrderUpdateManyWithoutDriverNestedInput = {
    create?: XOR<PickupOrderCreateWithoutDriverInput, PickupOrderUncheckedCreateWithoutDriverInput> | PickupOrderCreateWithoutDriverInput[] | PickupOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutDriverInput | PickupOrderCreateOrConnectWithoutDriverInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutDriverInput | PickupOrderUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: PickupOrderCreateManyDriverInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutDriverInput | PickupOrderUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutDriverInput | PickupOrderUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type DeliveryOrderUpdateManyWithoutDriverNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutDriverInput, DeliveryOrderUncheckedCreateWithoutDriverInput> | DeliveryOrderCreateWithoutDriverInput[] | DeliveryOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutDriverInput | DeliveryOrderCreateOrConnectWithoutDriverInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutDriverInput | DeliveryOrderUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: DeliveryOrderCreateManyDriverInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutDriverInput | DeliveryOrderUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutDriverInput | DeliveryOrderUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type OrderWorkerUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<OrderWorkerCreateWithoutWorkerInput, OrderWorkerUncheckedCreateWithoutWorkerInput> | OrderWorkerCreateWithoutWorkerInput[] | OrderWorkerUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutWorkerInput | OrderWorkerCreateOrConnectWithoutWorkerInput[]
    upsert?: OrderWorkerUpsertWithWhereUniqueWithoutWorkerInput | OrderWorkerUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: OrderWorkerCreateManyWorkerInputEnvelope
    set?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    disconnect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    delete?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    update?: OrderWorkerUpdateWithWhereUniqueWithoutWorkerInput | OrderWorkerUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: OrderWorkerUpdateManyWithWhereWithoutWorkerInput | OrderWorkerUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: OrderWorkerScalarWhereInput | OrderWorkerScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PickupOrderUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<PickupOrderCreateWithoutDriverInput, PickupOrderUncheckedCreateWithoutDriverInput> | PickupOrderCreateWithoutDriverInput[] | PickupOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutDriverInput | PickupOrderCreateOrConnectWithoutDriverInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutDriverInput | PickupOrderUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: PickupOrderCreateManyDriverInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutDriverInput | PickupOrderUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutDriverInput | PickupOrderUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutDriverInput, DeliveryOrderUncheckedCreateWithoutDriverInput> | DeliveryOrderCreateWithoutDriverInput[] | DeliveryOrderUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutDriverInput | DeliveryOrderCreateOrConnectWithoutDriverInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutDriverInput | DeliveryOrderUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: DeliveryOrderCreateManyDriverInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutDriverInput | DeliveryOrderUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutDriverInput | DeliveryOrderUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type OrderWorkerUncheckedUpdateManyWithoutWorkerNestedInput = {
    create?: XOR<OrderWorkerCreateWithoutWorkerInput, OrderWorkerUncheckedCreateWithoutWorkerInput> | OrderWorkerCreateWithoutWorkerInput[] | OrderWorkerUncheckedCreateWithoutWorkerInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutWorkerInput | OrderWorkerCreateOrConnectWithoutWorkerInput[]
    upsert?: OrderWorkerUpsertWithWhereUniqueWithoutWorkerInput | OrderWorkerUpsertWithWhereUniqueWithoutWorkerInput[]
    createMany?: OrderWorkerCreateManyWorkerInputEnvelope
    set?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    disconnect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    delete?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    update?: OrderWorkerUpdateWithWhereUniqueWithoutWorkerInput | OrderWorkerUpdateWithWhereUniqueWithoutWorkerInput[]
    updateMany?: OrderWorkerUpdateManyWithWhereWithoutWorkerInput | OrderWorkerUpdateManyWithWhereWithoutWorkerInput[]
    deleteMany?: OrderWorkerScalarWhereInput | OrderWorkerScalarWhereInput[]
  }

  export type OutletCreateNestedOneWithoutAddressInput = {
    create?: XOR<OutletCreateWithoutAddressInput, OutletUncheckedCreateWithoutAddressInput>
    connectOrCreate?: OutletCreateOrConnectWithoutAddressInput
    connect?: OutletWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    connect?: UserWhereUniqueInput
  }

  export type PickupOrderCreateNestedManyWithoutAddressInput = {
    create?: XOR<PickupOrderCreateWithoutAddressInput, PickupOrderUncheckedCreateWithoutAddressInput> | PickupOrderCreateWithoutAddressInput[] | PickupOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutAddressInput | PickupOrderCreateOrConnectWithoutAddressInput[]
    createMany?: PickupOrderCreateManyAddressInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type DeliveryOrderCreateNestedManyWithoutAddressInput = {
    create?: XOR<DeliveryOrderCreateWithoutAddressInput, DeliveryOrderUncheckedCreateWithoutAddressInput> | DeliveryOrderCreateWithoutAddressInput[] | DeliveryOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutAddressInput | DeliveryOrderCreateOrConnectWithoutAddressInput[]
    createMany?: DeliveryOrderCreateManyAddressInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type PickupOrderUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<PickupOrderCreateWithoutAddressInput, PickupOrderUncheckedCreateWithoutAddressInput> | PickupOrderCreateWithoutAddressInput[] | PickupOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutAddressInput | PickupOrderCreateOrConnectWithoutAddressInput[]
    createMany?: PickupOrderCreateManyAddressInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type DeliveryOrderUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<DeliveryOrderCreateWithoutAddressInput, DeliveryOrderUncheckedCreateWithoutAddressInput> | DeliveryOrderCreateWithoutAddressInput[] | DeliveryOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutAddressInput | DeliveryOrderCreateOrConnectWithoutAddressInput[]
    createMany?: DeliveryOrderCreateManyAddressInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OutletUpdateOneWithoutAddressNestedInput = {
    create?: XOR<OutletCreateWithoutAddressInput, OutletUncheckedCreateWithoutAddressInput>
    connectOrCreate?: OutletCreateOrConnectWithoutAddressInput
    upsert?: OutletUpsertWithoutAddressInput
    disconnect?: OutletWhereInput | boolean
    delete?: OutletWhereInput | boolean
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutAddressInput, OutletUpdateWithoutAddressInput>, OutletUncheckedUpdateWithoutAddressInput>
  }

  export type UserUpdateOneWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAddressInput, UserUpdateWithoutAddressInput>, UserUncheckedUpdateWithoutAddressInput>
  }

  export type PickupOrderUpdateManyWithoutAddressNestedInput = {
    create?: XOR<PickupOrderCreateWithoutAddressInput, PickupOrderUncheckedCreateWithoutAddressInput> | PickupOrderCreateWithoutAddressInput[] | PickupOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutAddressInput | PickupOrderCreateOrConnectWithoutAddressInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutAddressInput | PickupOrderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: PickupOrderCreateManyAddressInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutAddressInput | PickupOrderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutAddressInput | PickupOrderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type DeliveryOrderUpdateManyWithoutAddressNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutAddressInput, DeliveryOrderUncheckedCreateWithoutAddressInput> | DeliveryOrderCreateWithoutAddressInput[] | DeliveryOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutAddressInput | DeliveryOrderCreateOrConnectWithoutAddressInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutAddressInput | DeliveryOrderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: DeliveryOrderCreateManyAddressInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutAddressInput | DeliveryOrderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutAddressInput | DeliveryOrderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type PickupOrderUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<PickupOrderCreateWithoutAddressInput, PickupOrderUncheckedCreateWithoutAddressInput> | PickupOrderCreateWithoutAddressInput[] | PickupOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutAddressInput | PickupOrderCreateOrConnectWithoutAddressInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutAddressInput | PickupOrderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: PickupOrderCreateManyAddressInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutAddressInput | PickupOrderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutAddressInput | PickupOrderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutAddressInput, DeliveryOrderUncheckedCreateWithoutAddressInput> | DeliveryOrderCreateWithoutAddressInput[] | DeliveryOrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutAddressInput | DeliveryOrderCreateOrConnectWithoutAddressInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutAddressInput | DeliveryOrderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: DeliveryOrderCreateManyAddressInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutAddressInput | DeliveryOrderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutAddressInput | DeliveryOrderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type EmployeeCreateNestedManyWithoutOutletInput = {
    create?: XOR<EmployeeCreateWithoutOutletInput, EmployeeUncheckedCreateWithoutOutletInput> | EmployeeCreateWithoutOutletInput[] | EmployeeUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutOutletInput | EmployeeCreateOrConnectWithoutOutletInput[]
    createMany?: EmployeeCreateManyOutletInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AddressCreateNestedManyWithoutOutletInput = {
    create?: XOR<AddressCreateWithoutOutletInput, AddressUncheckedCreateWithoutOutletInput> | AddressCreateWithoutOutletInput[] | AddressUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutOutletInput | AddressCreateOrConnectWithoutOutletInput[]
    createMany?: AddressCreateManyOutletInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type PickupOrderCreateNestedManyWithoutOutletInput = {
    create?: XOR<PickupOrderCreateWithoutOutletInput, PickupOrderUncheckedCreateWithoutOutletInput> | PickupOrderCreateWithoutOutletInput[] | PickupOrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutOutletInput | PickupOrderCreateOrConnectWithoutOutletInput[]
    createMany?: PickupOrderCreateManyOutletInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<EmployeeCreateWithoutOutletInput, EmployeeUncheckedCreateWithoutOutletInput> | EmployeeCreateWithoutOutletInput[] | EmployeeUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutOutletInput | EmployeeCreateOrConnectWithoutOutletInput[]
    createMany?: EmployeeCreateManyOutletInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<AddressCreateWithoutOutletInput, AddressUncheckedCreateWithoutOutletInput> | AddressCreateWithoutOutletInput[] | AddressUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutOutletInput | AddressCreateOrConnectWithoutOutletInput[]
    createMany?: AddressCreateManyOutletInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type PickupOrderUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<PickupOrderCreateWithoutOutletInput, PickupOrderUncheckedCreateWithoutOutletInput> | PickupOrderCreateWithoutOutletInput[] | PickupOrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutOutletInput | PickupOrderCreateOrConnectWithoutOutletInput[]
    createMany?: PickupOrderCreateManyOutletInputEnvelope
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
  }

  export type EnumOutletTypeFieldUpdateOperationsInput = {
    set?: $Enums.OutletType
  }

  export type EmployeeUpdateManyWithoutOutletNestedInput = {
    create?: XOR<EmployeeCreateWithoutOutletInput, EmployeeUncheckedCreateWithoutOutletInput> | EmployeeCreateWithoutOutletInput[] | EmployeeUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutOutletInput | EmployeeCreateOrConnectWithoutOutletInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutOutletInput | EmployeeUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: EmployeeCreateManyOutletInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutOutletInput | EmployeeUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutOutletInput | EmployeeUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AddressUpdateManyWithoutOutletNestedInput = {
    create?: XOR<AddressCreateWithoutOutletInput, AddressUncheckedCreateWithoutOutletInput> | AddressCreateWithoutOutletInput[] | AddressUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutOutletInput | AddressCreateOrConnectWithoutOutletInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutOutletInput | AddressUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: AddressCreateManyOutletInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutOutletInput | AddressUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutOutletInput | AddressUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type PickupOrderUpdateManyWithoutOutletNestedInput = {
    create?: XOR<PickupOrderCreateWithoutOutletInput, PickupOrderUncheckedCreateWithoutOutletInput> | PickupOrderCreateWithoutOutletInput[] | PickupOrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutOutletInput | PickupOrderCreateOrConnectWithoutOutletInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutOutletInput | PickupOrderUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: PickupOrderCreateManyOutletInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutOutletInput | PickupOrderUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutOutletInput | PickupOrderUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<EmployeeCreateWithoutOutletInput, EmployeeUncheckedCreateWithoutOutletInput> | EmployeeCreateWithoutOutletInput[] | EmployeeUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutOutletInput | EmployeeCreateOrConnectWithoutOutletInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutOutletInput | EmployeeUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: EmployeeCreateManyOutletInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutOutletInput | EmployeeUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutOutletInput | EmployeeUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AddressUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<AddressCreateWithoutOutletInput, AddressUncheckedCreateWithoutOutletInput> | AddressCreateWithoutOutletInput[] | AddressUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutOutletInput | AddressCreateOrConnectWithoutOutletInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutOutletInput | AddressUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: AddressCreateManyOutletInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutOutletInput | AddressUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutOutletInput | AddressUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type PickupOrderUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<PickupOrderCreateWithoutOutletInput, PickupOrderUncheckedCreateWithoutOutletInput> | PickupOrderCreateWithoutOutletInput[] | PickupOrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: PickupOrderCreateOrConnectWithoutOutletInput | PickupOrderCreateOrConnectWithoutOutletInput[]
    upsert?: PickupOrderUpsertWithWhereUniqueWithoutOutletInput | PickupOrderUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: PickupOrderCreateManyOutletInputEnvelope
    set?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    disconnect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    delete?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    connect?: PickupOrderWhereUniqueInput | PickupOrderWhereUniqueInput[]
    update?: PickupOrderUpdateWithWhereUniqueWithoutOutletInput | PickupOrderUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: PickupOrderUpdateManyWithWhereWithoutOutletInput | PickupOrderUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPickupOrderInput = {
    create?: XOR<UserCreateWithoutPickupOrderInput, UserUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPickupOrderInput
    connect?: UserWhereUniqueInput
  }

  export type OutletCreateNestedOneWithoutPickupOrderInput = {
    create?: XOR<OutletCreateWithoutPickupOrderInput, OutletUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: OutletCreateOrConnectWithoutPickupOrderInput
    connect?: OutletWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutPickupOrderInput = {
    create?: XOR<OrderCreateWithoutPickupOrderInput, OrderUncheckedCreateWithoutPickupOrderInput> | OrderCreateWithoutPickupOrderInput[] | OrderUncheckedCreateWithoutPickupOrderInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPickupOrderInput | OrderCreateOrConnectWithoutPickupOrderInput[]
    createMany?: OrderCreateManyPickupOrderInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutPickupOrderInput = {
    create?: XOR<EmployeeCreateWithoutPickupOrderInput, EmployeeUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPickupOrderInput
    connect?: EmployeeWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutPickupOrderInput = {
    create?: XOR<AddressCreateWithoutPickupOrderInput, AddressUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: AddressCreateOrConnectWithoutPickupOrderInput
    connect?: AddressWhereUniqueInput
  }

  export type OrderUncheckedCreateNestedManyWithoutPickupOrderInput = {
    create?: XOR<OrderCreateWithoutPickupOrderInput, OrderUncheckedCreateWithoutPickupOrderInput> | OrderCreateWithoutPickupOrderInput[] | OrderUncheckedCreateWithoutPickupOrderInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPickupOrderInput | OrderCreateOrConnectWithoutPickupOrderInput[]
    createMany?: OrderCreateManyPickupOrderInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type EnumPickupStatusFieldUpdateOperationsInput = {
    set?: $Enums.PickupStatus
  }

  export type UserUpdateOneRequiredWithoutPickupOrderNestedInput = {
    create?: XOR<UserCreateWithoutPickupOrderInput, UserUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPickupOrderInput
    upsert?: UserUpsertWithoutPickupOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPickupOrderInput, UserUpdateWithoutPickupOrderInput>, UserUncheckedUpdateWithoutPickupOrderInput>
  }

  export type OutletUpdateOneWithoutPickupOrderNestedInput = {
    create?: XOR<OutletCreateWithoutPickupOrderInput, OutletUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: OutletCreateOrConnectWithoutPickupOrderInput
    upsert?: OutletUpsertWithoutPickupOrderInput
    disconnect?: OutletWhereInput | boolean
    delete?: OutletWhereInput | boolean
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutPickupOrderInput, OutletUpdateWithoutPickupOrderInput>, OutletUncheckedUpdateWithoutPickupOrderInput>
  }

  export type OrderUpdateManyWithoutPickupOrderNestedInput = {
    create?: XOR<OrderCreateWithoutPickupOrderInput, OrderUncheckedCreateWithoutPickupOrderInput> | OrderCreateWithoutPickupOrderInput[] | OrderUncheckedCreateWithoutPickupOrderInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPickupOrderInput | OrderCreateOrConnectWithoutPickupOrderInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutPickupOrderInput | OrderUpsertWithWhereUniqueWithoutPickupOrderInput[]
    createMany?: OrderCreateManyPickupOrderInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutPickupOrderInput | OrderUpdateWithWhereUniqueWithoutPickupOrderInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutPickupOrderInput | OrderUpdateManyWithWhereWithoutPickupOrderInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type EmployeeUpdateOneWithoutPickupOrderNestedInput = {
    create?: XOR<EmployeeCreateWithoutPickupOrderInput, EmployeeUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPickupOrderInput
    upsert?: EmployeeUpsertWithoutPickupOrderInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPickupOrderInput, EmployeeUpdateWithoutPickupOrderInput>, EmployeeUncheckedUpdateWithoutPickupOrderInput>
  }

  export type AddressUpdateOneWithoutPickupOrderNestedInput = {
    create?: XOR<AddressCreateWithoutPickupOrderInput, AddressUncheckedCreateWithoutPickupOrderInput>
    connectOrCreate?: AddressCreateOrConnectWithoutPickupOrderInput
    upsert?: AddressUpsertWithoutPickupOrderInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutPickupOrderInput, AddressUpdateWithoutPickupOrderInput>, AddressUncheckedUpdateWithoutPickupOrderInput>
  }

  export type OrderUncheckedUpdateManyWithoutPickupOrderNestedInput = {
    create?: XOR<OrderCreateWithoutPickupOrderInput, OrderUncheckedCreateWithoutPickupOrderInput> | OrderCreateWithoutPickupOrderInput[] | OrderUncheckedCreateWithoutPickupOrderInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutPickupOrderInput | OrderCreateOrConnectWithoutPickupOrderInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutPickupOrderInput | OrderUpsertWithWhereUniqueWithoutPickupOrderInput[]
    createMany?: OrderCreateManyPickupOrderInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutPickupOrderInput | OrderUpdateWithWhereUniqueWithoutPickupOrderInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutPickupOrderInput | OrderUpdateManyWithWhereWithoutPickupOrderInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type PickupOrderCreateNestedOneWithoutOrderInput = {
    create?: XOR<PickupOrderCreateWithoutOrderInput, PickupOrderUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PickupOrderCreateOrConnectWithoutOrderInput
    connect?: PickupOrderWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type DeliveryOrderCreateNestedManyWithoutOrderInput = {
    create?: XOR<DeliveryOrderCreateWithoutOrderInput, DeliveryOrderUncheckedCreateWithoutOrderInput> | DeliveryOrderCreateWithoutOrderInput[] | DeliveryOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutOrderInput | DeliveryOrderCreateOrConnectWithoutOrderInput[]
    createMany?: DeliveryOrderCreateManyOrderInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type OrderWorkerCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderWorkerCreateWithoutOrderInput, OrderWorkerUncheckedCreateWithoutOrderInput> | OrderWorkerCreateWithoutOrderInput[] | OrderWorkerUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutOrderInput | OrderWorkerCreateOrConnectWithoutOrderInput[]
    createMany?: OrderWorkerCreateManyOrderInputEnvelope
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type DeliveryOrderUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<DeliveryOrderCreateWithoutOrderInput, DeliveryOrderUncheckedCreateWithoutOrderInput> | DeliveryOrderCreateWithoutOrderInput[] | DeliveryOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutOrderInput | DeliveryOrderCreateOrConnectWithoutOrderInput[]
    createMany?: DeliveryOrderCreateManyOrderInputEnvelope
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
  }

  export type OrderWorkerUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderWorkerCreateWithoutOrderInput, OrderWorkerUncheckedCreateWithoutOrderInput> | OrderWorkerCreateWithoutOrderInput[] | OrderWorkerUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutOrderInput | OrderWorkerCreateOrConnectWithoutOrderInput[]
    createMany?: OrderWorkerCreateManyOrderInputEnvelope
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type PickupOrderUpdateOneRequiredWithoutOrderNestedInput = {
    create?: XOR<PickupOrderCreateWithoutOrderInput, PickupOrderUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PickupOrderCreateOrConnectWithoutOrderInput
    upsert?: PickupOrderUpsertWithoutOrderInput
    connect?: PickupOrderWhereUniqueInput
    update?: XOR<XOR<PickupOrderUpdateToOneWithWhereWithoutOrderInput, PickupOrderUpdateWithoutOrderInput>, PickupOrderUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type DeliveryOrderUpdateManyWithoutOrderNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutOrderInput, DeliveryOrderUncheckedCreateWithoutOrderInput> | DeliveryOrderCreateWithoutOrderInput[] | DeliveryOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutOrderInput | DeliveryOrderCreateOrConnectWithoutOrderInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutOrderInput | DeliveryOrderUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: DeliveryOrderCreateManyOrderInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutOrderInput | DeliveryOrderUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutOrderInput | DeliveryOrderUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type OrderWorkerUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderWorkerCreateWithoutOrderInput, OrderWorkerUncheckedCreateWithoutOrderInput> | OrderWorkerCreateWithoutOrderInput[] | OrderWorkerUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutOrderInput | OrderWorkerCreateOrConnectWithoutOrderInput[]
    upsert?: OrderWorkerUpsertWithWhereUniqueWithoutOrderInput | OrderWorkerUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderWorkerCreateManyOrderInputEnvelope
    set?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    disconnect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    delete?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    update?: OrderWorkerUpdateWithWhereUniqueWithoutOrderInput | OrderWorkerUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderWorkerUpdateManyWithWhereWithoutOrderInput | OrderWorkerUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderWorkerScalarWhereInput | OrderWorkerScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutOrderInput | PaymentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutOrderInput | PaymentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutOrderInput | PaymentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<DeliveryOrderCreateWithoutOrderInput, DeliveryOrderUncheckedCreateWithoutOrderInput> | DeliveryOrderCreateWithoutOrderInput[] | DeliveryOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DeliveryOrderCreateOrConnectWithoutOrderInput | DeliveryOrderCreateOrConnectWithoutOrderInput[]
    upsert?: DeliveryOrderUpsertWithWhereUniqueWithoutOrderInput | DeliveryOrderUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: DeliveryOrderCreateManyOrderInputEnvelope
    set?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    disconnect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    delete?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    connect?: DeliveryOrderWhereUniqueInput | DeliveryOrderWhereUniqueInput[]
    update?: DeliveryOrderUpdateWithWhereUniqueWithoutOrderInput | DeliveryOrderUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: DeliveryOrderUpdateManyWithWhereWithoutOrderInput | DeliveryOrderUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
  }

  export type OrderWorkerUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderWorkerCreateWithoutOrderInput, OrderWorkerUncheckedCreateWithoutOrderInput> | OrderWorkerCreateWithoutOrderInput[] | OrderWorkerUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderWorkerCreateOrConnectWithoutOrderInput | OrderWorkerCreateOrConnectWithoutOrderInput[]
    upsert?: OrderWorkerUpsertWithWhereUniqueWithoutOrderInput | OrderWorkerUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderWorkerCreateManyOrderInputEnvelope
    set?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    disconnect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    delete?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    connect?: OrderWorkerWhereUniqueInput | OrderWorkerWhereUniqueInput[]
    update?: OrderWorkerUpdateWithWhereUniqueWithoutOrderInput | OrderWorkerUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderWorkerUpdateManyWithWhereWithoutOrderInput | OrderWorkerUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderWorkerScalarWhereInput | OrderWorkerScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutOrderInput | PaymentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutOrderInput | PaymentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutOrderInput | PaymentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type LaundryItemCreateNestedOneWithoutOrderItemInput = {
    create?: XOR<LaundryItemCreateWithoutOrderItemInput, LaundryItemUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: LaundryItemCreateOrConnectWithoutOrderItemInput
    connect?: LaundryItemWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutOrderItemInput = {
    create?: XOR<OrderCreateWithoutOrderItemInput, OrderUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemInput
    connect?: OrderWhereUniqueInput
  }

  export type LaundryItemUpdateOneRequiredWithoutOrderItemNestedInput = {
    create?: XOR<LaundryItemCreateWithoutOrderItemInput, LaundryItemUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: LaundryItemCreateOrConnectWithoutOrderItemInput
    upsert?: LaundryItemUpsertWithoutOrderItemInput
    connect?: LaundryItemWhereUniqueInput
    update?: XOR<XOR<LaundryItemUpdateToOneWithWhereWithoutOrderItemInput, LaundryItemUpdateWithoutOrderItemInput>, LaundryItemUncheckedUpdateWithoutOrderItemInput>
  }

  export type OrderUpdateOneRequiredWithoutOrderItemNestedInput = {
    create?: XOR<OrderCreateWithoutOrderItemInput, OrderUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemInput
    upsert?: OrderUpsertWithoutOrderItemInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderItemInput, OrderUpdateWithoutOrderItemInput>, OrderUncheckedUpdateWithoutOrderItemInput>
  }

  export type OrderItemCreateNestedManyWithoutLaundryItemInput = {
    create?: XOR<OrderItemCreateWithoutLaundryItemInput, OrderItemUncheckedCreateWithoutLaundryItemInput> | OrderItemCreateWithoutLaundryItemInput[] | OrderItemUncheckedCreateWithoutLaundryItemInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLaundryItemInput | OrderItemCreateOrConnectWithoutLaundryItemInput[]
    createMany?: OrderItemCreateManyLaundryItemInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutLaundryItemInput = {
    create?: XOR<OrderItemCreateWithoutLaundryItemInput, OrderItemUncheckedCreateWithoutLaundryItemInput> | OrderItemCreateWithoutLaundryItemInput[] | OrderItemUncheckedCreateWithoutLaundryItemInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLaundryItemInput | OrderItemCreateOrConnectWithoutLaundryItemInput[]
    createMany?: OrderItemCreateManyLaundryItemInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUpdateManyWithoutLaundryItemNestedInput = {
    create?: XOR<OrderItemCreateWithoutLaundryItemInput, OrderItemUncheckedCreateWithoutLaundryItemInput> | OrderItemCreateWithoutLaundryItemInput[] | OrderItemUncheckedCreateWithoutLaundryItemInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLaundryItemInput | OrderItemCreateOrConnectWithoutLaundryItemInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutLaundryItemInput | OrderItemUpsertWithWhereUniqueWithoutLaundryItemInput[]
    createMany?: OrderItemCreateManyLaundryItemInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutLaundryItemInput | OrderItemUpdateWithWhereUniqueWithoutLaundryItemInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutLaundryItemInput | OrderItemUpdateManyWithWhereWithoutLaundryItemInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutLaundryItemNestedInput = {
    create?: XOR<OrderItemCreateWithoutLaundryItemInput, OrderItemUncheckedCreateWithoutLaundryItemInput> | OrderItemCreateWithoutLaundryItemInput[] | OrderItemUncheckedCreateWithoutLaundryItemInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutLaundryItemInput | OrderItemCreateOrConnectWithoutLaundryItemInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutLaundryItemInput | OrderItemUpsertWithWhereUniqueWithoutLaundryItemInput[]
    createMany?: OrderItemCreateManyLaundryItemInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutLaundryItemInput | OrderItemUpdateWithWhereUniqueWithoutLaundryItemInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutLaundryItemInput | OrderItemUpdateManyWithWhereWithoutLaundryItemInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDeliveryOrderInput = {
    create?: XOR<UserCreateWithoutDeliveryOrderInput, UserUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeliveryOrderInput
    connect?: UserWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDeliveryOrderInput = {
    create?: XOR<EmployeeCreateWithoutDeliveryOrderInput, EmployeeUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDeliveryOrderInput
    connect?: EmployeeWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutDeliveryOrderInput = {
    create?: XOR<OrderCreateWithoutDeliveryOrderInput, OrderUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: OrderCreateOrConnectWithoutDeliveryOrderInput
    connect?: OrderWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutDeliveryOrderInput = {
    create?: XOR<AddressCreateWithoutDeliveryOrderInput, AddressUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: AddressCreateOrConnectWithoutDeliveryOrderInput
    connect?: AddressWhereUniqueInput
  }

  export type EnumDeliveryStatusFieldUpdateOperationsInput = {
    set?: $Enums.DeliveryStatus
  }

  export type UserUpdateOneRequiredWithoutDeliveryOrderNestedInput = {
    create?: XOR<UserCreateWithoutDeliveryOrderInput, UserUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeliveryOrderInput
    upsert?: UserUpsertWithoutDeliveryOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDeliveryOrderInput, UserUpdateWithoutDeliveryOrderInput>, UserUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type EmployeeUpdateOneWithoutDeliveryOrderNestedInput = {
    create?: XOR<EmployeeCreateWithoutDeliveryOrderInput, EmployeeUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDeliveryOrderInput
    upsert?: EmployeeUpsertWithoutDeliveryOrderInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDeliveryOrderInput, EmployeeUpdateWithoutDeliveryOrderInput>, EmployeeUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type OrderUpdateOneRequiredWithoutDeliveryOrderNestedInput = {
    create?: XOR<OrderCreateWithoutDeliveryOrderInput, OrderUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: OrderCreateOrConnectWithoutDeliveryOrderInput
    upsert?: OrderUpsertWithoutDeliveryOrderInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutDeliveryOrderInput, OrderUpdateWithoutDeliveryOrderInput>, OrderUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type AddressUpdateOneWithoutDeliveryOrderNestedInput = {
    create?: XOR<AddressCreateWithoutDeliveryOrderInput, AddressUncheckedCreateWithoutDeliveryOrderInput>
    connectOrCreate?: AddressCreateOrConnectWithoutDeliveryOrderInput
    upsert?: AddressUpsertWithoutDeliveryOrderInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutDeliveryOrderInput, AddressUpdateWithoutDeliveryOrderInput>, AddressUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type OrderCreateNestedOneWithoutOrderWorkerInput = {
    create?: XOR<OrderCreateWithoutOrderWorkerInput, OrderUncheckedCreateWithoutOrderWorkerInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderWorkerInput
    connect?: OrderWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutOrderWorkerInput = {
    create?: XOR<EmployeeCreateWithoutOrderWorkerInput, EmployeeUncheckedCreateWithoutOrderWorkerInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOrderWorkerInput
    connect?: EmployeeWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderWorkerNestedInput = {
    create?: XOR<OrderCreateWithoutOrderWorkerInput, OrderUncheckedCreateWithoutOrderWorkerInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderWorkerInput
    upsert?: OrderUpsertWithoutOrderWorkerInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderWorkerInput, OrderUpdateWithoutOrderWorkerInput>, OrderUncheckedUpdateWithoutOrderWorkerInput>
  }

  export type EmployeeUpdateOneRequiredWithoutOrderWorkerNestedInput = {
    create?: XOR<EmployeeCreateWithoutOrderWorkerInput, EmployeeUncheckedCreateWithoutOrderWorkerInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOrderWorkerInput
    upsert?: EmployeeUpsertWithoutOrderWorkerInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutOrderWorkerInput, EmployeeUpdateWithoutOrderWorkerInput>, EmployeeUncheckedUpdateWithoutOrderWorkerInput>
  }

  export type UserCreateNestedOneWithoutUserNotificationInput = {
    create?: XOR<UserCreateWithoutUserNotificationInput, UserUncheckedCreateWithoutUserNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserNotificationInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationCreateNestedOneWithoutUserNotificationInput = {
    create?: XOR<NotificationCreateWithoutUserNotificationInput, NotificationUncheckedCreateWithoutUserNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutUserNotificationInput
    connect?: NotificationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserNotificationNestedInput = {
    create?: XOR<UserCreateWithoutUserNotificationInput, UserUncheckedCreateWithoutUserNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserNotificationInput
    upsert?: UserUpsertWithoutUserNotificationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserNotificationInput, UserUpdateWithoutUserNotificationInput>, UserUncheckedUpdateWithoutUserNotificationInput>
  }

  export type NotificationUpdateOneRequiredWithoutUserNotificationNestedInput = {
    create?: XOR<NotificationCreateWithoutUserNotificationInput, NotificationUncheckedCreateWithoutUserNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutUserNotificationInput
    upsert?: NotificationUpsertWithoutUserNotificationInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutUserNotificationInput, NotificationUpdateWithoutUserNotificationInput>, NotificationUncheckedUpdateWithoutUserNotificationInput>
  }

  export type UserNotificationCreateNestedManyWithoutNotificationInput = {
    create?: XOR<UserNotificationCreateWithoutNotificationInput, UserNotificationUncheckedCreateWithoutNotificationInput> | UserNotificationCreateWithoutNotificationInput[] | UserNotificationUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutNotificationInput | UserNotificationCreateOrConnectWithoutNotificationInput[]
    createMany?: UserNotificationCreateManyNotificationInputEnvelope
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
  }

  export type UserNotificationUncheckedCreateNestedManyWithoutNotificationInput = {
    create?: XOR<UserNotificationCreateWithoutNotificationInput, UserNotificationUncheckedCreateWithoutNotificationInput> | UserNotificationCreateWithoutNotificationInput[] | UserNotificationUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutNotificationInput | UserNotificationCreateOrConnectWithoutNotificationInput[]
    createMany?: UserNotificationCreateManyNotificationInputEnvelope
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
  }

  export type UserNotificationUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<UserNotificationCreateWithoutNotificationInput, UserNotificationUncheckedCreateWithoutNotificationInput> | UserNotificationCreateWithoutNotificationInput[] | UserNotificationUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutNotificationInput | UserNotificationCreateOrConnectWithoutNotificationInput[]
    upsert?: UserNotificationUpsertWithWhereUniqueWithoutNotificationInput | UserNotificationUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: UserNotificationCreateManyNotificationInputEnvelope
    set?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    disconnect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    delete?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    update?: UserNotificationUpdateWithWhereUniqueWithoutNotificationInput | UserNotificationUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: UserNotificationUpdateManyWithWhereWithoutNotificationInput | UserNotificationUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
  }

  export type UserNotificationUncheckedUpdateManyWithoutNotificationNestedInput = {
    create?: XOR<UserNotificationCreateWithoutNotificationInput, UserNotificationUncheckedCreateWithoutNotificationInput> | UserNotificationCreateWithoutNotificationInput[] | UserNotificationUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutNotificationInput | UserNotificationCreateOrConnectWithoutNotificationInput[]
    upsert?: UserNotificationUpsertWithWhereUniqueWithoutNotificationInput | UserNotificationUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: UserNotificationCreateManyNotificationInputEnvelope
    set?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    disconnect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    delete?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    update?: UserNotificationUpdateWithWhereUniqueWithoutNotificationInput | UserNotificationUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?: UserNotificationUpdateManyWithWhereWithoutNotificationInput | UserNotificationUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutPaymentInput = {
    create?: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInput
    connect?: OrderWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type OrderUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInput
    upsert?: OrderUpsertWithoutPaymentInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPaymentInput, OrderUpdateWithoutPaymentInput>, OrderUncheckedUpdateWithoutPaymentInput>
  }

  export type UserCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<UserCreateWithoutAttendanceInput, UserUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAttendanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceStatus
  }

  export type UserUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutAttendanceInput, UserUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceInput
    upsert?: UserUpsertWithoutAttendanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendanceInput, UserUpdateWithoutAttendanceInput>, UserUncheckedUpdateWithoutAttendanceInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeWorkShift | EnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel> | $Enums.EmployeeWorkShift | null
  }

  export type NestedEnumEmployeeStationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStation | EnumEmployeeStationFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeStationNullableFilter<$PrismaModel> | $Enums.EmployeeStation | null
  }

  export type NestedEnumEmployeeWorkShiftNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeWorkShift | EnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeWorkShift[] | ListEnumEmployeeWorkShiftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeWorkShiftNullableWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeWorkShift | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel>
    _max?: NestedEnumEmployeeWorkShiftNullableFilter<$PrismaModel>
  }

  export type NestedEnumEmployeeStationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStation | EnumEmployeeStationFieldRefInput<$PrismaModel> | null
    in?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.EmployeeStation[] | ListEnumEmployeeStationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumEmployeeStationNullableWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStation | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStationNullableFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStationNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumOutletTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OutletType | EnumOutletTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutletTypeFilter<$PrismaModel> | $Enums.OutletType
  }

  export type NestedEnumOutletTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OutletType | EnumOutletTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutletType[] | ListEnumOutletTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutletTypeWithAggregatesFilter<$PrismaModel> | $Enums.OutletType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutletTypeFilter<$PrismaModel>
    _max?: NestedEnumOutletTypeFilter<$PrismaModel>
  }

  export type NestedEnumPickupStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PickupStatus | EnumPickupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPickupStatusFilter<$PrismaModel> | $Enums.PickupStatus
  }

  export type NestedEnumPickupStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PickupStatus | EnumPickupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PickupStatus[] | ListEnumPickupStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPickupStatusWithAggregatesFilter<$PrismaModel> | $Enums.PickupStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPickupStatusFilter<$PrismaModel>
    _max?: NestedEnumPickupStatusFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumDeliveryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusFilter<$PrismaModel> | $Enums.DeliveryStatus
  }

  export type NestedEnumDeliveryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeliveryStatusFilter<$PrismaModel>
    _max?: NestedEnumDeliveryStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type EmployeeCreateWithoutUserInput = {
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    outlet?: OutletCreateNestedOneWithoutEmployeeInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    outletId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateWithoutUserInput = {
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outlet?: OutletCreateNestedOneWithoutAddressInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutAddressInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outletId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutAddressInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateManyUserInputEnvelope = {
    data: AddressCreateManyUserInput | AddressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PickupOrderCreateWithoutUserInput = {
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    outlet?: OutletCreateNestedOneWithoutPickupOrderInput
    order?: OrderCreateNestedManyWithoutPickupOrderInput
    driver?: EmployeeCreateNestedOneWithoutPickupOrderInput
    address?: AddressCreateNestedOneWithoutPickupOrderInput
  }

  export type PickupOrderUncheckedCreateWithoutUserInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    outletId?: number | null
    driverId?: number | null
    addressId?: number | null
    order?: OrderUncheckedCreateNestedManyWithoutPickupOrderInput
  }

  export type PickupOrderCreateOrConnectWithoutUserInput = {
    where: PickupOrderWhereUniqueInput
    create: XOR<PickupOrderCreateWithoutUserInput, PickupOrderUncheckedCreateWithoutUserInput>
  }

  export type PickupOrderCreateManyUserInputEnvelope = {
    data: PickupOrderCreateManyUserInput | PickupOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DeliveryOrderCreateWithoutUserInput = {
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    driver?: EmployeeCreateNestedOneWithoutDeliveryOrderInput
    order: OrderCreateNestedOneWithoutDeliveryOrderInput
    address?: AddressCreateNestedOneWithoutDeliveryOrderInput
  }

  export type DeliveryOrderUncheckedCreateWithoutUserInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    driverId?: number | null
    orderId: number
    addressId?: number | null
  }

  export type DeliveryOrderCreateOrConnectWithoutUserInput = {
    where: DeliveryOrderWhereUniqueInput
    create: XOR<DeliveryOrderCreateWithoutUserInput, DeliveryOrderUncheckedCreateWithoutUserInput>
  }

  export type DeliveryOrderCreateManyUserInputEnvelope = {
    data: DeliveryOrderCreateManyUserInput | DeliveryOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserNotificationCreateWithoutUserInput = {
    createdAt?: Date | string
    isRead?: boolean
    notification: NotificationCreateNestedOneWithoutUserNotificationInput
  }

  export type UserNotificationUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    isRead?: boolean
    notificationId: number
  }

  export type UserNotificationCreateOrConnectWithoutUserInput = {
    where: UserNotificationWhereUniqueInput
    create: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput>
  }

  export type UserNotificationCreateManyUserInputEnvelope = {
    data: UserNotificationCreateManyUserInput | UserNotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceCreateWithoutUserInput = {
    checkIn?: Date | string
    checkOut?: Date | string | null
    createdAt?: Date | string
    workHour: number
    attendanceStatus?: $Enums.AttendanceStatus
  }

  export type AttendanceUncheckedCreateWithoutUserInput = {
    id?: number
    checkIn?: Date | string
    checkOut?: Date | string | null
    createdAt?: Date | string
    workHour: number
    attendanceStatus?: $Enums.AttendanceStatus
  }

  export type AttendanceCreateOrConnectWithoutUserInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutUserInput, AttendanceUncheckedCreateWithoutUserInput>
  }

  export type AttendanceCreateManyUserInputEnvelope = {
    data: AttendanceCreateManyUserInput | AttendanceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    outlet?: OutletUpdateOneWithoutEmployeeNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutUserInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    id?: IntFilter<"Address"> | number
    addressLine?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    isPrimary?: BoolFilter<"Address"> | boolean
    latitude?: FloatNullableFilter<"Address"> | number | null
    longitude?: FloatNullableFilter<"Address"> | number | null
    isDelete?: BoolFilter<"Address"> | boolean
    outletId?: IntNullableFilter<"Address"> | number | null
    userId?: IntNullableFilter<"Address"> | number | null
  }

  export type PickupOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: PickupOrderWhereUniqueInput
    update: XOR<PickupOrderUpdateWithoutUserInput, PickupOrderUncheckedUpdateWithoutUserInput>
    create: XOR<PickupOrderCreateWithoutUserInput, PickupOrderUncheckedCreateWithoutUserInput>
  }

  export type PickupOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: PickupOrderWhereUniqueInput
    data: XOR<PickupOrderUpdateWithoutUserInput, PickupOrderUncheckedUpdateWithoutUserInput>
  }

  export type PickupOrderUpdateManyWithWhereWithoutUserInput = {
    where: PickupOrderScalarWhereInput
    data: XOR<PickupOrderUpdateManyMutationInput, PickupOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type PickupOrderScalarWhereInput = {
    AND?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
    OR?: PickupOrderScalarWhereInput[]
    NOT?: PickupOrderScalarWhereInput | PickupOrderScalarWhereInput[]
    id?: IntFilter<"PickupOrder"> | number
    pickupNumber?: StringFilter<"PickupOrder"> | string
    pickupStatus?: EnumPickupStatusFilter<"PickupOrder"> | $Enums.PickupStatus
    distance?: IntFilter<"PickupOrder"> | number
    pickupPrice?: IntFilter<"PickupOrder"> | number
    createdAt?: DateTimeFilter<"PickupOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PickupOrder"> | Date | string
    isOrderCreated?: BoolFilter<"PickupOrder"> | boolean
    userId?: IntFilter<"PickupOrder"> | number
    outletId?: IntNullableFilter<"PickupOrder"> | number | null
    driverId?: IntNullableFilter<"PickupOrder"> | number | null
    addressId?: IntNullableFilter<"PickupOrder"> | number | null
  }

  export type DeliveryOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: DeliveryOrderWhereUniqueInput
    update: XOR<DeliveryOrderUpdateWithoutUserInput, DeliveryOrderUncheckedUpdateWithoutUserInput>
    create: XOR<DeliveryOrderCreateWithoutUserInput, DeliveryOrderUncheckedCreateWithoutUserInput>
  }

  export type DeliveryOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: DeliveryOrderWhereUniqueInput
    data: XOR<DeliveryOrderUpdateWithoutUserInput, DeliveryOrderUncheckedUpdateWithoutUserInput>
  }

  export type DeliveryOrderUpdateManyWithWhereWithoutUserInput = {
    where: DeliveryOrderScalarWhereInput
    data: XOR<DeliveryOrderUpdateManyMutationInput, DeliveryOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type DeliveryOrderScalarWhereInput = {
    AND?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
    OR?: DeliveryOrderScalarWhereInput[]
    NOT?: DeliveryOrderScalarWhereInput | DeliveryOrderScalarWhereInput[]
    id?: IntFilter<"DeliveryOrder"> | number
    deliveryNumber?: StringFilter<"DeliveryOrder"> | string
    deliveryStatus?: EnumDeliveryStatusFilter<"DeliveryOrder"> | $Enums.DeliveryStatus
    distance?: IntFilter<"DeliveryOrder"> | number
    deliveryPrice?: IntFilter<"DeliveryOrder"> | number
    createdAt?: DateTimeFilter<"DeliveryOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DeliveryOrder"> | Date | string
    userId?: IntFilter<"DeliveryOrder"> | number
    driverId?: IntNullableFilter<"DeliveryOrder"> | number | null
    orderId?: IntFilter<"DeliveryOrder"> | number
    addressId?: IntNullableFilter<"DeliveryOrder"> | number | null
  }

  export type UserNotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: UserNotificationWhereUniqueInput
    update: XOR<UserNotificationUpdateWithoutUserInput, UserNotificationUncheckedUpdateWithoutUserInput>
    create: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput>
  }

  export type UserNotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: UserNotificationWhereUniqueInput
    data: XOR<UserNotificationUpdateWithoutUserInput, UserNotificationUncheckedUpdateWithoutUserInput>
  }

  export type UserNotificationUpdateManyWithWhereWithoutUserInput = {
    where: UserNotificationScalarWhereInput
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserNotificationScalarWhereInput = {
    AND?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
    OR?: UserNotificationScalarWhereInput[]
    NOT?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
    id?: IntFilter<"UserNotification"> | number
    createdAt?: DateTimeFilter<"UserNotification"> | Date | string
    isRead?: BoolFilter<"UserNotification"> | boolean
    userId?: IntFilter<"UserNotification"> | number
    notificationId?: IntFilter<"UserNotification"> | number
  }

  export type AttendanceUpsertWithWhereUniqueWithoutUserInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutUserInput, AttendanceUncheckedUpdateWithoutUserInput>
    create: XOR<AttendanceCreateWithoutUserInput, AttendanceUncheckedCreateWithoutUserInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutUserInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutUserInput, AttendanceUncheckedUpdateWithoutUserInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutUserInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutUserInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: IntFilter<"Attendance"> | number
    checkIn?: DateTimeFilter<"Attendance"> | Date | string
    checkOut?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    workHour?: IntFilter<"Attendance"> | number
    userId?: IntFilter<"Attendance"> | number
    attendanceStatus?: EnumAttendanceStatusFilter<"Attendance"> | $Enums.AttendanceStatus
  }

  export type OutletCreateWithoutEmployeeInput = {
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    address?: AddressCreateNestedManyWithoutOutletInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutEmployeeInput = {
    id?: number
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    address?: AddressUncheckedCreateNestedManyWithoutOutletInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutEmployeeInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutEmployeeInput, OutletUncheckedCreateWithoutEmployeeInput>
  }

  export type UserCreateWithoutEmployeeInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    address?: AddressCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationCreateNestedManyWithoutUserInput
    Attendance?: AttendanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type PickupOrderCreateWithoutDriverInput = {
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    user: UserCreateNestedOneWithoutPickupOrderInput
    outlet?: OutletCreateNestedOneWithoutPickupOrderInput
    order?: OrderCreateNestedManyWithoutPickupOrderInput
    address?: AddressCreateNestedOneWithoutPickupOrderInput
  }

  export type PickupOrderUncheckedCreateWithoutDriverInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    addressId?: number | null
    order?: OrderUncheckedCreateNestedManyWithoutPickupOrderInput
  }

  export type PickupOrderCreateOrConnectWithoutDriverInput = {
    where: PickupOrderWhereUniqueInput
    create: XOR<PickupOrderCreateWithoutDriverInput, PickupOrderUncheckedCreateWithoutDriverInput>
  }

  export type PickupOrderCreateManyDriverInputEnvelope = {
    data: PickupOrderCreateManyDriverInput | PickupOrderCreateManyDriverInput[]
    skipDuplicates?: boolean
  }

  export type DeliveryOrderCreateWithoutDriverInput = {
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDeliveryOrderInput
    order: OrderCreateNestedOneWithoutDeliveryOrderInput
    address?: AddressCreateNestedOneWithoutDeliveryOrderInput
  }

  export type DeliveryOrderUncheckedCreateWithoutDriverInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    orderId: number
    addressId?: number | null
  }

  export type DeliveryOrderCreateOrConnectWithoutDriverInput = {
    where: DeliveryOrderWhereUniqueInput
    create: XOR<DeliveryOrderCreateWithoutDriverInput, DeliveryOrderUncheckedCreateWithoutDriverInput>
  }

  export type DeliveryOrderCreateManyDriverInputEnvelope = {
    data: DeliveryOrderCreateManyDriverInput | DeliveryOrderCreateManyDriverInput[]
    skipDuplicates?: boolean
  }

  export type OrderWorkerCreateWithoutWorkerInput = {
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderWorkerInput
  }

  export type OrderWorkerUncheckedCreateWithoutWorkerInput = {
    id?: number
    orderId: number
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
  }

  export type OrderWorkerCreateOrConnectWithoutWorkerInput = {
    where: OrderWorkerWhereUniqueInput
    create: XOR<OrderWorkerCreateWithoutWorkerInput, OrderWorkerUncheckedCreateWithoutWorkerInput>
  }

  export type OrderWorkerCreateManyWorkerInputEnvelope = {
    data: OrderWorkerCreateManyWorkerInput | OrderWorkerCreateManyWorkerInput[]
    skipDuplicates?: boolean
  }

  export type OutletUpsertWithoutEmployeeInput = {
    update: XOR<OutletUpdateWithoutEmployeeInput, OutletUncheckedUpdateWithoutEmployeeInput>
    create: XOR<OutletCreateWithoutEmployeeInput, OutletUncheckedCreateWithoutEmployeeInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutEmployeeInput, OutletUncheckedUpdateWithoutEmployeeInput>
  }

  export type OutletUpdateWithoutEmployeeInput = {
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUpdateManyWithoutOutletNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    address?: AddressUncheckedUpdateManyWithoutOutletNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PickupOrderUpsertWithWhereUniqueWithoutDriverInput = {
    where: PickupOrderWhereUniqueInput
    update: XOR<PickupOrderUpdateWithoutDriverInput, PickupOrderUncheckedUpdateWithoutDriverInput>
    create: XOR<PickupOrderCreateWithoutDriverInput, PickupOrderUncheckedCreateWithoutDriverInput>
  }

  export type PickupOrderUpdateWithWhereUniqueWithoutDriverInput = {
    where: PickupOrderWhereUniqueInput
    data: XOR<PickupOrderUpdateWithoutDriverInput, PickupOrderUncheckedUpdateWithoutDriverInput>
  }

  export type PickupOrderUpdateManyWithWhereWithoutDriverInput = {
    where: PickupOrderScalarWhereInput
    data: XOR<PickupOrderUpdateManyMutationInput, PickupOrderUncheckedUpdateManyWithoutDriverInput>
  }

  export type DeliveryOrderUpsertWithWhereUniqueWithoutDriverInput = {
    where: DeliveryOrderWhereUniqueInput
    update: XOR<DeliveryOrderUpdateWithoutDriverInput, DeliveryOrderUncheckedUpdateWithoutDriverInput>
    create: XOR<DeliveryOrderCreateWithoutDriverInput, DeliveryOrderUncheckedCreateWithoutDriverInput>
  }

  export type DeliveryOrderUpdateWithWhereUniqueWithoutDriverInput = {
    where: DeliveryOrderWhereUniqueInput
    data: XOR<DeliveryOrderUpdateWithoutDriverInput, DeliveryOrderUncheckedUpdateWithoutDriverInput>
  }

  export type DeliveryOrderUpdateManyWithWhereWithoutDriverInput = {
    where: DeliveryOrderScalarWhereInput
    data: XOR<DeliveryOrderUpdateManyMutationInput, DeliveryOrderUncheckedUpdateManyWithoutDriverInput>
  }

  export type OrderWorkerUpsertWithWhereUniqueWithoutWorkerInput = {
    where: OrderWorkerWhereUniqueInput
    update: XOR<OrderWorkerUpdateWithoutWorkerInput, OrderWorkerUncheckedUpdateWithoutWorkerInput>
    create: XOR<OrderWorkerCreateWithoutWorkerInput, OrderWorkerUncheckedCreateWithoutWorkerInput>
  }

  export type OrderWorkerUpdateWithWhereUniqueWithoutWorkerInput = {
    where: OrderWorkerWhereUniqueInput
    data: XOR<OrderWorkerUpdateWithoutWorkerInput, OrderWorkerUncheckedUpdateWithoutWorkerInput>
  }

  export type OrderWorkerUpdateManyWithWhereWithoutWorkerInput = {
    where: OrderWorkerScalarWhereInput
    data: XOR<OrderWorkerUpdateManyMutationInput, OrderWorkerUncheckedUpdateManyWithoutWorkerInput>
  }

  export type OrderWorkerScalarWhereInput = {
    AND?: OrderWorkerScalarWhereInput | OrderWorkerScalarWhereInput[]
    OR?: OrderWorkerScalarWhereInput[]
    NOT?: OrderWorkerScalarWhereInput | OrderWorkerScalarWhereInput[]
    id?: IntFilter<"OrderWorker"> | number
    orderId?: IntFilter<"OrderWorker"> | number
    workerId?: IntFilter<"OrderWorker"> | number
    station?: EnumEmployeeStationNullableFilter<"OrderWorker"> | $Enums.EmployeeStation | null
    isComplete?: BoolFilter<"OrderWorker"> | boolean
    bypassRequest?: BoolFilter<"OrderWorker"> | boolean
    bypassNote?: StringNullableFilter<"OrderWorker"> | string | null
    bypassAccepted?: BoolFilter<"OrderWorker"> | boolean
    bypassRejected?: BoolFilter<"OrderWorker"> | boolean
    createdAt?: DateTimeFilter<"OrderWorker"> | Date | string
  }

  export type OutletCreateWithoutAddressInput = {
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    employee?: EmployeeCreateNestedManyWithoutOutletInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutAddressInput = {
    id?: number
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    employee?: EmployeeUncheckedCreateNestedManyWithoutOutletInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutAddressInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutAddressInput, OutletUncheckedCreateWithoutAddressInput>
  }

  export type UserCreateWithoutAddressInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationCreateNestedManyWithoutUserInput
    Attendance?: AttendanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type PickupOrderCreateWithoutAddressInput = {
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    user: UserCreateNestedOneWithoutPickupOrderInput
    outlet?: OutletCreateNestedOneWithoutPickupOrderInput
    order?: OrderCreateNestedManyWithoutPickupOrderInput
    driver?: EmployeeCreateNestedOneWithoutPickupOrderInput
  }

  export type PickupOrderUncheckedCreateWithoutAddressInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    driverId?: number | null
    order?: OrderUncheckedCreateNestedManyWithoutPickupOrderInput
  }

  export type PickupOrderCreateOrConnectWithoutAddressInput = {
    where: PickupOrderWhereUniqueInput
    create: XOR<PickupOrderCreateWithoutAddressInput, PickupOrderUncheckedCreateWithoutAddressInput>
  }

  export type PickupOrderCreateManyAddressInputEnvelope = {
    data: PickupOrderCreateManyAddressInput | PickupOrderCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type DeliveryOrderCreateWithoutAddressInput = {
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDeliveryOrderInput
    driver?: EmployeeCreateNestedOneWithoutDeliveryOrderInput
    order: OrderCreateNestedOneWithoutDeliveryOrderInput
  }

  export type DeliveryOrderUncheckedCreateWithoutAddressInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    driverId?: number | null
    orderId: number
  }

  export type DeliveryOrderCreateOrConnectWithoutAddressInput = {
    where: DeliveryOrderWhereUniqueInput
    create: XOR<DeliveryOrderCreateWithoutAddressInput, DeliveryOrderUncheckedCreateWithoutAddressInput>
  }

  export type DeliveryOrderCreateManyAddressInputEnvelope = {
    data: DeliveryOrderCreateManyAddressInput | DeliveryOrderCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type OutletUpsertWithoutAddressInput = {
    update: XOR<OutletUpdateWithoutAddressInput, OutletUncheckedUpdateWithoutAddressInput>
    create: XOR<OutletCreateWithoutAddressInput, OutletUncheckedCreateWithoutAddressInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutAddressInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutAddressInput, OutletUncheckedUpdateWithoutAddressInput>
  }

  export type OutletUpdateWithoutAddressInput = {
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateManyWithoutOutletNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUncheckedUpdateManyWithoutOutletNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type UserUpsertWithoutAddressInput = {
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAddressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type UserUpdateWithoutAddressInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PickupOrderUpsertWithWhereUniqueWithoutAddressInput = {
    where: PickupOrderWhereUniqueInput
    update: XOR<PickupOrderUpdateWithoutAddressInput, PickupOrderUncheckedUpdateWithoutAddressInput>
    create: XOR<PickupOrderCreateWithoutAddressInput, PickupOrderUncheckedCreateWithoutAddressInput>
  }

  export type PickupOrderUpdateWithWhereUniqueWithoutAddressInput = {
    where: PickupOrderWhereUniqueInput
    data: XOR<PickupOrderUpdateWithoutAddressInput, PickupOrderUncheckedUpdateWithoutAddressInput>
  }

  export type PickupOrderUpdateManyWithWhereWithoutAddressInput = {
    where: PickupOrderScalarWhereInput
    data: XOR<PickupOrderUpdateManyMutationInput, PickupOrderUncheckedUpdateManyWithoutAddressInput>
  }

  export type DeliveryOrderUpsertWithWhereUniqueWithoutAddressInput = {
    where: DeliveryOrderWhereUniqueInput
    update: XOR<DeliveryOrderUpdateWithoutAddressInput, DeliveryOrderUncheckedUpdateWithoutAddressInput>
    create: XOR<DeliveryOrderCreateWithoutAddressInput, DeliveryOrderUncheckedCreateWithoutAddressInput>
  }

  export type DeliveryOrderUpdateWithWhereUniqueWithoutAddressInput = {
    where: DeliveryOrderWhereUniqueInput
    data: XOR<DeliveryOrderUpdateWithoutAddressInput, DeliveryOrderUncheckedUpdateWithoutAddressInput>
  }

  export type DeliveryOrderUpdateManyWithWhereWithoutAddressInput = {
    where: DeliveryOrderScalarWhereInput
    data: XOR<DeliveryOrderUpdateManyMutationInput, DeliveryOrderUncheckedUpdateManyWithoutAddressInput>
  }

  export type EmployeeCreateWithoutOutletInput = {
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    user: UserCreateNestedOneWithoutEmployeeInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeUncheckedCreateWithoutOutletInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeCreateOrConnectWithoutOutletInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutOutletInput, EmployeeUncheckedCreateWithoutOutletInput>
  }

  export type EmployeeCreateManyOutletInputEnvelope = {
    data: EmployeeCreateManyOutletInput | EmployeeCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutOutletInput = {
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    user?: UserCreateNestedOneWithoutAddressInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutAddressInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutOutletInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    userId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutAddressInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutOutletInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutOutletInput, AddressUncheckedCreateWithoutOutletInput>
  }

  export type AddressCreateManyOutletInputEnvelope = {
    data: AddressCreateManyOutletInput | AddressCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type PickupOrderCreateWithoutOutletInput = {
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    user: UserCreateNestedOneWithoutPickupOrderInput
    order?: OrderCreateNestedManyWithoutPickupOrderInput
    driver?: EmployeeCreateNestedOneWithoutPickupOrderInput
    address?: AddressCreateNestedOneWithoutPickupOrderInput
  }

  export type PickupOrderUncheckedCreateWithoutOutletInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    driverId?: number | null
    addressId?: number | null
    order?: OrderUncheckedCreateNestedManyWithoutPickupOrderInput
  }

  export type PickupOrderCreateOrConnectWithoutOutletInput = {
    where: PickupOrderWhereUniqueInput
    create: XOR<PickupOrderCreateWithoutOutletInput, PickupOrderUncheckedCreateWithoutOutletInput>
  }

  export type PickupOrderCreateManyOutletInputEnvelope = {
    data: PickupOrderCreateManyOutletInput | PickupOrderCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithWhereUniqueWithoutOutletInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutOutletInput, EmployeeUncheckedUpdateWithoutOutletInput>
    create: XOR<EmployeeCreateWithoutOutletInput, EmployeeUncheckedCreateWithoutOutletInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutOutletInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutOutletInput, EmployeeUncheckedUpdateWithoutOutletInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutOutletInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutOutletInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: IntFilter<"Employee"> | number
    workShift?: EnumEmployeeWorkShiftNullableFilter<"Employee"> | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFilter<"Employee"> | boolean
    station?: EnumEmployeeStationNullableFilter<"Employee"> | $Enums.EmployeeStation | null
    userId?: IntFilter<"Employee"> | number
    outletId?: IntNullableFilter<"Employee"> | number | null
  }

  export type AddressUpsertWithWhereUniqueWithoutOutletInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutOutletInput, AddressUncheckedUpdateWithoutOutletInput>
    create: XOR<AddressCreateWithoutOutletInput, AddressUncheckedCreateWithoutOutletInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutOutletInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutOutletInput, AddressUncheckedUpdateWithoutOutletInput>
  }

  export type AddressUpdateManyWithWhereWithoutOutletInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutOutletInput>
  }

  export type PickupOrderUpsertWithWhereUniqueWithoutOutletInput = {
    where: PickupOrderWhereUniqueInput
    update: XOR<PickupOrderUpdateWithoutOutletInput, PickupOrderUncheckedUpdateWithoutOutletInput>
    create: XOR<PickupOrderCreateWithoutOutletInput, PickupOrderUncheckedCreateWithoutOutletInput>
  }

  export type PickupOrderUpdateWithWhereUniqueWithoutOutletInput = {
    where: PickupOrderWhereUniqueInput
    data: XOR<PickupOrderUpdateWithoutOutletInput, PickupOrderUncheckedUpdateWithoutOutletInput>
  }

  export type PickupOrderUpdateManyWithWhereWithoutOutletInput = {
    where: PickupOrderScalarWhereInput
    data: XOR<PickupOrderUpdateManyMutationInput, PickupOrderUncheckedUpdateManyWithoutOutletInput>
  }

  export type UserCreateWithoutPickupOrderInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationCreateNestedManyWithoutUserInput
    Attendance?: AttendanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPickupOrderInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPickupOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPickupOrderInput, UserUncheckedCreateWithoutPickupOrderInput>
  }

  export type OutletCreateWithoutPickupOrderInput = {
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    employee?: EmployeeCreateNestedManyWithoutOutletInput
    address?: AddressCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutPickupOrderInput = {
    id?: number
    outletName: string
    outletType: $Enums.OutletType
    createdAt?: Date | string
    deletedAt?: Date | string | null
    updatedAt?: Date | string
    isDelete?: boolean
    employee?: EmployeeUncheckedCreateNestedManyWithoutOutletInput
    address?: AddressUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutPickupOrderInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutPickupOrderInput, OutletUncheckedCreateWithoutPickupOrderInput>
  }

  export type OrderCreateWithoutPickupOrderInput = {
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    orderItem?: OrderItemCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPickupOrderInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPickupOrderInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPickupOrderInput, OrderUncheckedCreateWithoutPickupOrderInput>
  }

  export type OrderCreateManyPickupOrderInputEnvelope = {
    data: OrderCreateManyPickupOrderInput | OrderCreateManyPickupOrderInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutPickupOrderInput = {
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    outlet?: OutletCreateNestedOneWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeUncheckedCreateWithoutPickupOrderInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
    outletId?: number | null
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeCreateOrConnectWithoutPickupOrderInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPickupOrderInput, EmployeeUncheckedCreateWithoutPickupOrderInput>
  }

  export type AddressCreateWithoutPickupOrderInput = {
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outlet?: OutletCreateNestedOneWithoutAddressInput
    user?: UserCreateNestedOneWithoutAddressInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutPickupOrderInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outletId?: number | null
    userId?: number | null
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutPickupOrderInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutPickupOrderInput, AddressUncheckedCreateWithoutPickupOrderInput>
  }

  export type UserUpsertWithoutPickupOrderInput = {
    update: XOR<UserUpdateWithoutPickupOrderInput, UserUncheckedUpdateWithoutPickupOrderInput>
    create: XOR<UserCreateWithoutPickupOrderInput, UserUncheckedCreateWithoutPickupOrderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPickupOrderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPickupOrderInput, UserUncheckedUpdateWithoutPickupOrderInput>
  }

  export type UserUpdateWithoutPickupOrderInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPickupOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OutletUpsertWithoutPickupOrderInput = {
    update: XOR<OutletUpdateWithoutPickupOrderInput, OutletUncheckedUpdateWithoutPickupOrderInput>
    create: XOR<OutletCreateWithoutPickupOrderInput, OutletUncheckedCreateWithoutPickupOrderInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutPickupOrderInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutPickupOrderInput, OutletUncheckedUpdateWithoutPickupOrderInput>
  }

  export type OutletUpdateWithoutPickupOrderInput = {
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateManyWithoutOutletNestedInput
    address?: AddressUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutPickupOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletName?: StringFieldUpdateOperationsInput | string
    outletType?: EnumOutletTypeFieldUpdateOperationsInput | $Enums.OutletType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUncheckedUpdateManyWithoutOutletNestedInput
    address?: AddressUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutPickupOrderInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutPickupOrderInput, OrderUncheckedUpdateWithoutPickupOrderInput>
    create: XOR<OrderCreateWithoutPickupOrderInput, OrderUncheckedCreateWithoutPickupOrderInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutPickupOrderInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutPickupOrderInput, OrderUncheckedUpdateWithoutPickupOrderInput>
  }

  export type OrderUpdateManyWithWhereWithoutPickupOrderInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutPickupOrderInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    orderNumber?: StringFilter<"Order"> | string
    orderStatus?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    weight?: IntNullableFilter<"Order"> | number | null
    laundryPrice?: IntNullableFilter<"Order"> | number | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    pickupOrderId?: IntFilter<"Order"> | number
    isPaid?: BoolFilter<"Order"> | boolean
    isConfirm?: BoolFilter<"Order"> | boolean
    receivedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    confirmedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
  }

  export type EmployeeUpsertWithoutPickupOrderInput = {
    update: XOR<EmployeeUpdateWithoutPickupOrderInput, EmployeeUncheckedUpdateWithoutPickupOrderInput>
    create: XOR<EmployeeCreateWithoutPickupOrderInput, EmployeeUncheckedCreateWithoutPickupOrderInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPickupOrderInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPickupOrderInput, EmployeeUncheckedUpdateWithoutPickupOrderInput>
  }

  export type EmployeeUpdateWithoutPickupOrderInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    outlet?: OutletUpdateOneWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPickupOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type AddressUpsertWithoutPickupOrderInput = {
    update: XOR<AddressUpdateWithoutPickupOrderInput, AddressUncheckedUpdateWithoutPickupOrderInput>
    create: XOR<AddressCreateWithoutPickupOrderInput, AddressUncheckedCreateWithoutPickupOrderInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutPickupOrderInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutPickupOrderInput, AddressUncheckedUpdateWithoutPickupOrderInput>
  }

  export type AddressUpdateWithoutPickupOrderInput = {
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outlet?: OutletUpdateOneWithoutAddressNestedInput
    user?: UserUpdateOneWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutPickupOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type PickupOrderCreateWithoutOrderInput = {
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    user: UserCreateNestedOneWithoutPickupOrderInput
    outlet?: OutletCreateNestedOneWithoutPickupOrderInput
    driver?: EmployeeCreateNestedOneWithoutPickupOrderInput
    address?: AddressCreateNestedOneWithoutPickupOrderInput
  }

  export type PickupOrderUncheckedCreateWithoutOrderInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    driverId?: number | null
    addressId?: number | null
  }

  export type PickupOrderCreateOrConnectWithoutOrderInput = {
    where: PickupOrderWhereUniqueInput
    create: XOR<PickupOrderCreateWithoutOrderInput, PickupOrderUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    qty: number
    isDelete?: boolean
    laundryItem: LaundryItemCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    qty: number
    laundryItemId: number
    isDelete?: boolean
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type DeliveryOrderCreateWithoutOrderInput = {
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDeliveryOrderInput
    driver?: EmployeeCreateNestedOneWithoutDeliveryOrderInput
    address?: AddressCreateNestedOneWithoutDeliveryOrderInput
  }

  export type DeliveryOrderUncheckedCreateWithoutOrderInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    driverId?: number | null
    addressId?: number | null
  }

  export type DeliveryOrderCreateOrConnectWithoutOrderInput = {
    where: DeliveryOrderWhereUniqueInput
    create: XOR<DeliveryOrderCreateWithoutOrderInput, DeliveryOrderUncheckedCreateWithoutOrderInput>
  }

  export type DeliveryOrderCreateManyOrderInputEnvelope = {
    data: DeliveryOrderCreateManyOrderInput | DeliveryOrderCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderWorkerCreateWithoutOrderInput = {
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
    worker: EmployeeCreateNestedOneWithoutOrderWorkerInput
  }

  export type OrderWorkerUncheckedCreateWithoutOrderInput = {
    id?: number
    workerId: number
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
  }

  export type OrderWorkerCreateOrConnectWithoutOrderInput = {
    where: OrderWorkerWhereUniqueInput
    create: XOR<OrderWorkerCreateWithoutOrderInput, OrderWorkerUncheckedCreateWithoutOrderInput>
  }

  export type OrderWorkerCreateManyOrderInputEnvelope = {
    data: OrderWorkerCreateManyOrderInput | OrderWorkerCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutOrderInput = {
    invoiceNumber: string
    amount: number
    paymentMethode?: string | null
    paymentStatus?: $Enums.PaymentStatus
    snapToken?: string | null
    snapRedirectUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutOrderInput = {
    id?: number
    invoiceNumber: string
    amount: number
    paymentMethode?: string | null
    paymentStatus?: $Enums.PaymentStatus
    snapToken?: string | null
    snapRedirectUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
  }

  export type PaymentCreateManyOrderInputEnvelope = {
    data: PaymentCreateManyOrderInput | PaymentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PickupOrderUpsertWithoutOrderInput = {
    update: XOR<PickupOrderUpdateWithoutOrderInput, PickupOrderUncheckedUpdateWithoutOrderInput>
    create: XOR<PickupOrderCreateWithoutOrderInput, PickupOrderUncheckedCreateWithoutOrderInput>
    where?: PickupOrderWhereInput
  }

  export type PickupOrderUpdateToOneWithWhereWithoutOrderInput = {
    where?: PickupOrderWhereInput
    data: XOR<PickupOrderUpdateWithoutOrderInput, PickupOrderUncheckedUpdateWithoutOrderInput>
  }

  export type PickupOrderUpdateWithoutOrderInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPickupOrderNestedInput
    outlet?: OutletUpdateOneWithoutPickupOrderNestedInput
    driver?: EmployeeUpdateOneWithoutPickupOrderNestedInput
    address?: AddressUpdateOneWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    qty?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    laundryItemId?: IntFilter<"OrderItem"> | number
    isDelete?: BoolFilter<"OrderItem"> | boolean
  }

  export type DeliveryOrderUpsertWithWhereUniqueWithoutOrderInput = {
    where: DeliveryOrderWhereUniqueInput
    update: XOR<DeliveryOrderUpdateWithoutOrderInput, DeliveryOrderUncheckedUpdateWithoutOrderInput>
    create: XOR<DeliveryOrderCreateWithoutOrderInput, DeliveryOrderUncheckedCreateWithoutOrderInput>
  }

  export type DeliveryOrderUpdateWithWhereUniqueWithoutOrderInput = {
    where: DeliveryOrderWhereUniqueInput
    data: XOR<DeliveryOrderUpdateWithoutOrderInput, DeliveryOrderUncheckedUpdateWithoutOrderInput>
  }

  export type DeliveryOrderUpdateManyWithWhereWithoutOrderInput = {
    where: DeliveryOrderScalarWhereInput
    data: XOR<DeliveryOrderUpdateManyMutationInput, DeliveryOrderUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderWorkerUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderWorkerWhereUniqueInput
    update: XOR<OrderWorkerUpdateWithoutOrderInput, OrderWorkerUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderWorkerCreateWithoutOrderInput, OrderWorkerUncheckedCreateWithoutOrderInput>
  }

  export type OrderWorkerUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderWorkerWhereUniqueInput
    data: XOR<OrderWorkerUpdateWithoutOrderInput, OrderWorkerUncheckedUpdateWithoutOrderInput>
  }

  export type OrderWorkerUpdateManyWithWhereWithoutOrderInput = {
    where: OrderWorkerScalarWhereInput
    data: XOR<OrderWorkerUpdateManyMutationInput, OrderWorkerUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentUpdateManyWithWhereWithoutOrderInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    invoiceNumber?: StringFilter<"Payment"> | string
    amount?: IntFilter<"Payment"> | number
    paymentMethode?: StringNullableFilter<"Payment"> | string | null
    paymentStatus?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    snapToken?: StringNullableFilter<"Payment"> | string | null
    snapRedirectUrl?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    orderId?: IntFilter<"Payment"> | number
  }

  export type LaundryItemCreateWithoutOrderItemInput = {
    itemName: string
    isDelete?: boolean
  }

  export type LaundryItemUncheckedCreateWithoutOrderItemInput = {
    id?: number
    itemName: string
    isDelete?: boolean
  }

  export type LaundryItemCreateOrConnectWithoutOrderItemInput = {
    where: LaundryItemWhereUniqueInput
    create: XOR<LaundryItemCreateWithoutOrderItemInput, LaundryItemUncheckedCreateWithoutOrderItemInput>
  }

  export type OrderCreateWithoutOrderItemInput = {
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    pickupOrder: PickupOrderCreateNestedOneWithoutOrderInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderItemInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pickupOrderId: number
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderItemInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderItemInput, OrderUncheckedCreateWithoutOrderItemInput>
  }

  export type LaundryItemUpsertWithoutOrderItemInput = {
    update: XOR<LaundryItemUpdateWithoutOrderItemInput, LaundryItemUncheckedUpdateWithoutOrderItemInput>
    create: XOR<LaundryItemCreateWithoutOrderItemInput, LaundryItemUncheckedCreateWithoutOrderItemInput>
    where?: LaundryItemWhereInput
  }

  export type LaundryItemUpdateToOneWithWhereWithoutOrderItemInput = {
    where?: LaundryItemWhereInput
    data: XOR<LaundryItemUpdateWithoutOrderItemInput, LaundryItemUncheckedUpdateWithoutOrderItemInput>
  }

  export type LaundryItemUpdateWithoutOrderItemInput = {
    itemName?: StringFieldUpdateOperationsInput | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LaundryItemUncheckedUpdateWithoutOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemName?: StringFieldUpdateOperationsInput | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderUpsertWithoutOrderItemInput = {
    update: XOR<OrderUpdateWithoutOrderItemInput, OrderUncheckedUpdateWithoutOrderItemInput>
    create: XOR<OrderCreateWithoutOrderItemInput, OrderUncheckedCreateWithoutOrderItemInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderItemInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderItemInput, OrderUncheckedUpdateWithoutOrderItemInput>
  }

  export type OrderUpdateWithoutOrderItemInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupOrder?: PickupOrderUpdateOneRequiredWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickupOrderId?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderItemCreateWithoutLaundryItemInput = {
    qty: number
    isDelete?: boolean
    order: OrderCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateWithoutLaundryItemInput = {
    id?: number
    qty: number
    orderId: number
    isDelete?: boolean
  }

  export type OrderItemCreateOrConnectWithoutLaundryItemInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutLaundryItemInput, OrderItemUncheckedCreateWithoutLaundryItemInput>
  }

  export type OrderItemCreateManyLaundryItemInputEnvelope = {
    data: OrderItemCreateManyLaundryItemInput | OrderItemCreateManyLaundryItemInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemUpsertWithWhereUniqueWithoutLaundryItemInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutLaundryItemInput, OrderItemUncheckedUpdateWithoutLaundryItemInput>
    create: XOR<OrderItemCreateWithoutLaundryItemInput, OrderItemUncheckedCreateWithoutLaundryItemInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutLaundryItemInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutLaundryItemInput, OrderItemUncheckedUpdateWithoutLaundryItemInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutLaundryItemInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutLaundryItemInput>
  }

  export type UserCreateWithoutDeliveryOrderInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationCreateNestedManyWithoutUserInput
    Attendance?: AttendanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDeliveryOrderInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDeliveryOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDeliveryOrderInput, UserUncheckedCreateWithoutDeliveryOrderInput>
  }

  export type EmployeeCreateWithoutDeliveryOrderInput = {
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    outlet?: OutletCreateNestedOneWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeUncheckedCreateWithoutDeliveryOrderInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
    outletId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutDriverInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutWorkerInput
  }

  export type EmployeeCreateOrConnectWithoutDeliveryOrderInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDeliveryOrderInput, EmployeeUncheckedCreateWithoutDeliveryOrderInput>
  }

  export type OrderCreateWithoutDeliveryOrderInput = {
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    pickupOrder: PickupOrderCreateNestedOneWithoutOrderInput
    orderItem?: OrderItemCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutDeliveryOrderInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pickupOrderId: number
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutDeliveryOrderInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutDeliveryOrderInput, OrderUncheckedCreateWithoutDeliveryOrderInput>
  }

  export type AddressCreateWithoutDeliveryOrderInput = {
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outlet?: OutletCreateNestedOneWithoutAddressInput
    user?: UserCreateNestedOneWithoutAddressInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutDeliveryOrderInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outletId?: number | null
    userId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutDeliveryOrderInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutDeliveryOrderInput, AddressUncheckedCreateWithoutDeliveryOrderInput>
  }

  export type UserUpsertWithoutDeliveryOrderInput = {
    update: XOR<UserUpdateWithoutDeliveryOrderInput, UserUncheckedUpdateWithoutDeliveryOrderInput>
    create: XOR<UserCreateWithoutDeliveryOrderInput, UserUncheckedCreateWithoutDeliveryOrderInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDeliveryOrderInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDeliveryOrderInput, UserUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type UserUpdateWithoutDeliveryOrderInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDeliveryOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EmployeeUpsertWithoutDeliveryOrderInput = {
    update: XOR<EmployeeUpdateWithoutDeliveryOrderInput, EmployeeUncheckedUpdateWithoutDeliveryOrderInput>
    create: XOR<EmployeeCreateWithoutDeliveryOrderInput, EmployeeUncheckedCreateWithoutDeliveryOrderInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDeliveryOrderInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDeliveryOrderInput, EmployeeUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type EmployeeUpdateWithoutDeliveryOrderInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    outlet?: OutletUpdateOneWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDeliveryOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type OrderUpsertWithoutDeliveryOrderInput = {
    update: XOR<OrderUpdateWithoutDeliveryOrderInput, OrderUncheckedUpdateWithoutDeliveryOrderInput>
    create: XOR<OrderCreateWithoutDeliveryOrderInput, OrderUncheckedCreateWithoutDeliveryOrderInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutDeliveryOrderInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutDeliveryOrderInput, OrderUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type OrderUpdateWithoutDeliveryOrderInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupOrder?: PickupOrderUpdateOneRequiredWithoutOrderNestedInput
    orderItem?: OrderItemUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutDeliveryOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickupOrderId?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItem?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type AddressUpsertWithoutDeliveryOrderInput = {
    update: XOR<AddressUpdateWithoutDeliveryOrderInput, AddressUncheckedUpdateWithoutDeliveryOrderInput>
    create: XOR<AddressCreateWithoutDeliveryOrderInput, AddressUncheckedCreateWithoutDeliveryOrderInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutDeliveryOrderInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutDeliveryOrderInput, AddressUncheckedUpdateWithoutDeliveryOrderInput>
  }

  export type AddressUpdateWithoutDeliveryOrderInput = {
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outlet?: OutletUpdateOneWithoutAddressNestedInput
    user?: UserUpdateOneWithoutAddressNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutDeliveryOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type OrderCreateWithoutOrderWorkerInput = {
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    pickupOrder: PickupOrderCreateNestedOneWithoutOrderInput
    orderItem?: OrderItemCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderWorkerInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pickupOrderId: number
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderWorkerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderWorkerInput, OrderUncheckedCreateWithoutOrderWorkerInput>
  }

  export type EmployeeCreateWithoutOrderWorkerInput = {
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    outlet?: OutletCreateNestedOneWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutDriverInput
  }

  export type EmployeeUncheckedCreateWithoutOrderWorkerInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
    outletId?: number | null
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutDriverInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutDriverInput
  }

  export type EmployeeCreateOrConnectWithoutOrderWorkerInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutOrderWorkerInput, EmployeeUncheckedCreateWithoutOrderWorkerInput>
  }

  export type OrderUpsertWithoutOrderWorkerInput = {
    update: XOR<OrderUpdateWithoutOrderWorkerInput, OrderUncheckedUpdateWithoutOrderWorkerInput>
    create: XOR<OrderCreateWithoutOrderWorkerInput, OrderUncheckedCreateWithoutOrderWorkerInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderWorkerInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderWorkerInput, OrderUncheckedUpdateWithoutOrderWorkerInput>
  }

  export type OrderUpdateWithoutOrderWorkerInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupOrder?: PickupOrderUpdateOneRequiredWithoutOrderNestedInput
    orderItem?: OrderItemUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickupOrderId?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItem?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type EmployeeUpsertWithoutOrderWorkerInput = {
    update: XOR<EmployeeUpdateWithoutOrderWorkerInput, EmployeeUncheckedUpdateWithoutOrderWorkerInput>
    create: XOR<EmployeeCreateWithoutOrderWorkerInput, EmployeeUncheckedCreateWithoutOrderWorkerInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutOrderWorkerInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutOrderWorkerInput, EmployeeUncheckedUpdateWithoutOrderWorkerInput>
  }

  export type EmployeeUpdateWithoutOrderWorkerInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    outlet?: OutletUpdateOneWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutDriverNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutOrderWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type UserCreateWithoutUserNotificationInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutUserInput
    Attendance?: AttendanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserNotificationInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutUserInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserNotificationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserNotificationInput, UserUncheckedCreateWithoutUserNotificationInput>
  }

  export type NotificationCreateWithoutUserNotificationInput = {
    title: string
    description: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserNotificationInput = {
    id?: number
    title: string
    description: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserNotificationInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserNotificationInput, NotificationUncheckedCreateWithoutUserNotificationInput>
  }

  export type UserUpsertWithoutUserNotificationInput = {
    update: XOR<UserUpdateWithoutUserNotificationInput, UserUncheckedUpdateWithoutUserNotificationInput>
    create: XOR<UserCreateWithoutUserNotificationInput, UserUncheckedCreateWithoutUserNotificationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserNotificationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserNotificationInput, UserUncheckedUpdateWithoutUserNotificationInput>
  }

  export type UserUpdateWithoutUserNotificationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationUpsertWithoutUserNotificationInput = {
    update: XOR<NotificationUpdateWithoutUserNotificationInput, NotificationUncheckedUpdateWithoutUserNotificationInput>
    create: XOR<NotificationCreateWithoutUserNotificationInput, NotificationUncheckedCreateWithoutUserNotificationInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutUserNotificationInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutUserNotificationInput, NotificationUncheckedUpdateWithoutUserNotificationInput>
  }

  export type NotificationUpdateWithoutUserNotificationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationCreateWithoutNotificationInput = {
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutUserNotificationInput
  }

  export type UserNotificationUncheckedCreateWithoutNotificationInput = {
    id?: number
    createdAt?: Date | string
    isRead?: boolean
    userId: number
  }

  export type UserNotificationCreateOrConnectWithoutNotificationInput = {
    where: UserNotificationWhereUniqueInput
    create: XOR<UserNotificationCreateWithoutNotificationInput, UserNotificationUncheckedCreateWithoutNotificationInput>
  }

  export type UserNotificationCreateManyNotificationInputEnvelope = {
    data: UserNotificationCreateManyNotificationInput | UserNotificationCreateManyNotificationInput[]
    skipDuplicates?: boolean
  }

  export type UserNotificationUpsertWithWhereUniqueWithoutNotificationInput = {
    where: UserNotificationWhereUniqueInput
    update: XOR<UserNotificationUpdateWithoutNotificationInput, UserNotificationUncheckedUpdateWithoutNotificationInput>
    create: XOR<UserNotificationCreateWithoutNotificationInput, UserNotificationUncheckedCreateWithoutNotificationInput>
  }

  export type UserNotificationUpdateWithWhereUniqueWithoutNotificationInput = {
    where: UserNotificationWhereUniqueInput
    data: XOR<UserNotificationUpdateWithoutNotificationInput, UserNotificationUncheckedUpdateWithoutNotificationInput>
  }

  export type UserNotificationUpdateManyWithWhereWithoutNotificationInput = {
    where: UserNotificationScalarWhereInput
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyWithoutNotificationInput>
  }

  export type OrderCreateWithoutPaymentInput = {
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    pickupOrder: PickupOrderCreateNestedOneWithoutOrderInput
    orderItem?: OrderItemCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPaymentInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pickupOrderId: number
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
    orderItem?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutOrderInput
    orderWorker?: OrderWorkerUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPaymentInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
  }

  export type OrderUpsertWithoutPaymentInput = {
    update: XOR<OrderUpdateWithoutPaymentInput, OrderUncheckedUpdateWithoutPaymentInput>
    create: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPaymentInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPaymentInput, OrderUncheckedUpdateWithoutPaymentInput>
  }

  export type OrderUpdateWithoutPaymentInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupOrder?: PickupOrderUpdateOneRequiredWithoutOrderNestedInput
    orderItem?: OrderItemUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pickupOrderId?: IntFieldUpdateOperationsInput | number
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItem?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type UserCreateWithoutAttendanceInput = {
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendanceInput = {
    id?: number
    fullName: string
    email: string
    password?: string | null
    isVerify?: boolean
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    isDelete?: boolean
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerifyToken?: string | null
    authProvider?: string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
    pickupOrder?: PickupOrderUncheckedCreateNestedManyWithoutUserInput
    deliveryOrder?: DeliveryOrderUncheckedCreateNestedManyWithoutUserInput
    userNotification?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendanceInput, UserUncheckedCreateWithoutAttendanceInput>
  }

  export type UserUpsertWithoutAttendanceInput = {
    update: XOR<UserUpdateWithoutAttendanceInput, UserUncheckedUpdateWithoutAttendanceInput>
    create: XOR<UserCreateWithoutAttendanceInput, UserUncheckedCreateWithoutAttendanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendanceInput, UserUncheckedUpdateWithoutAttendanceInput>
  }

  export type UserUpdateWithoutAttendanceInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    isVerify?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutUserNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutUserNestedInput
    userNotification?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AddressCreateManyUserInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    outletId?: number | null
  }

  export type PickupOrderCreateManyUserInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    outletId?: number | null
    driverId?: number | null
    addressId?: number | null
  }

  export type DeliveryOrderCreateManyUserInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    driverId?: number | null
    orderId: number
    addressId?: number | null
  }

  export type UserNotificationCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    isRead?: boolean
    notificationId: number
  }

  export type AttendanceCreateManyUserInput = {
    id?: number
    checkIn?: Date | string
    checkOut?: Date | string | null
    createdAt?: Date | string
    workHour: number
    attendanceStatus?: $Enums.AttendanceStatus
  }

  export type AddressUpdateWithoutUserInput = {
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outlet?: OutletUpdateOneWithoutAddressNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickupOrderUpdateWithoutUserInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    outlet?: OutletUpdateOneWithoutPickupOrderNestedInput
    order?: OrderUpdateManyWithoutPickupOrderNestedInput
    driver?: EmployeeUpdateOneWithoutPickupOrderNestedInput
    address?: AddressUpdateOneWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUncheckedUpdateManyWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderUpdateWithoutUserInput = {
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    driver?: EmployeeUpdateOneWithoutDeliveryOrderNestedInput
    order?: OrderUpdateOneRequiredWithoutDeliveryOrderNestedInput
    address?: AddressUpdateOneWithoutDeliveryOrderNestedInput
  }

  export type DeliveryOrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserNotificationUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    notification?: NotificationUpdateOneRequiredWithoutUserNotificationNestedInput
  }

  export type UserNotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    notificationId?: IntFieldUpdateOperationsInput | number
  }

  export type UserNotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    notificationId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceUpdateWithoutUserInput = {
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  }

  export type AttendanceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  }

  export type AttendanceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workHour?: IntFieldUpdateOperationsInput | number
    attendanceStatus?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
  }

  export type PickupOrderCreateManyDriverInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    addressId?: number | null
  }

  export type DeliveryOrderCreateManyDriverInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    orderId: number
    addressId?: number | null
  }

  export type OrderWorkerCreateManyWorkerInput = {
    id?: number
    orderId: number
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
  }

  export type PickupOrderUpdateWithoutDriverInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPickupOrderNestedInput
    outlet?: OutletUpdateOneWithoutPickupOrderNestedInput
    order?: OrderUpdateManyWithoutPickupOrderNestedInput
    address?: AddressUpdateOneWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUncheckedUpdateManyWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateManyWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderUpdateWithoutDriverInput = {
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDeliveryOrderNestedInput
    order?: OrderUpdateOneRequiredWithoutDeliveryOrderNestedInput
    address?: AddressUpdateOneWithoutDeliveryOrderNestedInput
  }

  export type DeliveryOrderUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderWorkerUpdateWithoutWorkerInput = {
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderWorkerNestedInput
  }

  export type OrderWorkerUncheckedUpdateWithoutWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderWorkerUncheckedUpdateManyWithoutWorkerInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PickupOrderCreateManyAddressInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    outletId?: number | null
    driverId?: number | null
  }

  export type DeliveryOrderCreateManyAddressInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    driverId?: number | null
    orderId: number
  }

  export type PickupOrderUpdateWithoutAddressInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPickupOrderNestedInput
    outlet?: OutletUpdateOneWithoutPickupOrderNestedInput
    order?: OrderUpdateManyWithoutPickupOrderNestedInput
    driver?: EmployeeUpdateOneWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUncheckedUpdateManyWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    outletId?: NullableIntFieldUpdateOperationsInput | number | null
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderUpdateWithoutAddressInput = {
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDeliveryOrderNestedInput
    driver?: EmployeeUpdateOneWithoutDeliveryOrderNestedInput
    order?: OrderUpdateOneRequiredWithoutDeliveryOrderNestedInput
  }

  export type DeliveryOrderUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCreateManyOutletInput = {
    id?: number
    workShift?: $Enums.EmployeeWorkShift | null
    isSuperAdmin?: boolean
    station?: $Enums.EmployeeStation | null
    userId: number
  }

  export type AddressCreateManyOutletInput = {
    id?: number
    addressLine: string
    city: string
    isPrimary?: boolean
    latitude?: number | null
    longitude?: number | null
    isDelete?: boolean
    userId?: number | null
  }

  export type PickupOrderCreateManyOutletInput = {
    id?: number
    pickupNumber: string
    pickupStatus?: $Enums.PickupStatus
    distance: number
    pickupPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOrderCreated?: boolean
    userId: number
    driverId?: number | null
    addressId?: number | null
  }

  export type EmployeeUpdateWithoutOutletInput = {
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutDriverNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutDriverNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutWorkerNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    workShift?: NullableEnumEmployeeWorkShiftFieldUpdateOperationsInput | $Enums.EmployeeWorkShift | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AddressUpdateWithoutOutletInput = {
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutAddressNestedInput
    pickupOrder?: PickupOrderUpdateManyWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    pickupOrder?: PickupOrderUncheckedUpdateManyWithoutAddressNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressLine?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PickupOrderUpdateWithoutOutletInput = {
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPickupOrderNestedInput
    order?: OrderUpdateManyWithoutPickupOrderNestedInput
    driver?: EmployeeUpdateOneWithoutPickupOrderNestedInput
    address?: AddressUpdateOneWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: OrderUncheckedUpdateManyWithoutPickupOrderNestedInput
  }

  export type PickupOrderUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    pickupNumber?: StringFieldUpdateOperationsInput | string
    pickupStatus?: EnumPickupStatusFieldUpdateOperationsInput | $Enums.PickupStatus
    distance?: IntFieldUpdateOperationsInput | number
    pickupPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOrderCreated?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderCreateManyPickupOrderInput = {
    id?: number
    orderNumber: string
    orderStatus?: $Enums.OrderStatus
    weight?: number | null
    laundryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isPaid?: boolean
    isConfirm?: boolean
    receivedAt?: Date | string | null
    confirmedAt?: Date | string | null
  }

  export type OrderUpdateWithoutPickupOrderInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItem?: OrderItemUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPickupOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItem?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    deliveryOrder?: DeliveryOrderUncheckedUpdateManyWithoutOrderNestedInput
    orderWorker?: OrderWorkerUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutPickupOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderStatus?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    laundryPrice?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    isConfirm?: BoolFieldUpdateOperationsInput | boolean
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    qty: number
    laundryItemId: number
    isDelete?: boolean
  }

  export type DeliveryOrderCreateManyOrderInput = {
    id?: number
    deliveryNumber: string
    deliveryStatus?: $Enums.DeliveryStatus
    distance: number
    deliveryPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    driverId?: number | null
    addressId?: number | null
  }

  export type OrderWorkerCreateManyOrderInput = {
    id?: number
    workerId: number
    station?: $Enums.EmployeeStation | null
    isComplete?: boolean
    bypassRequest?: boolean
    bypassNote?: string | null
    bypassAccepted?: boolean
    bypassRejected?: boolean
    createdAt?: Date | string
  }

  export type PaymentCreateManyOrderInput = {
    id?: number
    invoiceNumber: string
    amount: number
    paymentMethode?: string | null
    paymentStatus?: $Enums.PaymentStatus
    snapToken?: string | null
    snapRedirectUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    qty?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    laundryItem?: LaundryItemUpdateOneRequiredWithoutOrderItemNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    laundryItemId?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    laundryItemId?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DeliveryOrderUpdateWithoutOrderInput = {
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDeliveryOrderNestedInput
    driver?: EmployeeUpdateOneWithoutDeliveryOrderNestedInput
    address?: AddressUpdateOneWithoutDeliveryOrderNestedInput
  }

  export type DeliveryOrderUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeliveryOrderUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    deliveryNumber?: StringFieldUpdateOperationsInput | string
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    distance?: IntFieldUpdateOperationsInput | number
    deliveryPrice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    driverId?: NullableIntFieldUpdateOperationsInput | number | null
    addressId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderWorkerUpdateWithoutOrderInput = {
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    worker?: EmployeeUpdateOneRequiredWithoutOrderWorkerNestedInput
  }

  export type OrderWorkerUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    workerId?: IntFieldUpdateOperationsInput | number
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderWorkerUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    workerId?: IntFieldUpdateOperationsInput | number
    station?: NullableEnumEmployeeStationFieldUpdateOperationsInput | $Enums.EmployeeStation | null
    isComplete?: BoolFieldUpdateOperationsInput | boolean
    bypassRequest?: BoolFieldUpdateOperationsInput | boolean
    bypassNote?: NullableStringFieldUpdateOperationsInput | string | null
    bypassAccepted?: BoolFieldUpdateOperationsInput | boolean
    bypassRejected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutOrderInput = {
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethode?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    snapToken?: NullableStringFieldUpdateOperationsInput | string | null
    snapRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyLaundryItemInput = {
    id?: number
    qty: number
    orderId: number
    isDelete?: boolean
  }

  export type OrderItemUpdateWithoutLaundryItemInput = {
    qty?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
    order?: OrderUpdateOneRequiredWithoutOrderItemNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutLaundryItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderItemUncheckedUpdateManyWithoutLaundryItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    qty?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    isDelete?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserNotificationCreateManyNotificationInput = {
    id?: number
    createdAt?: Date | string
    isRead?: boolean
    userId: number
  }

  export type UserNotificationUpdateWithoutNotificationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserNotificationNestedInput
  }

  export type UserNotificationUncheckedUpdateWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserNotificationUncheckedUpdateManyWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}